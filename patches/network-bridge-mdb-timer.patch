Add capability to display timer info for mdb and router port entries.

Add command to configure a temporary router port entry.

diff --git a/include/linux/if_bridge.h b/include/linux/if_bridge.h
index cf81969..f903106 100644
--- a/include/linux/if_bridge.h
+++ b/include/linux/if_bridge.h
@@ -188,6 +188,15 @@ struct br_mdb_entry {
 		__be16		proto;
 		__be16		vlan_id;
 	} addr;
+	__u32		timer;
+};
+
+struct br_mdb_rtr_entry {
+	__u32 ifindex;
+	__u32 timer;
+#define MDB_RTR_TEMPORARY 0
+#define MDB_RTR_PERMANENT 1
+	__u8 state;
 };
 
 enum {
diff --git a/net/bridge/br_mdb.c b/net/bridge/br_mdb.c
index 50b5e76..d186c09 100644
--- a/net/bridge/br_mdb.c
+++ b/net/bridge/br_mdb.c
@@ -29,8 +29,16 @@ static int br_rports_fill_info(struct sk_buff *skb, struct netlink_callback *cb,
 		return -EMSGSIZE;
 
 	hlist_for_each_entry_rcu(p, n, &br->router_list, rlist) {
-		if (p && nla_put_u32(skb, MDBA_ROUTER_PORT, p->dev->ifindex))
-			goto fail;
+		if (p) {
+			struct br_mdb_rtr_entry e;
+			memset(&e, 0, sizeof(e));
+			e.ifindex = p->dev->ifindex;
+			e.timer = br_timer_value(&p->multicast_router_timer);
+			e.state = (p->multicast_router == 2) ?
+				MDB_RTR_PERMANENT : MDB_RTR_TEMPORARY;
+			if (nla_put(skb, MDBA_ROUTER_PORT, sizeof(e), &e))
+				goto fail;
+		}
 	}
 
 	nla_nest_end(skb, nest);
@@ -94,6 +102,7 @@ static int br_mdb_fill_info(struct sk_buff *skb, struct netlink_callback *cb,
 #endif
 					e.addr.proto = p->addr.proto;
 					e.addr.vlan_id = p->addr.vid;
+					e.timer = br_timer_value(&p->timer);
 					if (nla_put(skb, MDBA_MDB_ENTRY_INFO, sizeof(e), &e)) {
 						nla_nest_cancel(skb, nest2);
 						err = -EMSGSIZE;
@@ -204,7 +213,9 @@ cancel:
 static inline size_t rtnl_mdb_nlmsg_size(void)
 {
 	return NLMSG_ALIGN(sizeof(struct br_port_msg))
-		+ nla_total_size(sizeof(struct br_mdb_entry));
+		+ nla_total_size(sizeof(struct br_mdb_entry))
+		+ nla_total_size(sizeof(struct nlattr))
+		+ nla_total_size(sizeof(struct nlattr));
 }
 
 static void __br_mdb_notify(struct net_device *dev, struct br_mdb_entry *entry,
@@ -425,8 +436,11 @@ static int br_mdb_add_group(struct net_bridge *br, struct net_bridge_port *port,
 	for (pp = &mp->ports;
 	     (p = mlock_dereference(*pp, br)) != NULL;
 	     pp = &p->next) {
-		if (p->port == port)
+		if (p->port == port) {
+			if (p->state == MDB_TEMPORARY)
+				mod_timer(&p->timer, now + br->multicast_membership_interval);
 			return -EEXIST;
+		}
 		if ((unsigned long)p->port < (unsigned long)port)
 			break;
 	}
diff --git a/net/bridge/br_multicast.c b/net/bridge/br_multicast.c
index fec8e6a..72b35dc 100644
--- a/net/bridge/br_multicast.c
+++ b/net/bridge/br_multicast.c
@@ -801,13 +801,16 @@ static void br_multicast_router_expired(unsigned long data)
 	struct net_bridge *br = port->br;
 
 	spin_lock(&br->multicast_lock);
-	if (port->multicast_router != 1 ||
+	if (port->multicast_router == 0 ||
+		port->multicast_router == 2 ||
 	    timer_pending(&port->multicast_router_timer) ||
 	    hlist_unhashed(&port->rlist))
 		goto out;
 
 	hlist_del_init_rcu(&port->rlist);
 	br_rtr_notify(br->dev, port, RTM_DELMDB);
+	if (port->multicast_router == 3)
+		port->multicast_router = 1;
 
 out:
 	spin_unlock(&br->multicast_lock);
@@ -1029,6 +1032,8 @@ void br_multicast_disable_port(struct net_bridge_port *port)
 	if (!hlist_unhashed(&port->rlist)) {
 		hlist_del_init_rcu(&port->rlist);
 		br_rtr_notify(br->dev, port, RTM_DELMDB);
+		if (port->multicast_router == 3)
+			port->multicast_router = 1;
 	}
 	del_timer(&port->multicast_router_timer);
 	del_timer(&port->ip4_query.timer);
@@ -1187,6 +1192,8 @@ static void br_multicast_add_router(struct net_bridge *br,
 	struct net_bridge_port *p;
 	struct hlist_node *n, *slot = NULL;
 
+	if (!hlist_unhashed(&port->rlist))
+		return;
 	hlist_for_each_entry(p, n, &br->router_list, rlist) {
 		if ((unsigned long) port >= (unsigned long) p)
 			break;
@@ -1212,7 +1219,7 @@ static void br_multicast_mark_router(struct net_bridge *br,
 		return;
 	}
 
-	if (port->multicast_router != 1)
+	if (port->multicast_router == 0 || port->multicast_router == 2)
 		return;
 
 	if (!hlist_unhashed(&port->rlist))
@@ -1999,9 +2006,13 @@ int br_multicast_set_port_router(struct net_bridge_port *p, unsigned long val)
 {
 	struct net_bridge *br = p->br;
 	int err = -ENOENT;
+	unsigned long now = jiffies;
 
 	spin_lock(&br->multicast_lock);
 	if (p->multicast_router == val) {
+		if (p->multicast_router == 3)
+			mod_timer(&p->multicast_router_timer,
+					now + br->multicast_querier_interval);
 		err = 0;
 		goto unlock;
 	}
@@ -2010,6 +2021,7 @@ int br_multicast_set_port_router(struct net_bridge_port *p, unsigned long val)
 	case 0:
 	case 1:
 	case 2:
+	case 3:
 		p->multicast_router = val;
 		err = 0;
 
@@ -2021,6 +2033,11 @@ int br_multicast_set_port_router(struct net_bridge_port *p, unsigned long val)
 		if (val == 1)
 			break;
 
+		if (val == 3) {
+			br_multicast_mark_router(br, p);
+			break;
+		}
+
 		del_timer(&p->multicast_router_timer);
 
 		if (val == 0)
