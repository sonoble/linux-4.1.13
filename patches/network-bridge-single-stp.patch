Added support for single stp mode.  In this mode, all bridges are enabled

with user mode spanningtree by default.

diff --git a/net/bridge/br.c b/net/bridge/br.c
index 2736e3d..9387007 100644
--- a/net/bridge/br.c
+++ b/net/bridge/br.c
@@ -27,6 +27,13 @@ int br_hw_fwding_enabled = 1;
 MODULE_PARM_DESC(hw_fwding, "Enable hw forwarding");
 module_param_named(hw_fwding, br_hw_fwding_enabled, int, 0644);
 
+int br_allow_multiple_vlans = 0;
+
+MODULE_PARM_DESC(allow_multiple_vlans, "Allow multiple vlans in a bridge");
+module_param_named(allow_multiple_vlans, br_allow_multiple_vlans, int, 0644);
+
+struct bridge_list bridges;
+
 static void __net_exit br_net_exit(struct net *net)
 {
 	struct net_device *dev;
@@ -53,13 +60,15 @@ static const struct stp_proto br_stp_proto = {
 #ifdef CONFIG_SYSCTL
 static struct ctl_table_header *brstp_sysctl_header;
 int brstp_user_space __read_mostly = 1;
-
+int brstp_user_space_single __read_mostly = 0;
+int brstp_stp_state_logging = 0;
 static
 int brstp_sysctl_call_tables(ctl_table * ctl, int write,
 			void __user * buffer, size_t * lenp, loff_t * ppos)
 {
 	int ret;
 	int old_brstp_user_space = brstp_user_space;
+	int old_brstp_user_space_single = brstp_user_space_single;
 
 	ret = proc_dointvec(ctl, write, buffer, lenp, ppos);
 	if (old_brstp_user_space != brstp_user_space) {
@@ -76,6 +85,9 @@ int brstp_sysctl_call_tables(ctl_table * ctl, int write,
 		}
 	}
 
+	if (old_brstp_user_space_single != brstp_user_space_single)
+		br_set_single_stp_mode(brstp_user_space_single);
+
 	return ret;
 }
 
@@ -87,6 +99,20 @@ static ctl_table brstp_table[] = {
 		.mode           = 0644,
 		.proc_handler   = brstp_sysctl_call_tables,
 	},
+	{
+		.procname       = "bridge-stp-user-space-single",
+		.data           = &brstp_user_space_single,
+		.maxlen         = sizeof(int),
+		.mode           = 0644,
+		.proc_handler   = brstp_sysctl_call_tables,
+	},
+	{
+		.procname       = "bridge-stp-state-logging",
+		.data           = &brstp_stp_state_logging,
+		.maxlen         = sizeof(int),
+		.mode           = 0644,
+		.proc_handler   = brstp_sysctl_call_tables,
+	},
 	{ }
 };
 
@@ -97,6 +123,8 @@ static struct ctl_path brstp_path[] = {
 };
 #else
 #define brstp_user_space 1
+#define brstp_user_space_single 1
+#define brstp_stp_state_logging 0
 #endif
 
 static int __init br_init(void)
@@ -120,6 +148,9 @@ static int __init br_init(void)
 		}
 	}
 
+	memset(&bridges, 0, sizeof(bridges));
+	INIT_LIST_HEAD(&bridges);
+
 	err = br_fdb_init();
 	if (err)
 		goto err_out;
diff --git a/net/bridge/br_device.c b/net/bridge/br_device.c
index 4218709..7ea60d9 100644
--- a/net/bridge/br_device.c
+++ b/net/bridge/br_device.c
@@ -391,7 +391,10 @@ void br_dev_setup(struct net_device *dev)
 
 	memcpy(br->group_addr, eth_reserved_addr_base, ETH_ALEN);
 
-	br->stp_enabled = BR_NO_STP;
+	if (brstp_user_space_single)
+		br->stp_enabled = BR_USER_STP;
+	else
+		br->stp_enabled = BR_NO_STP;
 	br->group_fwd_mask = BR_GROUPFWD_DEFAULT;
 
 	br->designated_root = br->bridge_id;
@@ -403,4 +406,6 @@ void br_dev_setup(struct net_device *dev)
 	br_netfilter_rtable_init(br);
 	br_stp_timer_init(br);
 	br_multicast_init(br);
+
+	list_add_rcu(&br->list, &bridges.list);
 }
diff --git a/net/bridge/br_if.c b/net/bridge/br_if.c
index c11df2d..004b220 100644
--- a/net/bridge/br_if.c
+++ b/net/bridge/br_if.c
@@ -169,6 +169,8 @@ void br_dev_delete(struct net_device *dev, struct list_head *head)
 	struct net_bridge *br = netdev_priv(dev);
 	struct net_bridge_port *p, *n;
 
+	list_del_rcu(&br->list);
+
 	list_for_each_entry_safe(p, n, &br->port_list, list) {
 		del_nbp(p);
 	}
@@ -324,6 +326,49 @@ netdev_features_t br_features_recompute(struct net_bridge *br,
 	return features;
 }
 
+static bool is_dev_in_same_vlan(struct net_bridge *br,
+				struct net_device *dev)
+{
+	struct net_bridge_port *p;
+	u16 vlan_id;
+
+	if (!is_vlan_dev(dev))
+		return true;
+
+	vlan_id = vlan_dev_vlan_id(dev);
+
+	list_for_each_entry_rcu(p, &br->port_list, list) {
+		if (!is_vlan_dev(p->dev))
+			continue;
+		if (vlan_id != vlan_dev_vlan_id(p->dev))
+			return false;
+	}
+	return true;
+}
+
+static bool is_dev_vlan_in_conflict(struct net_bridge *br,
+				    struct net_device *dev)
+{
+	struct net_bridge_port *p;
+	struct net_bridge *b;
+	u16 vlan_id;
+
+	vlan_id = vlan_dev_vlan_id(dev);
+
+	list_for_each_entry_rcu(b, &bridges.list, list) {
+		if (b == br || dev_net(b->dev) != dev_net(br->dev))
+			continue;
+		list_for_each_entry_rcu(p, &b->port_list, list) {
+			if (!is_vlan_dev(p->dev))
+				continue;
+			if (vlan_dev_vlan_id(p->dev) == vlan_id)
+				return true;
+		}
+	}
+	return false;
+}
+
+
 /* called with RTNL */
 int br_add_if(struct net_bridge *br, struct net_device *dev)
 {
@@ -349,6 +394,11 @@ int br_add_if(struct net_bridge *br, struct net_device *dev)
 	if (dev->priv_flags & IFF_DONT_BRIDGE)
 		return -EOPNOTSUPP;
 
+	/* Disallow vlan devices of same vlan but added to different bridges */
+	if (!br_allow_multiple_vlans && is_vlan_dev(dev) &&
+	    is_dev_vlan_in_conflict(br, dev))
+		return -EINVAL;
+
 	p = new_nbp(br, dev);
 	if (IS_ERR(p))
 		return PTR_ERR(p);
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index c80f94d..49eb2a6 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -213,6 +213,7 @@ static inline struct net_bridge_port *br_port_get_rtnl(const struct net_device *
 struct net_bridge
 {
 	spinlock_t			lock;
+	struct list_head		list;
 	struct list_head		port_list;
 	struct net_device		*dev;
 	u8				initial_addr[ETH_ALEN];
@@ -297,6 +298,10 @@ struct net_bridge
 #endif
 };
 
+struct bridge_list {
+	struct list_head list;
+};
+
 struct br_input_skb_cb {
 	struct net_device *brdev;
 #ifdef CONFIG_BRIDGE_IGMP_SNOOPING
@@ -336,6 +341,12 @@ static inline int br_is_root_bridge(const struct net_bridge *br)
 	return !memcmp(&br->bridge_id, &br->designated_root, 8);
 }
 
+extern int brstp_user_space;
+extern int brstp_user_space_single;
+extern int brstp_stp_state_logging;
+extern int br_allow_multiple_vlans;
+extern struct bridge_list bridges;
+
 /* br_device.c */
 void br_dev_setup(struct net_device *dev);
 void br_dev_delete(struct net_device *dev, struct list_head *list);
@@ -747,6 +758,7 @@ void br_stp_set_bridge_priority(struct net_bridge *br, u16 newprio);
 int br_stp_set_port_priority(struct net_bridge_port *p, unsigned long newprio);
 int br_stp_set_path_cost(struct net_bridge_port *p, unsigned long path_cost);
 ssize_t br_show_bridge_id(char *buf, const struct bridge_id *id);
+void br_set_single_stp_mode(int mode);
 
 /* br_stp_bpdu.c */
 struct stp_proto;
diff --git a/net/bridge/br_stp.c b/net/bridge/br_stp.c
index 4a36459..75f2d1e 100644
--- a/net/bridge/br_stp.c
+++ b/net/bridge/br_stp.c
@@ -31,6 +31,9 @@ static const char *const br_port_state_names[] = {
 
 void br_log_state(const struct net_bridge_port *p)
 {
+	if (!brstp_stp_state_logging)
+		return;
+
 	br_info(p->br, "port %u(%s) entered %s state\n",
 		(unsigned int) p->port_no, p->dev->name,
 		br_port_state_names[p->state]);
diff --git a/net/bridge/br_stp_if.c b/net/bridge/br_stp_if.c
index 4ed11ab..9c5ccd4 100644
--- a/net/bridge/br_stp_if.c
+++ b/net/bridge/br_stp_if.c
@@ -15,6 +15,7 @@
 #include <linux/kmod.h>
 #include <linux/etherdevice.h>
 #include <linux/rtnetlink.h>
+#include <linux/if_vlan.h>
 
 #include "br_private.h"
 #include "br_private_stp.h"
@@ -170,6 +171,11 @@ static void br_stp_stop(struct net_bridge *br)
 	char *envp[] = { NULL };
 	struct net_bridge_port *p;
 
+	if (brstp_user_space_single) {
+		br_info(br, "single mode STP is on, cannot disable STP\n");
+		return;
+	}
+
 	if (br->stp_enabled == BR_USER_STP) {
 		r = call_usermodehelper(BR_STP_PROG, argv, envp, UMH_WAIT_PROC);
 		br_info(br, "userspace STP stopped, return code %d\n", r);
@@ -181,8 +187,10 @@ static void br_stp_stop(struct net_bridge *br)
 			mod_timer(&p->hold_timer,
 				round_jiffies(jiffies + BR_HOLD_TIME));
 		}
+		br->stp_enabled = BR_NO_STP;
 		br_port_state_selection(br);
 		spin_unlock_bh(&br->lock);
+		return;
 	}
 
 	br->stp_enabled = BR_NO_STP;
@@ -201,6 +209,27 @@ void br_stp_set_enabled(struct net_bridge *br, unsigned long val)
 	}
 }
 
+void br_set_single_stp_mode(int mode)
+{
+	int r;
+	char *argv[] = { BR_STP_PROG, "_single_mode_stp_", "stop", NULL };
+	char *envp[] = { NULL };
+
+	if (mode) {
+		/* loop through all bridges, make sure stp is enabled */
+		struct net_bridge *br;
+
+		list_for_each_entry(br, &bridges.list, list) {
+			if (br->stp_enabled != BR_USER_STP)
+				br_stp_start(br);
+		}
+		argv[2] = "start";
+	}
+	r = call_usermodehelper(BR_STP_PROG, argv, envp, UMH_WAIT_PROC);
+	printk(KERN_INFO "Single STP mode: %s, return code %d\n",
+		mode?"on":"off", r);
+}
+
 /* called under bridge lock */
 void br_stp_change_bridge_id(struct net_bridge *br, const unsigned char *addr)
 {
