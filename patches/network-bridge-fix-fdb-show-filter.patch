Fixed several fdb show filter issues.

diff --git a/net/bridge/br_fdb.c b/net/bridge/br_fdb.c
index 038ef86..5e93fc6 100644
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@ -664,7 +664,7 @@ int br_fdb_dump(struct sk_buff *skb,
 					  cb->nlh->nlmsg_seq,
 					  RTM_NEWNEIGH,
 					  NLM_F_MULTI) < 0)
-				break;
+				return idx;
 skip:
 			++idx;
 		}
diff --git a/net/core/rtnetlink.c b/net/core/rtnetlink.c
index c3aa410..cff4cb9 100644
--- a/net/core/rtnetlink.c
+++ b/net/core/rtnetlink.c
@@ -2253,66 +2253,63 @@ EXPORT_SYMBOL(ndo_dflt_fdb_dump);
 static int rtnl_fdb_dump(struct sk_buff *skb, struct netlink_callback *cb)
 {
         struct net_device *dev;
-		struct nlattr *tb[IFLA_MAX+1];
-		struct net_device *bdev = NULL;
-		struct net_device *br_dev = NULL;
-		const struct net_device_ops *ops = NULL;
-		const struct net_device_ops *cops = NULL;
-		struct ifinfomsg *ifm = nlmsg_data(cb->nlh);
-		struct net *net = sock_net(skb->sk);
-		int brport_idx = 0;
-		int br_idx = 0;
-		int idx = 0;
-
-		if (nlmsg_parse(cb->nlh, sizeof(struct ifinfomsg), tb, IFLA_MAX,
+	struct nlattr *tb[IFLA_MAX+1];
+	struct net_device *fdev = NULL;
+	struct net_device *br_dev = NULL;
+	const struct net_device_ops *ops = NULL;
+	const struct net_device_ops *cops = NULL;
+	struct ifinfomsg *ifm = nlmsg_data(cb->nlh);
+	struct net *net = sock_net(skb->sk);
+	int brport_idx = 0;
+	int br_idx = 0;
+	int idx = 0;
+
+	rcu_read_lock();
+	if (nlmsg_parse(cb->nlh, sizeof(struct ifinfomsg), tb, IFLA_MAX,
 			ifla_policy) == 0) {
-			if (tb[IFLA_MASTER])
-				br_idx = nla_get_u32(tb[IFLA_MASTER]);
-		}
+		if (tb[IFLA_MASTER])
+			br_idx = nla_get_u32(tb[IFLA_MASTER]);
+	}
 
-		brport_idx = ifm->ifi_index;
+	brport_idx = ifm->ifi_index;
 
-		if (br_idx) {
-			br_dev = __dev_get_by_index(net, br_idx);
-			if (!br_dev)
-				return -ENODEV;
+	if (br_idx) {
+		br_dev = __dev_get_by_index(net, br_idx);
+		if (!br_dev)
+			return -ENODEV;
 
-			ops = br_dev->netdev_ops;
-			bdev = br_dev;
-		}
+		ops = br_dev->netdev_ops;
+	}
 
-		for_each_netdev(net, dev) {
-			if (brport_idx && (dev->ifindex != brport_idx))
-				continue;
+	if (brport_idx) {
+		fdev = __dev_get_by_index(net, brport_idx);
+		if (!fdev)
+			return -ENODEV;
+	}
 
+	for_each_netdev(net, dev) {
+		if (dev->priv_flags & IFF_EBRIDGE) {
 			if (!br_idx) { /* user did not specify a specific bridge */
-				if (dev->priv_flags & IFF_BRIDGE_PORT) {
-					br_dev = dev->master;
-					cops = br_dev->netdev_ops;
-				}
-
-				bdev = dev;
+				br_dev = dev;
+				cops = br_dev->netdev_ops;
 			} else {
-				if (dev != br_dev &&
-					!(dev->priv_flags & IFF_BRIDGE_PORT))
+				if (dev != br_dev)
 					continue;
-
-				if (br_dev != dev->master &&
-					!(dev->priv_flags & IFF_EBRIDGE))
-					continue;
-
-				bdev = br_dev;
 				cops = ops;
 			}
 
-			if (dev->priv_flags & IFF_BRIDGE_PORT) {
-				if (cops && cops->ndo_fdb_dump)
-					idx = cops->ndo_fdb_dump(skb, cb, br_dev, dev,
-								 idx);
-			}
+			if (fdev && (fdev->master != br_dev))
+				continue;
+
+			if (cops && cops->ndo_fdb_dump)
+				idx = cops->ndo_fdb_dump(skb, cb, br_dev, fdev, idx);
+			continue;
+		}
 
-			cops = NULL;
+		if (dev->netdev_ops->ndo_fdb_dump)
+			idx = dev->netdev_ops->ndo_fdb_dump(skb, cb, dev, NULL, idx);
         }
+	rcu_read_unlock();
 
         cb->args[0] = idx;
         return skb->len;
