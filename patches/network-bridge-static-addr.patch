Realized the expected behavior when setting the address of the bridge device

Prior to this patch, a user could set the address of a bridge device using...

    ip link set addr xx:xx:xx:xx:xx:xx dev brX

however, frames destined to that address do not propagate to the bridge device
because an entry is not formulated in the bridge fdb (forwarding data base).

This patch makes sure that an explicitly set (static) address is always
installed in the fdb, pointing to the bridge device, regardless of any interface
or dynamically learned address.  It allows users to resume the traditional
behavior of inheriting an interface address by specifying a static address of
00:00:00:00:00:00.

diff --git a/net/bridge/br_device.c b/net/bridge/br_device.c
index aef0767..88d6172 100644
--- a/net/bridge/br_device.c
+++ b/net/bridge/br_device.c
@@ -181,17 +181,33 @@ static int br_change_mtu(struct net_device *dev, int new_mtu)
 static int br_set_mac_address(struct net_device *dev, void *p)
 {
 	struct net_bridge *br = netdev_priv(dev);
-	struct sockaddr *addr = p;
+	const unsigned char *addr = ((struct sockaddr *)p)->sa_data;
 
-	if (!is_valid_ether_addr(addr->sa_data))
+	if (is_multicast_ether_addr(addr))
 		return -EADDRNOTAVAIL;
 
+	if ((br->dev->addr_assign_type == NET_ADDR_SET) &&
+	    ether_addr_equal(addr, dev->dev_addr))
+		return 0;
+
 	spin_lock_bh(&br->lock);
-	if (!ether_addr_equal(dev->dev_addr, addr->sa_data)) {
-		memcpy(dev->dev_addr, addr->sa_data, ETH_ALEN);
-		br_fdb_change_mac_address(br, addr->sa_data);
-		br_stp_change_bridge_id(br, addr->sa_data);
-	}
+	if (!ether_addr_equal(dev->dev_addr, addr)) {
+		if (is_zero_ether_addr(addr)) {
+			br_fdb_change_mac_address(br, addr);
+			br->dev->addr_assign_type = NET_ADDR_PERM;
+			br_stp_recalculate_bridge_id(br);
+		} else {
+			br_fdb_change_mac_address(br, addr);
+			memcpy(dev->dev_addr, addr, ETH_ALEN);
+			br_stp_change_bridge_id(br, addr);
+			br->dev->addr_assign_type = NET_ADDR_SET;
+		}
+		br_warn(br, "set br mac %02x:%02x:%02x:%02x:%02x:%02x",
+				dev->dev_addr[0], dev->dev_addr[1], dev->dev_addr[2],
+				dev->dev_addr[3], dev->dev_addr[4], dev->dev_addr[5]);
+	} else
+		br->dev->addr_assign_type = NET_ADDR_SET;
+
 	spin_unlock_bh(&br->lock);
 
 	return 0;
diff --git a/net/bridge/br_fdb.c b/net/bridge/br_fdb.c
index c0e733e..924e87d 100644
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@ -144,12 +144,28 @@ void br_fdb_change_mac_address(struct net_bridge *br, const u8 *newaddr)
 {
 	struct net_bridge_fdb_entry *f;
 	struct net_port_vlans *pv;
-	u16 vid = 0;
+	u16 vid = 1;
 
-	/* If old entry was unassociated with any port, then delete it. */
-	f = __br_fdb_get(br, br->dev->dev_addr, 0);
-	if (f && f->is_local && !f->dst)
-		fdb_delete(br, f);
+	/* if address is already static, remove from the fdb */
+	if (br->dev->addr_assign_type == NET_ADDR_SET) {
+		struct net_bridge_port *p;
+
+		/* If old entry was unassociated with any port, then delete it. */
+		f = __br_fdb_get(br, br->dev->dev_addr, 0);
+		if (f && f->is_local && !f->dst)
+			fdb_delete(br, f);
+
+		/* re-add in case static address overloaded a port address*/
+		list_for_each_entry(p, &br->port_list, list) {
+			if (ether_addr_equal(p->dev->dev_addr, br->dev->dev_addr)) {
+				fdb_insert(br, p, p->dev->dev_addr, 0);
+				break;
+			}
+		}
+	}
+
+	if (is_zero_ether_addr(newaddr))
+		return;
 
 	fdb_insert(br, NULL, newaddr, 0);
 
@@ -162,10 +178,25 @@ void br_fdb_change_mac_address(struct net_bridge *br, const u8 *newaddr)
 		return;
 
 	for_each_set_bit_from(vid, pv->vlan_bitmap, VLAN_N_VID) {
-		f = __br_fdb_get(br, br->dev->dev_addr, vid);
-		if (f && f->is_local && !f->dst)
-			fdb_delete(br, f);
-		fdb_insert(br, NULL, newaddr, vid);
+		if (br->dev->addr_assign_type == NET_ADDR_SET) {
+			struct net_bridge_port *p;
+
+			f = __br_fdb_get(br, br->dev->dev_addr, vid);
+			if (f && f->is_local && !f->dst)
+				fdb_delete(br, f);
+
+			list_for_each_entry(p, &br->port_list, list) {
+				if (ether_addr_equal(p->dev->dev_addr, br->dev->dev_addr)) {
+					if (nbp_vlan_find(p, vid))
+						fdb_insert(br, p, p->dev->dev_addr, vid);
+					else
+						fdb_insert(br, NULL, p->dev->dev_addr, vid);
+					break;
+				}
+			}
+
+			fdb_insert(br, NULL, newaddr, vid);
+		}
 	}
 }
 
@@ -420,13 +451,26 @@ static int fdb_insert(struct net_bridge *br, struct net_bridge_port *source,
 	fdb = fdb_find(head, addr, vid);
 	if (fdb) {
 		/* it is okay to have multiple ports with same
-		 * address, just use the first one.
+		 * address, just follow the logic below...
 		 */
-		if (fdb->is_local)
+		if (ether_addr_equal(addr, br->dev->dev_addr) &&
+		    (br->dev->addr_assign_type == NET_ADDR_SET)) {
+			/* don't replace a static bridge address */
+			if (fdb->is_local && (fdb->dst == NULL))
+				return 0;
+			/* warn when replacing dynamic or if addr w bridge addr */
+			br_warn(br, "replacing %02x:%02x:%02x:%02x:%02x:%02x"
+				"with static bridge address\n", addr[0],
+				addr[1], addr[2], addr[3], addr[4], addr[5]);
+		} else if (fdb->is_local) {
+			/* address is already static (interface/bridge) so nop */
 			return 0;
-		br_warn(br, "adding interface %s with same address "
-		       "as a received packet\n",
-		       source ? source->dev->name : br->dev->name);
+		} else {
+			/* add an interface address over a learned one */
+			br_warn(br, "adding interface %s with same address "
+				"as a received packet\n",
+				source->dev->name);
+		}
 		fdb_delete(br, fdb);
 	}
 
diff --git a/net/core/dev.c b/net/core/dev.c
index d27774f..1b14767 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -4882,8 +4882,10 @@ int dev_set_mac_address(struct net_device *dev, struct sockaddr *sa)
 	if (!netif_device_present(dev))
 		return -ENODEV;
 	err = ops->ndo_set_mac_address(dev, sa);
-	if (!err)
-		call_netdevice_notifiers(NETDEV_CHANGEADDR, dev);
+	if (err)
+		return err;
+	dev->addr_assign_type = NET_ADDR_SET;
+	call_netdevice_notifiers(NETDEV_CHANGEADDR, dev);
 	add_device_randomness(dev->dev_addr, dev->addr_len);
 	return err;
 }
diff --git a/net/core/rtnetlink.c b/net/core/rtnetlink.c
index 1fc0006..4f3d832 100644
--- a/net/core/rtnetlink.c
+++ b/net/core/rtnetlink.c
@@ -1673,9 +1673,11 @@ struct net_device *rtnl_create_link(struct net *src_net, struct net *net,
 
 	if (tb[IFLA_MTU])
 		dev->mtu = nla_get_u32(tb[IFLA_MTU]);
-	if (tb[IFLA_ADDRESS])
+	if (tb[IFLA_ADDRESS]) {
 		memcpy(dev->dev_addr, nla_data(tb[IFLA_ADDRESS]),
 				nla_len(tb[IFLA_ADDRESS]));
+		dev->addr_assign_type = NET_ADDR_SET;
+	}
 	if (tb[IFLA_BROADCAST])
 		memcpy(dev->broadcast, nla_data(tb[IFLA_BROADCAST]),
 				nla_len(tb[IFLA_BROADCAST]));
