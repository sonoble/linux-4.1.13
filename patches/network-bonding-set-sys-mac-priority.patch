Allow the sys_priority and sys_mac_addr of 802.3ad bonds to be configured.

sysfs objects are added to allow for the configuration of the sys_mac_addr
and sys_priority, called the System Identification in the 802.1AX standard.
This allows for decoupling of the System Identification from the mac address
used by the bond. If also avoids a problem where an assigned MAC address
to a bond is removed when the bond goes down.

diff --git a/drivers/net/bonding/bond_3ad.c b/drivers/net/bonding/bond_3ad.c
index 082a399..00c349a 100644
--- a/drivers/net/bonding/bond_3ad.c
+++ b/drivers/net/bonding/bond_3ad.c
@@ -1297,6 +1297,7 @@ static void ad_port_selection_logic(struct port *port)
 				port->aggregator = NULL;
 				port->next_port_in_aggregator = NULL;
 				port->actor_port_aggregator_identifier = 0;
+				__disable_port(port);
 
 				pr_debug("Port %d left LAG %d\n",
 					 port->actor_port_number,
@@ -1866,14 +1867,19 @@ void bond_3ad_initiate_agg_selection(struct bonding *bond, int timeout)
  */
 void bond_3ad_initialize(struct bonding *bond, u16 tick_resolution)
 {
+	// If user configured a sys_mac, use it
+	struct mac_addr *sys_mac = (struct mac_addr *)bond->dev->dev_addr;
+	if (MAC_ADDRESS_COMPARE(&(bond->params.sys_mac_addr), &(null_mac_addr)))
+		sys_mac = (struct mac_addr *)&(bond->params.sys_mac_addr);
+
 	// check that the bond is not initialized yet
 	if (MAC_ADDRESS_COMPARE(&(BOND_AD_INFO(bond).system.sys_mac_addr),
-				bond->dev->dev_addr)) {
+				sys_mac)) {
 
 		BOND_AD_INFO(bond).aggregator_identifier = 0;
 
-		BOND_AD_INFO(bond).system.sys_priority = 0xFFFF;
-		BOND_AD_INFO(bond).system.sys_mac_addr = *((struct mac_addr *)bond->dev->dev_addr);
+		BOND_AD_INFO(bond).system.sys_priority = bond->params.sys_priority;
+		BOND_AD_INFO(bond).system.sys_mac_addr = *sys_mac;
 
 		// initialize how many times this module is called in one second(should be about every 100ms)
 		ad_ticks_per_sec = tick_resolution;
@@ -2514,3 +2520,70 @@ void bond_3ad_update_lacp_rate(struct bonding *bond)
 
 	read_unlock(&bond->lock);
 }
+
+/*
+ * When modify sys_priority parameter via sysfs,
+ * update the bond's sys_priority and the
+ * actor_system_priority of each port.
+ *
+ * Hold slave->state_machine_lock,
+ * so we can modify port->actor_system_priority
+ * no matter bond is up or down.
+ */
+void bond_3ad_update_sys_priority(struct bonding *bond)
+{
+	int i;
+	struct slave *slave;
+	struct port *port = NULL;
+	u16 sys_priority;
+
+	write_lock_bh(&bond->lock);
+	sys_priority = bond->params.sys_priority;
+	BOND_AD_INFO(bond).system.sys_priority = sys_priority;
+
+	bond_for_each_slave(bond, slave, i) {
+		port = &(SLAVE_AD_INFO(slave).port);
+		if (port->slave == NULL)
+			continue;
+		__get_state_machine_lock(port);
+		port->actor_system_priority = sys_priority;
+		__release_state_machine_lock(port);
+	}
+
+	write_unlock_bh(&bond->lock);
+}
+
+/*
+ * When modify sys_mac_addr parameter via sysfs,
+ * update the bond's sys_mac_addr and the
+ * actor_system of each port.
+ *
+ * Hold slave->state_machine_lock,
+ * so we can modify port->actor_system
+ * no matter bond is up or down.
+ */
+void bond_3ad_update_sys_mac_addr(struct bonding *bond)
+{
+	int i;
+	struct slave *slave;
+	struct port *port = NULL;
+	struct mac_addr sys_mac;
+
+	write_lock_bh(&bond->lock);
+	sys_mac = *((struct mac_addr *)&(bond->params.sys_mac_addr));
+	if (!MAC_ADDRESS_COMPARE(&(sys_mac), &(null_mac_addr))){
+		sys_mac = *((struct mac_addr *)bond->dev->dev_addr);
+	}
+	BOND_AD_INFO(bond).system.sys_mac_addr = sys_mac;
+
+	bond_for_each_slave(bond, slave, i) {
+		port = &(SLAVE_AD_INFO(slave).port);
+		if (port->slave == NULL)
+			continue;
+		__get_state_machine_lock(port);
+		port->actor_system = sys_mac;
+		__release_state_machine_lock(port);
+	}
+
+	write_unlock_bh(&bond->lock);
+}
diff --git a/drivers/net/bonding/bond_3ad.h b/drivers/net/bonding/bond_3ad.h
index 046bb1f..677c108 100644
--- a/drivers/net/bonding/bond_3ad.h
+++ b/drivers/net/bonding/bond_3ad.h
@@ -280,5 +280,7 @@ void bond_3ad_lacpdu_recv(struct sk_buff *skb, struct bonding *bond,
 			  struct slave *slave);
 int bond_3ad_set_carrier(struct bonding *bond);
 void bond_3ad_update_lacp_rate(struct bonding *bond);
+void bond_3ad_update_sys_priority(struct bonding *bond);
+void bond_3ad_update_sys_mac_addr(struct bonding *bond);
 #endif //__BOND_3AD_H__
 
diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c
index a986b86..342e647 100644
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@ -4907,6 +4907,8 @@ static int bond_check_params(struct bond_params *params)
 	params->downdelay = downdelay;
 	params->use_carrier = use_carrier;
 	params->lacp_fast = lacp_fast;
+	params->sys_priority = 0xFFFF;
+	memset(&params->sys_mac_addr, 0, sizeof(params->sys_mac_addr));
 	params->primary[0] = 0;
 	params->primary_reselect = primary_reselect_value;
 	params->fail_over_mac = fail_over_mac_value;
diff --git a/drivers/net/bonding/bond_procfs.c b/drivers/net/bonding/bond_procfs.c
index ad284ba..4fa1b95 100644
--- a/drivers/net/bonding/bond_procfs.c
+++ b/drivers/net/bonding/bond_procfs.c
@@ -129,6 +129,9 @@ static void bond_info_show_master(struct seq_file *seq)
 		seq_printf(seq, "Min links: %d\n", bond->params.min_links);
 		seq_printf(seq, "Aggregator selection policy (ad_select): %s\n",
 			   ad_select_tbl[bond->params.ad_select].modename);
+		seq_printf(seq, "System Identification: %d %pM\n",
+			   BOND_AD_INFO(bond).system.sys_priority,
+			   &(BOND_AD_INFO(bond).system.sys_mac_addr));
 
 		if (bond_3ad_get_active_agg_info(bond, &ad_info)) {
 			seq_printf(seq, "bond %s has no active aggregator\n",
diff --git a/drivers/net/bonding/bond_sysfs.c b/drivers/net/bonding/bond_sysfs.c
index 67f9073..b897b7b 100644
--- a/drivers/net/bonding/bond_sysfs.c
+++ b/drivers/net/bonding/bond_sysfs.c
@@ -1468,6 +1468,118 @@ static ssize_t bonding_show_ad_active_slaves(struct device *d,
 static DEVICE_ATTR(ad_active_slaves, S_IRUGO, bonding_show_ad_active_slaves, NULL);
 
 /*
+ * Show and set 802.3ad system priority.
+ */
+static ssize_t bonding_show_ad_sys_priority(struct device *d,
+					    struct device_attribute *attr,
+					    char *buf)
+{
+	struct bonding *bond = to_bond(d);
+	int count = 0;
+
+	if (bond->params.mode == BOND_MODE_8023AD) {
+		count = sprintf(buf, "%d\n", bond->params.sys_priority);
+	}
+
+	return count;
+}
+
+static ssize_t bonding_store_ad_sys_priority(struct device *d,
+					     struct device_attribute *attr,
+					     const char *buf, size_t count)
+{
+	u16 new_value;
+	int ret;
+	struct bonding *bond = to_bond(d);
+
+	if (bond->params.mode != BOND_MODE_8023AD) {
+		pr_err("%s: Unable to update sys priority because bond is not in 802.3ad mode.\n",
+		       bond->dev->name);
+		ret = -EPERM;
+		goto out;
+	}
+
+	if (!rtnl_trylock())
+		return restart_syscall();
+
+	ret = kstrtou16(buf, 0, &new_value);
+	if (ret < 0) {
+		pr_err("%s: Ignoring invalid sys priority value %s.\n",
+		       bond->dev->name, buf);
+		goto out_unlock;
+	}
+	ret = count;
+
+	pr_info("%s: Setting sys priority value to %u\n",
+		bond->dev->name, new_value);
+	bond->params.sys_priority = new_value;
+	bond_3ad_update_sys_priority(bond);
+
+out_unlock:
+	rtnl_unlock();
+out:
+	return ret;
+}
+static DEVICE_ATTR(ad_sys_priority, S_IRUGO | S_IWUSR,
+		   bonding_show_ad_sys_priority, bonding_store_ad_sys_priority);
+
+
+/*
+ * Show and set 802.3ad system mac address.
+ */
+static ssize_t bonding_show_ad_sys_mac_addr(struct device *d,
+					    struct device_attribute *attr,
+					    char *buf)
+{
+	struct bonding *bond = to_bond(d);
+	int count = 0;
+
+	if (bond->params.mode == BOND_MODE_8023AD)
+		count = sprintf(buf, "%pM\n", bond->params.sys_mac_addr);
+
+	return count;
+}
+
+static ssize_t bonding_store_ad_sys_mac_addr(struct device *d,
+					     struct device_attribute *attr,
+					     const char *buf, size_t count)
+{
+	int ret = count;
+	struct bonding *bond = to_bond(d);
+	u8 new_mac[ETH_ALEN];
+
+	if (bond->params.mode != BOND_MODE_8023AD) {
+		pr_err("%s: Unable to update sys mac because bond is not in 802.3ad mode.\n",
+		       bond->dev->name);
+		ret = -EPERM;
+		goto out;
+	}
+
+	if (!rtnl_trylock())
+		return restart_syscall();
+
+	if (!mac_pton(buf, new_mac)) {
+		pr_err("%s: Ignoring invalid sys mac value %s.\n",
+		       bond->dev->name, buf);
+		ret = -EINVAL;
+		goto out_unlock;
+	}
+
+	pr_info("%s: Setting sys mac value to %pM\n",
+		bond->dev->name, new_mac);
+	memcpy(&(bond->params.sys_mac_addr), new_mac, ETH_ALEN);
+	bond_3ad_update_sys_mac_addr(bond);
+
+out_unlock:
+	rtnl_unlock();
+out:
+	return ret;
+}
+static DEVICE_ATTR(ad_sys_mac_addr, S_IRUGO | S_IWUSR,
+		   bonding_show_ad_sys_mac_addr, bonding_store_ad_sys_mac_addr);
+
+
+/*
  * Show the queue_ids of the slaves in the current bond.
  */
 static ssize_t bonding_show_queue_id(struct device *d,
@@ -1706,6 +1818,8 @@ static struct attribute *per_bond_attrs[] = {
 	&dev_attr_ad_partner_key.attr,
 	&dev_attr_ad_partner_mac.attr,
 	&dev_attr_ad_active_slaves.attr,
+	&dev_attr_ad_sys_priority.attr,
+	&dev_attr_ad_sys_mac_addr.attr,
 	&dev_attr_queue_id.attr,
 	&dev_attr_all_slaves_active.attr,
 	&dev_attr_resend_igmp.attr,
diff --git a/drivers/net/bonding/bonding.h b/drivers/net/bonding/bonding.h
index 387f9f6..553f3ce 100644
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@ -149,6 +149,8 @@ struct bond_params {
 	int lacp_fast;
 	unsigned int min_links;
 	int ad_select;
+	u16 sys_priority;
+	u8 sys_mac_addr[ETH_ALEN];
 	char primary[IFNAMSIZ];
 	int primary_reselect;
 	__be32 arp_targets[BOND_MAX_ARP_TARGETS];
