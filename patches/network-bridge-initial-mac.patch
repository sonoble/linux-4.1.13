Make sure that a new bridge is instantiated with the "all 0's" mac address

This makes operations consistent with a bridge that has it's interfaces removed (CM-2510).

diff --git a/net/bridge/br_device.c b/net/bridge/br_device.c
index 7861354..aef0767 100644
--- a/net/bridge/br_device.c
+++ b/net/bridge/br_device.c
@@ -353,6 +353,7 @@ void br_dev_setup(struct net_device *dev)
 	struct net_bridge *br = netdev_priv(dev);
 
 	eth_hw_addr_random(dev);
+	memcpy(br->initial_addr, dev->dev_addr, ETH_ALEN);
 	ether_setup(dev);
 
 	dev->netdev_ops = &br_netdev_ops;
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index 9699fdf..c80f94d 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -215,6 +215,7 @@ struct net_bridge
 	spinlock_t			lock;
 	struct list_head		port_list;
 	struct net_device		*dev;
+	u8				initial_addr[ETH_ALEN];
 
 	struct pcpu_sw_netstats		__percpu *stats;
 	spinlock_t			hash_lock;
diff --git a/net/bridge/br_stp_if.c b/net/bridge/br_stp_if.c
index 4f7fbbf..4ed11ab 100644
--- a/net/bridge/br_stp_if.c
+++ b/net/bridge/br_stp_if.c
@@ -252,6 +252,10 @@ bool br_stp_recalculate_bridge_id(struct net_bridge *br)
 
 	}
 
+	/* no ports, re-instate the initial random address */
+	if (addr == br_mac_zero)
+		addr = &br->initial_addr;
+
 	if (ether_addr_equal(br->bridge_id.addr, addr))
 		return false;	/* no change */
 
