This patch automatically enables vlan filtering on a bridge when the
first vlan configuration is applied to a bridge port.  This also includes
adding the default pvid on all the bridge ports.

diff --git a/net/bridge/br_vlan.c b/net/bridge/br_vlan.c
index 6bedcc4..5880138 100644
--- a/net/bridge/br_vlan.c
+++ b/net/bridge/br_vlan.c
@@ -279,6 +279,18 @@ bool br_should_learn(struct net_bridge_port *p, struct sk_buff *skb, u16 *vid)
 	return false;
 }
 
+static void __check_and_enable_vlan_filter(struct net_bridge *br)
+{
+	/* implicitly enable vlan filtering on the bridge as it is
+	 * very easy to forget to set the sysfs variable
+	 */
+	if (br && (br->vlan_enabled == 0)) {
+		br->vlan_enabled = 1;
+		br_vlan_init(br);
+	}
+}
+
+
 /* Must be protected by RTNL.
  * Must be called with vid in range from 1 to 4094 inclusive.
  */
@@ -300,11 +312,14 @@ int br_vlan_add(struct net_bridge *br, u16 vid, u16 flags)
 		return -ENOMEM;
 
 	pv->parent.br = br;
+	rcu_assign_pointer(br->vlan_info, pv);
+	__check_and_enable_vlan_filter(br);
 	err = __vlan_add(pv, vid, flags);
-	if (err)
+	if (err) {
+		rcu_assign_pointer(br->vlan_info, NULL);
 		goto out;
+	}
 
-	rcu_assign_pointer(br->vlan_info, pv);
 	return 0;
 out:
 	kfree(pv);
@@ -365,6 +380,8 @@ out:
 
 int br_vlan_filter_toggle(struct net_bridge *br, unsigned long val)
 {
+	struct net_bridge_port *p;
+
 	if (!rtnl_trylock())
 		return restart_syscall();
 
@@ -372,6 +389,23 @@ int br_vlan_filter_toggle(struct net_bridge *br, unsigned long val)
 		goto unlock;
 
 	br->vlan_enabled = val;
+	if (!br->vlan_enabled)
+		goto unlock;
+
+	br_vlan_init(br);
+	list_for_each_entry(p, &br->port_list, list) {
+		struct net_port_vlans *pv = nbp_get_vlan_info(p);
+		u16 pvid = br->default_pvid;
+
+		if (pv &&
+		    ((pv->pvid && (pv->pvid != pvid)) ||
+		     nbp_vlan_find(p, pvid)))
+			continue;
+
+		nbp_vlan_add(p, pvid,
+			     BRIDGE_VLAN_INFO_PVID |
+			     BRIDGE_VLAN_INFO_UNTAGGED);
+	}
 
 unlock:
 	rtnl_unlock();
@@ -513,9 +547,28 @@ unlock:
 
 int br_vlan_init(struct net_bridge *br)
 {
-	br->default_pvid = 1;
-	return br_vlan_add(br, 1,
-			   BRIDGE_VLAN_INFO_PVID | BRIDGE_VLAN_INFO_UNTAGGED);
+	struct net_bridge_port *p;
+
+	if (br->default_pvid == 0)
+		br->default_pvid = 1;
+
+	if (!br->vlan_enabled)
+		return 0;
+
+	list_for_each_entry(p, &br->port_list, list) {
+		struct net_port_vlans *pv = nbp_get_vlan_info(p);
+		u16 pvid = br->default_pvid;
+
+		if (pv &&
+                    ((pv->pvid && (pv->pvid != pvid)) ||
+                     nbp_vlan_find(p, pvid)))
+                        continue;
+		nbp_vlan_add(p, pvid,
+                             BRIDGE_VLAN_INFO_PVID |
+                             BRIDGE_VLAN_INFO_UNTAGGED);
+        }
+
+	return 0;
 }
 
 /* Must be protected by RTNL.
@@ -542,11 +595,14 @@ int nbp_vlan_add(struct net_bridge_port *port, u16 vid, u16 flags)
 
 	pv->port_idx = port->port_no;
 	pv->parent.port = port;
+	rcu_assign_pointer(port->vlan_info, pv);
+	__check_and_enable_vlan_filter(port->br);
 	err = __vlan_add(pv, vid, flags);
-	if (err)
+	if (err) {
+		rcu_assign_pointer(port->vlan_info, NULL);
 		goto clean_up;
+	}
 
-	rcu_assign_pointer(port->vlan_info, pv);
 	return 0;
 
 clean_up:
@@ -612,6 +668,9 @@ out:
 
 int nbp_vlan_init(struct net_bridge_port *p)
 {
+	if (!p->br->vlan_enabled)
+		return 0;
+
 	return p->br->default_pvid ?
 			nbp_vlan_add(p, p->br->default_pvid,
 				     BRIDGE_VLAN_INFO_PVID |
