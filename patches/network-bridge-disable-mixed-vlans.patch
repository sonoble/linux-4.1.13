Added a bridge sysctl to allow/disallow mixing vlans in a bridge.

diff --git a/net/bridge/br.c b/net/bridge/br.c
index 80df1ac..8c0a4ad 100644
--- a/net/bridge/br.c
+++ b/net/bridge/br.c
@@ -94,8 +94,47 @@ static struct ctl_path brstp_path[] = {
 	{ .procname = "bridge", },
 	{ }
 };
+
+static struct ctl_table_header *br_allow_multiple_vlans_sysctl_header;
+int br_allow_multiple_vlans __read_mostly = 0;
+
+static
+int br_multiple_vlans_sysctl_call_tables(ctl_table * ctl, int write,
+			void __user * buffer, size_t * lenp, loff_t * ppos)
+{
+	int ret;
+	int old_allow_multiple_vlans = br_allow_multiple_vlans;
+
+	ret = proc_dointvec(ctl, write, buffer, lenp, ppos);
+	if (old_allow_multiple_vlans != br_allow_multiple_vlans) {
+		printk(KERN_INFO "%s multiple vlans in bridge\n",
+			br_allow_multiple_vlans ? "allow" : "disallow");
+	}
+
+	return ret;
+}
+
+static ctl_table br_allow_multiple_vlans_table[] = {
+	{
+		.procname       = "bridge-allow-multiple-vlans",
+		.data           = &br_allow_multiple_vlans,
+		.maxlen         = sizeof(int),
+		.mode           = 0644,
+		.proc_handler   = br_multiple_vlans_sysctl_call_tables,
+	},
+	{ }
+};
+
+static struct ctl_path br_allow_multiple_vlans_path[] = {
+	{ .procname = "net", },
+	{ .procname = "bridge", },
+	{ }
+};
+
+
 #else
 #define brstp_user_space 1
+#define br_allow_multiple_vlans 0
 #endif
 
 static int __init br_init(void)
@@ -109,6 +148,15 @@ static int __init br_init(void)
 		"br_init: can't register to sysctl.\n");
 		return -ENOMEM;
 	}
+
+	br_allow_multiple_vlans_sysctl_header = register_sysctl_paths(
+						br_allow_multiple_vlans_path,
+						br_allow_multiple_vlans_table);
+	if (br_allow_multiple_vlans_sysctl_header == NULL) {
+		printk(KERN_WARNING
+		"br_init: can't register to sysctl.\n");
+		return -ENOMEM;
+	}
 #endif
 
 	if (!brstp_user_space) {
@@ -159,6 +207,7 @@ err_out:
 		stp_proto_unregister(&br_stp_proto);
 #ifdef CONFIG_SYSCTL
 	unregister_sysctl_table(brstp_sysctl_header);
+	unregister_sysctl_table(br_allow_multiple_vlans_sysctl_header);
 #endif
 	return err;
 }
@@ -169,6 +218,7 @@ static void __exit br_deinit(void)
 		stp_proto_unregister(&br_stp_proto);
 #ifdef CONFIG_SYSCTL
 	unregister_sysctl_table(brstp_sysctl_header);
+	unregister_sysctl_table(br_allow_multiple_vlans_sysctl_header);
 #endif
 	br_netlink_fini();
 	unregister_netdevice_notifier(&br_device_notifier);
diff --git a/net/bridge/br_if.c b/net/bridge/br_if.c
index 62c8fb2..48161b6 100644
--- a/net/bridge/br_if.c
+++ b/net/bridge/br_if.c
@@ -27,6 +27,8 @@
 
 #include "br_private.h"
 
+extern int br_allow_multiple_vlans;
+
 /*
  * Determine initial path cost based on speed.
  * using recommendations from 802.1d standard
@@ -324,6 +326,44 @@ netdev_features_t br_features_recompute(struct net_bridge *br,
 	return features;
 }
 
+static bool bridge_has_multiple_vlans(struct net_bridge *br)
+{
+	struct net_bridge_port *p;
+	u16 vlan_id = 0;
+
+	list_for_each_entry_rcu(p, &br->port_list, list) {
+		if (!is_vlan_dev(p->dev))
+			continue;
+		if (vlan_id != vlan_dev_vlan_id(p->dev)) {
+			if (vlan_id == 0)
+				vlan_id = vlan_dev_vlan_id(p->dev);
+			else
+				return true;
+		}
+	}
+	return false;
+}
+
+static bool is_port_in_different_vlan(struct net_bridge *br,
+				      struct net_device *dev)
+{
+	struct net_bridge_port *p;
+	u16 vlan_id;
+
+	if (!is_vlan_dev(dev))
+		return false;
+
+	vlan_id = vlan_dev_vlan_id(dev);
+
+	list_for_each_entry_rcu(p, &br->port_list, list) {
+		if (!is_vlan_dev(p->dev))
+			continue;
+		if (vlan_id != vlan_dev_vlan_id(p->dev))
+			return true;
+	}
+	return false;
+}
+
 /* called with RTNL */
 int br_add_if(struct net_bridge *br, struct net_device *dev)
 {
@@ -349,6 +389,10 @@ int br_add_if(struct net_bridge *br, struct net_device *dev)
 	if (dev->priv_flags & IFF_DONT_BRIDGE)
 		return -EOPNOTSUPP;
 
+	/* No bridgeing vlan devices that have different vlan id */
+	if (!br_allow_multiple_vlans && is_port_in_different_vlan(br, dev))
+		return -EINVAL;
+
 	p = new_nbp(br, dev);
 	if (IS_ERR(p))
 		return PTR_ERR(p);
