The DNI 6448 uses it's CPLD to mux the I2C buses into multiple buses.

This kernel module provides an I2C mux device usable by the I2C
infrastructure.

diff --git a/drivers/i2c/muxes/Kconfig b/drivers/i2c/muxes/Kconfig
index 90b7a01..2ee0386 100644
--- a/drivers/i2c/muxes/Kconfig
+++ b/drivers/i2c/muxes/Kconfig
@@ -37,4 +37,10 @@ config I2C_MUX_PCA954x
 	  This driver can also be built as a module.  If so, the module
 	  will be called pca954x.
 
+config I2C_MUX_DNI_6448
+	tristate "Delta Networks 6448 I2C Mux"
+	depends on EXPERIMENTAL
+	help
+	  If you say yes here you get support for the DNI 6448 I2C Mux devices
+
 endmenu
diff --git a/drivers/i2c/muxes/Makefile b/drivers/i2c/muxes/Makefile
index 4640436..e5bb944 100644
--- a/drivers/i2c/muxes/Makefile
+++ b/drivers/i2c/muxes/Makefile
@@ -4,5 +4,6 @@
 obj-$(CONFIG_I2C_MUX_GPIO)	+= gpio-i2cmux.o
 obj-$(CONFIG_I2C_MUX_PCA9541)	+= pca9541.o
 obj-$(CONFIG_I2C_MUX_PCA954x)	+= pca954x.o
+obj-$(CONFIG_I2C_MUX_DNI_6448)	+= dni_6448_i2c_mux.o
 
 ccflags-$(CONFIG_I2C_DEBUG_BUS) := -DDEBUG
diff --git a/drivers/i2c/muxes/dni_6448_i2c_mux.c b/drivers/i2c/muxes/dni_6448_i2c_mux.c
new file mode 100644
index 0000000..ecbbd1d
--- /dev/null
+++ b/drivers/i2c/muxes/dni_6448_i2c_mux.c
@@ -0,0 +1,312 @@
+/*
+ * DNI 6448 CPLD I2C multiplexer
+ *
+ * Copyright (C) 2012 Cumulus Networks, Inc.
+ * Author: Curt Brune <curt@cumulusnetworks.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ * The DNI 6448 CPLD resides on the MPC8536 local bus and controls a a
+ * dual 1-of-4 high-speed FET multiplexer/demultiplexer.  The details
+ * of the multiplexer are shielded from us as we only touch CPLD
+ * registers.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/device.h>
+#include <linux/i2c.h>
+#include <linux/i2c-mux.h>
+#include <asm/io.h>
+
+#define CPLD_REG_PRODUCT_ID	  (0x07000)
+
+#define CPLD_REG_I2C_1_CTRL	  (0x0e000)
+#  define CPLD_I2C_1_EN_L	     (4)
+#  define CPLD_I2C_1_SELECT_MSK	     (0x3)
+
+#define CPLD_REG_I2C_2_CTRL	  (0x0f000)
+#  define CPLD_I2C_2_SELECT_MSK	     (0x7)
+
+// Expected product ID
+#define DNI_6448_PRODUCT_ID1   (0xa0) // single fixed power supply
+#define DNI_6448_PRODUCT_ID2   (0x80) // dual hot-swap power supplies
+#define DNI_6448_PRODUCT_ID3   (0xc0) // dual hot-swap power supplies ??
+#define DNI_6448_PRODUCT_ID4   (0x20) // POE
+
+static const char driver_name[] = "dni_6448_i2c_mux";
+#define DRIVER_VERSION "1.1"
+
+#undef DEBUG
+// #define DEBUG
+
+#ifdef DEBUG
+#define LOG_DBG(fmt, args...)						\
+	do {								\
+		printk(KERN_ERR "%s:%s(): " fmt,			\
+		       driver_name, __func__, ## args);			\
+	} while (0)
+#else
+#define LOG_DBG(fmt, args...)
+#endif
+
+#define LOG_INFO(fmt, args...)						\
+	do {								\
+		printk(KERN_INFO "%s: " fmt,				\
+		       driver_name, ## args);				\
+	} while (0)
+
+#define LOG_ERR(fmt, args...)						\
+	do {								\
+		printk(KERN_ERR "%s:%s():ERROR: " fmt,			\
+		       driver_name, __func__, ## args);			\
+	} while (0)
+
+#define DNI_6448_MUX_NCHANS (8)
+
+struct dni_6448_mux {
+	struct i2c_adapter* m_virt_adaps[DNI_6448_MUX_NCHANS];
+	u8 __iomem*         m_cpld_regs;  /* Mem mapped CPLD */
+	u8                  m_last_chan;  /* last register value */
+	u32                 m_mux_id;     /* mux ID */
+};
+
+static u16 dni_6448_num_channels[] = {
+	0,
+	4,  // mux_id 1 has 4 channels
+	8,  // mux_id 2 has 8 channels
+};
+
+static int dni_6448_mux_select_chan(struct i2c_adapter *adap,
+				    void *client, u32 chan)
+{
+	struct dni_6448_mux* dev = i2c_get_clientdata(client);
+	u32 ctrl_reg;
+	u8 val, chan_mask;
+
+	LOG_DBG("Setting mux %d to channel %d", dev->m_mux_id, chan);
+
+	if (dev->m_mux_id == 1) {
+		ctrl_reg  = CPLD_REG_I2C_1_CTRL;
+		chan_mask = CPLD_I2C_1_SELECT_MSK;
+	}
+	else {
+		ctrl_reg = CPLD_REG_I2C_2_CTRL;
+		chan_mask = CPLD_I2C_2_SELECT_MSK;
+	}
+
+	if (chan & ~chan_mask) {
+		// bad channel
+		LOG_ERR("mux_id: %d -- trying to set non-existent channel %d",
+			dev->m_mux_id, chan);
+		return -EINVAL;
+	}
+
+	if ( dev->m_last_chan != chan) {
+
+		val = readb( dev->m_cpld_regs + ctrl_reg);
+		val &= ~chan_mask;
+		val |= chan;
+		writeb( val, dev->m_cpld_regs + ctrl_reg);
+
+		dev->m_last_chan = chan;
+	}
+
+	return 0;
+
+}
+
+/*
+ * I2C init/probing/exit functions
+ */
+static int dni_6448_mux_probe(struct i2c_client* client,
+			      const struct i2c_device_id* id)
+{
+	struct i2c_adapter* adap = to_i2c_adapter(client->dev.parent);
+	int num;
+	struct dni_6448_mux* dev;
+	struct device_node* cpld;
+	u8 __iomem* cpld_regs;
+	u8 val;
+	int prop_len;
+	const void* prop;
+	u32 mux_id;
+
+	int ret = -ENODEV;
+
+	LOG_DBG("Entry");
+
+	if (!i2c_check_functionality(adap, I2C_FUNC_SMBUS_BYTE))
+		goto err;
+
+	cpld = of_find_compatible_node(NULL, NULL, "dni,6448-cpld");
+	if (!cpld) {
+		LOG_ERR("Can not find 6448-cpld node in device tree\n");
+		ret = -ENODEV;
+		goto err;
+	}
+	else {
+		cpld_regs = of_iomap(cpld, 0);
+		of_node_put(cpld);
+	}
+
+	prop_len = 0;
+	prop = of_get_property( client->dev.of_node, "reg", &prop_len);
+	if ( (prop == NULL) || (prop_len != 4)) {
+		LOG_ERR("Can not find <reg> property for mux in device tree\n");
+		LOG_ERR("prop is %sNULL.  prop_len: %d\n",
+			(prop == NULL) ? "" : "not ",
+			prop_len);
+		ret = -ENODEV;
+		goto err;
+	}
+	else {
+		mux_id = *((u32*)prop);
+		LOG_DBG("mux_id: %d", mux_id);
+	}
+
+	// Try to read a register and make sure we're good
+	val = readb( cpld_regs + CPLD_REG_PRODUCT_ID);
+	if ( (val != DNI_6448_PRODUCT_ID1) &&
+	     (val != DNI_6448_PRODUCT_ID2) &&
+	     (val != DNI_6448_PRODUCT_ID3) &&
+	     (val != DNI_6448_PRODUCT_ID4)) {
+		LOG_ERR("Can not verify dni-6448 product ID 0x%02x\n",val);
+		ret = -ENODEV;
+		goto err;
+	}
+
+	dev = kzalloc(sizeof(struct dni_6448_mux), GFP_KERNEL);
+	if (!dev) {
+		ret = -ENOMEM;
+		goto err;
+	}
+
+	i2c_set_clientdata(client, dev);
+
+	dev->m_cpld_regs = cpld_regs;
+	dev->m_mux_id    = mux_id;
+
+	// Default to channel-0 and enable controller
+	if (mux_id == 1) {
+		val = readb( dev->m_cpld_regs + CPLD_REG_I2C_1_CTRL);
+		val &= ~CPLD_I2C_1_SELECT_MSK;
+		// also clear output enable, active low
+		val &= ~(1 << CPLD_I2C_1_EN_L);
+		writeb( val, dev->m_cpld_regs + CPLD_REG_I2C_1_CTRL);
+	}
+	else {
+		val = readb( dev->m_cpld_regs + CPLD_REG_I2C_2_CTRL);
+		val &= ~CPLD_I2C_2_SELECT_MSK;
+		writeb( val, dev->m_cpld_regs + CPLD_REG_I2C_2_CTRL);
+	}
+	dev->m_last_chan = 0;
+
+	/* Now create an adapter for each channel */
+	for (num = 0; num < dni_6448_num_channels[dev->m_mux_id]; num++) {
+		dev->m_virt_adaps[num] =
+			i2c_add_mux_adapter(adap, &client->dev, client,
+					    0, num,
+					    dni_6448_mux_select_chan,
+					    NULL);
+
+		if (dev->m_virt_adaps[num] == NULL) {
+			ret = -ENODEV;
+			dev_err(&client->dev,
+				"failed to register multiplexed adapter %d\n",
+				num);
+			goto virt_reg_failed;
+		}
+	}
+
+	dev_info(&client->dev,
+		 "registered %d multiplexed buses for %s, mux_id %d\n",
+		 num, driver_name, mux_id);
+
+	LOG_DBG("Exit");
+	return 0;
+
+virt_reg_failed:
+	for (num--; num >= 0; num--)
+		i2c_del_mux_adapter(dev->m_virt_adaps[num]);
+
+	kfree(dev);
+err:
+	LOG_DBG("Error Exit");
+	return ret;
+}
+
+static int dni_6448_mux_remove(struct i2c_client* client)
+{
+	struct dni_6448_mux* dev = i2c_get_clientdata(client);
+	int i, err;
+
+	LOG_DBG("Entry");
+	for (i = 0; i < dni_6448_num_channels[dev->m_mux_id]; ++i)
+		if (dev->m_virt_adaps[i]) {
+			err = i2c_del_mux_adapter(dev->m_virt_adaps[i]);
+			if (err)
+				return err;
+			dev->m_virt_adaps[i] = NULL;
+		}
+
+	kfree(dev);
+	LOG_DBG("Exit");
+	return 0;
+}
+
+static const struct i2c_device_id dni_6448_mux_ids[] = {
+	{ "6448-i2c-mux", 0 },
+	{ /* end of list */     },
+};
+
+static struct i2c_driver dni_6448_mux_driver = {
+	.driver = {
+		.name  = driver_name,
+		.owner = THIS_MODULE,
+	},
+	.probe    = dni_6448_mux_probe,
+	.remove   = dni_6448_mux_remove,
+	.id_table = dni_6448_mux_ids,
+};
+
+static int __init dni_6448_mux_init(void)
+{
+	int rc;
+
+	LOG_DBG("Loading %s", driver_name);
+	rc = i2c_add_driver( &dni_6448_mux_driver);
+	if ( rc) {
+		LOG_ERR("i2c_add_driver() failed");
+	}
+	return rc;
+}
+
+static void __exit dni_6448_mux_exit(void)
+{
+	LOG_DBG("Entry");
+	i2c_del_driver( &dni_6448_mux_driver);
+	LOG_DBG("Exit");
+}
+
+module_init(dni_6448_mux_init);
+module_exit(dni_6448_mux_exit);
+
+MODULE_AUTHOR("Curt Brune <curt@cumulusnetworks.com>");
+MODULE_DESCRIPTION("I2C Mux Driver for Delta Networks Inc. ET6448");
+MODULE_LICENSE("GPL v2");
+MODULE_VERSION(DRIVER_VERSION);
