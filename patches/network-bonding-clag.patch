Introduces CLAG (multi-chassis lag) enable bond config. On its own this patch 
doesn't provide any functionality. It was done just to add the "clag_enable" 
param in 2.5.0.
Note: Associated functional changes were introduced in 2.5.1 via 
networking-bonding-clag-proto-down.patch

diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c
index 70c865b..6e7f377 100644
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@ -5071,6 +5071,7 @@ static size_t bond_get_size(const struct net_device *bond_dev)
 		nla_total_size(sizeof(u8)) +  /* IFLA_BOND_CL_LACP_BYPASS_ALLOW */
 		nla_total_size(sizeof(u8)) +  /* IFLA_BOND_CL_LACP_BYPASS_ACTIVE */
 		nla_total_size(sizeof(u32)) + /* IFLA_BOND_CL_LACP_BYPASS_PERIOD */
+		nla_total_size(sizeof(u8)) +  /* IFLA_BOND_CL_CLAG_ENABLE */
 		0;
 }
 
@@ -5229,6 +5230,10 @@ static int bond_fill_info(struct sk_buff *skb,
 		if (nla_put_u32(skb, IFLA_BOND_CL_LACP_BYPASS_PERIOD,
 			        bond->params.lacp_bypass_period))
 		    goto nla_put_failure;
+
+		if (nla_put_u8(skb, IFLA_BOND_CL_CLAG_ENABLE,
+					bond->params.clag_enable))
+			goto nla_put_failure;
 	}
 
 	return 0;
diff --git a/drivers/net/bonding/bond_sysfs.c b/drivers/net/bonding/bond_sysfs.c
index 4e377e0..93a4db8 100644
--- a/drivers/net/bonding/bond_sysfs.c
+++ b/drivers/net/bonding/bond_sysfs.c
@@ -984,6 +984,42 @@ static ssize_t bonding_store_min_links(struct device *d,
 static DEVICE_ATTR(min_links, S_IRUGO | S_IWUSR,
 		   bonding_show_min_links, bonding_store_min_links);
 
+static ssize_t bonding_show_clag_enable(struct device *d,
+						struct device_attribute *attr,
+						char *buf)
+{
+	struct bonding *bond = to_bond(d);
+
+	return sprintf(buf, "%d\n", bond->params.clag_enable);
+}
+
+static ssize_t bonding_store_clag_enable(struct device *d,
+						 struct device_attribute *attr,
+						 const char *buf, size_t count)
+{
+	struct bonding *bond = to_bond(d);
+	int ret;
+	u8 new_value;
+
+	ret = kstrtou8(buf, 10, &new_value);
+	if (ret < 0) {
+		pr_err("%s: Ignoring invalid clag enable value %s.\n",
+				bond->dev->name, buf);
+		return ret;
+	}
+
+	if (!rtnl_trylock())
+		return restart_syscall();
+	pr_debug("%s: Setting clag enable to %u\n",
+			bond->dev->name, new_value);
+	bond->params.clag_enable = new_value;
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
+	rtnl_unlock();
+	return count;
+}
+static DEVICE_ATTR(clag_enable, S_IRUGO | S_IWUSR,
+		   bonding_show_clag_enable, bonding_store_clag_enable);
+
 static ssize_t bonding_show_lacp_bypass_allow(struct device *d,
 						struct device_attribute *attr,
 						char *buf)
@@ -2095,6 +2131,7 @@ static struct attribute *per_bond_attrs[] = {
 	&dev_attr_lacp_bypass_allow.attr,
 	&dev_attr_lacp_bypass_active.attr,
 	&dev_attr_lacp_bypass_period.attr,
+	&dev_attr_clag_enable.attr,
 	NULL,
 };
 
diff --git a/drivers/net/bonding/bonding.h b/drivers/net/bonding/bonding.h
index b3594f7..eefaa18 100644
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@ -163,6 +163,7 @@ struct bond_params {
 	int lacp_bypass_allow;
 	int lacp_bypass_active;
 	u32 lacp_bypass_period;
+	u8 clag_enable;
 };
 
 struct bond_parm_tbl {
diff --git a/include/linux/if_link.h b/include/linux/if_link.h
index 086e2ad..b262ddd 100644
--- a/include/linux/if_link.h
+++ b/include/linux/if_link.h
@@ -357,6 +357,7 @@ enum {
 	IFLA_BOND_CL_LACP_BYPASS_ALLOW = IFLA_BOND_CL_START,
 	IFLA_BOND_CL_LACP_BYPASS_ACTIVE,
 	IFLA_BOND_CL_LACP_BYPASS_PERIOD,
+	IFLA_BOND_CL_CLAG_ENABLE,
 	__IFLA_BOND_MAX,
 };
 
