#Copyright 2012 Cumulus Networks, Inc.  All rights reserved.

Adjust multi-byte word CFI endianness based on device tree specification.

Currently, CFI byte swapping is controlled by set of configuration parameters
CONFIG_MTD_CFI_NOSWAP, CONFIG_MTD_CFI_LE_BYTE_SWAP, and
CONFIG_MTD_CFI_BE_BYTE_SWAP.  This clearly prohibits using the same kernel on
systems whose local address busses are not connected the same way.

This patch adds a new configuration variable CONFIG_MTD_CFI_OF_SWAP which
evaluates the device tree specification for a "byteswap" property that is used
to control byte swapping where desired.

diff --git a/drivers/mtd/chips/Kconfig b/drivers/mtd/chips/Kconfig
index b1e3c26..c7ae3f5 100644
--- a/drivers/mtd/chips/Kconfig
+++ b/drivers/mtd/chips/Kconfig
@@ -52,8 +52,8 @@ config MTD_CFI_NOSWAP
 	  'NO', which is the default when CONFIG_MTD_CFI_ADV_OPTIONS isn't
 	  enabled, means that the CPU will not do any swapping; the chips
 	  are expected to be wired to the CPU in 'host-endian' form.
-	  Specific arrangements are possible with the BIG_ENDIAN_BYTE and
-	  LITTLE_ENDIAN_BYTE, if the bytes are reversed.
+	  Specific arrangements are possible with the BIG_ENDIAN_BYTE,
+	  LITTLE_ENDIAN_BYTE, and OF_BYTE_SWAP if the bytes are reversed.
 
 	  If you have a LART, on which the data (and address) lines were
 	  connected in a fashion which ensured that the nets were as short
@@ -68,6 +68,9 @@ config MTD_CFI_BE_BYTE_SWAP
 config MTD_CFI_LE_BYTE_SWAP
 	bool "LITTLE_ENDIAN_BYTE"
 
+config MTD_CFI_OF_BYTE_SWAP
+	bool "OF_BYTESWAP_PROPERTY"
+
 endchoice
 
 config MTD_CFI_GEOMETRY
diff --git a/drivers/mtd/chips/cfi_cmdset_0020.c b/drivers/mtd/chips/cfi_cmdset_0020.c
index 179814a..aa272a3 100644
--- a/drivers/mtd/chips/cfi_cmdset_0020.c
+++ b/drivers/mtd/chips/cfi_cmdset_0020.c
@@ -139,8 +139,8 @@ struct mtd_info *cfi_cmdset_0020(struct map_info *map, int primary)
 		}
 
 		/* Do some byteswapping if necessary */
-		extp->FeatureSupport = cfi32_to_cpu(extp->FeatureSupport);
-		extp->BlkStatusRegMask = cfi32_to_cpu(extp->BlkStatusRegMask);
+		extp->FeatureSupport = cfi32_to_cpu(map, extp->FeatureSupport);
+		extp->BlkStatusRegMask = cfi32_to_cpu(map, extp->BlkStatusRegMask);
 
 #ifdef DEBUG_CFI_FEATURES
 		/* Tell the user about it in lots of lovely detail */
diff --git a/drivers/mtd/maps/physmap_of.c b/drivers/mtd/maps/physmap_of.c
index 7d65f9d..7f32f30 100644
--- a/drivers/mtd/maps/physmap_of.c
+++ b/drivers/mtd/maps/physmap_of.c
@@ -161,6 +161,9 @@ static int __devinit of_flash_probe(struct platform_device *dev)
 	struct of_flash *info;
 	const char *probe_type;
 	const __be32 *width;
+#ifdef CONFIG_MTD_CFI_OF_BYTE_SWAP
+	struct property * byteswap_prop;
+#endif
 	int err;
 	int i;
 	int count;
@@ -236,6 +239,16 @@ static int __devinit of_flash_probe(struct platform_device *dev)
 		info->list[i].map.size = res_size;
 		info->list[i].map.bankwidth = be32_to_cpup(width);
 
+#ifdef CONFIG_MTD_CFI_OF_BYTE_SWAP
+		byteswap_prop = of_find_property(dp, "byteswap", NULL);
+		if (byteswap_prop == NULL) {
+			info->list[i].map.byteswap = 0;
+		} else {
+			info->list[i].map.byteswap = 1;
+			dev_info(&dev->dev, "byteswapping configured in OF\n");
+		}
+#endif
+
 		err = -ENOMEM;
 		info->list[i].map.virt = ioremap(info->list[i].map.phys,
 						 info->list[i].map.size);
diff --git a/include/linux/mtd/cfi.h b/include/linux/mtd/cfi.h
index d249254..d5d2ec6 100644
--- a/include/linux/mtd/cfi.h
+++ b/include/linux/mtd/cfi.h
@@ -354,10 +354,10 @@ static inline map_word cfi_build_cmd(u_long cmd, struct map_info *map, struct cf
 		onecmd = cmd;
 		break;
 	case 2:
-		onecmd = cpu_to_cfi16(cmd);
+		onecmd = cpu_to_cfi16(map, cmd);
 		break;
 	case 4:
-		onecmd = cpu_to_cfi32(cmd);
+		onecmd = cpu_to_cfi32(map, cmd);
 		break;
 	}
 
@@ -437,10 +437,10 @@ static inline unsigned long cfi_merge_status(map_word val, struct map_info *map,
 	case 1:
 		break;
 	case 2:
-		res = cfi16_to_cpu(res);
+		res = cfi16_to_cpu(map, res);
 		break;
 	case 4:
-		res = cfi32_to_cpu(res);
+		res = cfi32_to_cpu(map, res);
 		break;
 	default: BUG();
 	}
@@ -480,12 +480,12 @@ static inline uint8_t cfi_read_query(struct map_info *map, uint32_t addr)
 	if (map_bankwidth_is_1(map)) {
 		return val.x[0];
 	} else if (map_bankwidth_is_2(map)) {
-		return cfi16_to_cpu(val.x[0]);
+		return cfi16_to_cpu(map, val.x[0]);
 	} else {
 		/* No point in a 64-bit byteswap since that would just be
 		   swapping the responses from different chips, and we are
 		   only interested in one chip (a representative sample) */
-		return cfi32_to_cpu(val.x[0]);
+		return cfi32_to_cpu(map, val.x[0]);
 	}
 }
 
@@ -496,12 +496,12 @@ static inline uint16_t cfi_read_query16(struct map_info *map, uint32_t addr)
 	if (map_bankwidth_is_1(map)) {
 		return val.x[0] & 0xff;
 	} else if (map_bankwidth_is_2(map)) {
-		return cfi16_to_cpu(val.x[0]);
+		return cfi16_to_cpu(map, val.x[0]);
 	} else {
 		/* No point in a 64-bit byteswap since that would just be
 		   swapping the responses from different chips, and we are
 		   only interested in one chip (a representative sample) */
-		return cfi32_to_cpu(val.x[0]);
+		return cfi32_to_cpu(map, val.x[0]);
 	}
 }
 
diff --git a/include/linux/mtd/cfi_endian.h b/include/linux/mtd/cfi_endian.h
index 51cc3f5..c785284 100644
--- a/include/linux/mtd/cfi_endian.h
+++ b/include/linux/mtd/cfi_endian.h
@@ -37,35 +37,48 @@
 #define CFI_BIG_ENDIAN
 #endif
 
+#ifdef CONFIG_MTD_CFI_OF_BYTE_SWAP
+#define CFI_OF_BYTE_SWAP
+#endif
+
 #endif
 
 #if defined(CFI_LITTLE_ENDIAN)
-#define cpu_to_cfi8(x) (x)
-#define cfi8_to_cpu(x) (x)
-#define cpu_to_cfi16(x) cpu_to_le16(x)
-#define cpu_to_cfi32(x) cpu_to_le32(x)
-#define cpu_to_cfi64(x) cpu_to_le64(x)
-#define cfi16_to_cpu(x) le16_to_cpu(x)
-#define cfi32_to_cpu(x) le32_to_cpu(x)
-#define cfi64_to_cpu(x) le64_to_cpu(x)
+#define cpu_to_cfi8(m,x) (x)
+#define cfi8_to_cpu(m,x) (x)
+#define cpu_to_cfi16(m,x) cpu_to_le16(x)
+#define cpu_to_cfi32(m,x) cpu_to_le32(x)
+#define cpu_to_cfi64(m,x) cpu_to_le64(x)
+#define cfi16_to_cpu(m,x) le16_to_cpu(x)
+#define cfi32_to_cpu(m,x) le32_to_cpu(x)
+#define cfi64_to_cpu(m,x) le64_to_cpu(x)
 #elif defined (CFI_BIG_ENDIAN)
-#define cpu_to_cfi8(x) (x)
-#define cfi8_to_cpu(x) (x)
-#define cpu_to_cfi16(x) cpu_to_be16(x)
-#define cpu_to_cfi32(x) cpu_to_be32(x)
-#define cpu_to_cfi64(x) cpu_to_be64(x)
-#define cfi16_to_cpu(x) be16_to_cpu(x)
-#define cfi32_to_cpu(x) be32_to_cpu(x)
-#define cfi64_to_cpu(x) be64_to_cpu(x)
+#define cpu_to_cfi8(m,x) (x)
+#define cfi8_to_cpu(m,x) (x)
+#define cpu_to_cfi16(m,x) cpu_to_be16(x)
+#define cpu_to_cfi32(m,x) cpu_to_be32(x)
+#define cpu_to_cfi64(m,x) cpu_to_be64(x)
+#define cfi16_to_cpu(m,x) be16_to_cpu(x)
+#define cfi32_to_cpu(m,x) be32_to_cpu(x)
+#define cfi64_to_cpu(m,x) be64_to_cpu(x)
 #elif defined (CFI_HOST_ENDIAN)
-#define cpu_to_cfi8(x) (x)
-#define cfi8_to_cpu(x) (x)
-#define cpu_to_cfi16(x) (x)
-#define cpu_to_cfi32(x) (x)
-#define cpu_to_cfi64(x) (x)
-#define cfi16_to_cpu(x) (x)
-#define cfi32_to_cpu(x) (x)
-#define cfi64_to_cpu(x) (x)
+#define cpu_to_cfi8(m,x) (x)
+#define cfi8_to_cpu(m,x) (x)
+#define cpu_to_cfi16(m,x) (x)
+#define cpu_to_cfi32(m,x) (x)
+#define cpu_to_cfi64(m,x) (x)
+#define cfi16_to_cpu(m,x) (x)
+#define cfi32_to_cpu(m,x) (x)
+#define cfi64_to_cpu(m,x) (x)
+#elif defined (CFI_OF_BYTE_SWAP)
+#define cpu_to_cfi8(m,x) (x)
+#define cfi8_to_cpu(m,x) (x)
+#define cpu_to_cfi16(m,x) ((m)->byteswap ? swab16(x) : (x))
+#define cpu_to_cfi32(m,x) ((m)->byteswap ? swab32(x) : (x))
+#define cpu_to_cfi64(m,x) ((m)->byteswap ? swab64(x) : (x))
+#define cfi16_to_cpu(m,x) ((m)->byteswap ? swab16(x) : (x))
+#define cfi32_to_cpu(m,x) ((m)->byteswap ? swab32(x) : (x))
+#define cfi64_to_cpu(m,x) ((m)->byteswap ? swab64(x) : (x))
 #else
 #error No CFI endianness defined
 #endif
diff --git a/include/linux/mtd/map.h b/include/linux/mtd/map.h
index 3887901..b8ca7de 100644
--- a/include/linux/mtd/map.h
+++ b/include/linux/mtd/map.h
@@ -219,6 +219,10 @@ struct map_info {
 		      in bytes, before you are talking to the first chip again.
 		      */
 
+#ifdef CONFIG_MTD_CFI_OF_BYTE_SWAP
+	int byteswap;   /* get byte swap configuration from device tree */
+#endif
+
 #ifdef CONFIG_MTD_COMPLEX_MAPPINGS
 	map_word (*read)(struct map_info *, unsigned long);
 	void (*copy_from)(struct map_info *, void *, unsigned long, ssize_t);
