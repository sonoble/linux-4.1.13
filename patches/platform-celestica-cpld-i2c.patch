platform celestica cpld i2c patch

Add driver for the Celestica CPLD-based I2C controller.

diff --git a/drivers/i2c/busses/Kconfig b/drivers/i2c/busses/Kconfig
index 8f29057..36756f8 100644
--- a/drivers/i2c/busses/Kconfig
+++ b/drivers/i2c/busses/Kconfig
@@ -340,6 +340,17 @@ config I2C_BLACKFIN_TWI_CLK_KHZ
 	help
 	  The unit of the TWI clock is kHz.
 
+config I2C_CEL_CPLD
+	tristate "Celestica CPLD I2C Driver"
+	depends on CEL_REDSTONE
+	help
+	  If you say yes to this option, support will be included for
+	  the Celestica CPLD I2C interface.  This interface is for
+	  interacting with SFP+ and QSFP modules.
+
+	  This driver can also be built as a module.  If so, the module
+	  will be called i2c-cel-cpld.
+
 config I2C_CPM
 	tristate "Freescale CPM1 or CPM2 (MPC8xx/826x)"
 	depends on (CPM1 || CPM2) && OF_I2C
diff --git a/drivers/i2c/busses/Makefile b/drivers/i2c/busses/Makefile
index 070adee..b3f56c8 100644
--- a/drivers/i2c/busses/Makefile
+++ b/drivers/i2c/busses/Makefile
@@ -32,6 +32,7 @@ obj-$(CONFIG_I2C_POWERMAC)	+= i2c-powermac.o
 obj-$(CONFIG_I2C_AT91)		+= i2c-at91.o
 obj-$(CONFIG_I2C_AU1550)	+= i2c-au1550.o
 obj-$(CONFIG_I2C_BLACKFIN_TWI)	+= i2c-bfin-twi.o
+obj-$(CONFIG_I2C_CEL_CPLD)	+= i2c-cel-cpld.o
 obj-$(CONFIG_I2C_CPM)		+= i2c-cpm.o
 obj-$(CONFIG_I2C_DAVINCI)	+= i2c-davinci.o
 obj-$(CONFIG_I2C_DESIGNWARE_CORE)	+= i2c-designware-core.o
diff --git a/drivers/i2c/busses/i2c-cel-cpld.c b/drivers/i2c/busses/i2c-cel-cpld.c
new file mode 100644
index 0000000..c46bc21
--- /dev/null
+++ b/drivers/i2c/busses/i2c-cel-cpld.c
@@ -0,0 +1,657 @@
+/*
+ * Copyright (C) 2013 Cumulus Networks, Inc.
+ * Author: Curt Brune <curt@cumulusnetworks.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/sched.h>
+#include <linux/init.h>
+#include <linux/of_platform.h>
+#include <linux/of_i2c.h>
+#include <linux/slab.h>
+
+#include <linux/io.h>
+#include <linux/i2c.h>
+#include <linux/i2c-mux.h>
+#include <linux/interrupt.h>
+#include <linux/delay.h>
+
+#define BUS_DRV_NAME    "cel-cpld-i2c-bus"
+#define BUS_MUX_DRV_VERSION "1.1"
+
+/*
+ * The CEL_CPLD_I2C_XXX offsets are relative to the start of the "I2C
+ * block" within each CPLD:
+ *
+ * CPLD2 -- 0x10
+ * CPLD3 -- 0x40
+ * CPLD4 -- 0x80
+ *
+ */
+#define CEL_CPLD_I2C_PORT_ID		0x00
+#define CEL_CPLD_I2C_OPCODE		0x02
+#define CEL_CPLD_I2C_DEV_ADDR		0x04
+#define CEL_CPLD_I2C_CMD_BYTE0		0x08
+#define CEL_CPLD_I2C_CMD_BYTE1		0x0A
+#define CEL_CPLD_I2C_CMD_BYTE2		0x0C
+#define CEL_CPLD_I2C_CSR		0x0E
+#define CEL_CPLD_I2C_WRITE_DATA		0x10
+#define WRITE_DATA(x) (CEL_CPLD_I2C_WRITE_DATA + (2*x))
+#define CEL_CPLD_I2C_READ_DATA		0x20
+#define READ_DATA(x) (CEL_CPLD_I2C_READ_DATA + (2*x))
+
+#define CEL_CPLD_I2C_CLK_50KHZ		0x00
+#define CEL_CPLD_I2C_CLK_100KHZ		0x40
+
+#define CSR_MASTER_ERROR		0x80
+#define CSR_BUSY			0x40
+#define CSR_MASTER_RESET_L		0x01
+
+#define OPCODE_DATA_LENGTH_SHIFT	4
+#define OPCODE_CMD_LENGTH		1
+
+#define DEV_ADDR_READ_OP		0x1
+#define DEV_ADDR_WRITE_OP		0x0
+
+struct cel_cpld_i2c {
+	struct device     *m_dev;
+	void __iomem      *m_base;
+	struct i2c_adapter m_adap;
+	u8                 m_clk_freq;
+};
+
+static inline void cel_cpld_set_mux_reg(struct cel_cpld_i2c *i2c, int channel)
+{
+	writeb(i2c->m_clk_freq | (channel & 0x3F),
+	       i2c->m_base + CEL_CPLD_I2C_PORT_ID);
+}
+
+/*
+ * Wait up to 1 second for the controller to be come non-busy.
+ *
+ * Returns:
+ *   - success:  0
+ *   - failure:  negative status code
+ */
+static int cel_cpld_wait(struct cel_cpld_i2c *i2c)
+{
+	unsigned long orig_jiffies = jiffies;
+	int rc = 0;
+	u8 csr;
+
+	/* Allow bus up to 1s to become not busy */
+	while ((csr = readb(i2c->m_base + CEL_CPLD_I2C_CSR)) & CSR_BUSY) {
+		if (signal_pending(current)) {
+			return -EINTR;
+		}
+		if (time_after(jiffies, orig_jiffies + HZ)) {
+			dev_warn(i2c->m_dev, "Bus busy timeout\n");
+			rc = -ETIMEDOUT;
+			break;
+		}
+		schedule();
+	}
+
+	if (csr & CSR_MASTER_ERROR) {
+		/* Typically this means the SFP+ device is not present. */
+		/* Clear master error with the master reset. */
+		writeb(~CSR_MASTER_RESET_L,
+		       i2c->m_base + CEL_CPLD_I2C_CSR);
+		udelay(3000);
+		writeb(CSR_MASTER_RESET_L,
+		       i2c->m_base + CEL_CPLD_I2C_CSR);
+		rc = rc ? rc : -EIO;
+	}
+
+	return rc;
+}
+
+static int cel_cpld_i2c_write(struct cel_cpld_i2c *i2c, int target,
+			      u8 offset, const u8 *data, int length)
+{
+	u8 tmp, xfer_len, i;
+	int ret, total_xfer = 0;
+
+	/* The CEL-CPLD I2C master writes in units of 8 bytes */
+	while (length > 0) {
+
+		/* Configure byte offset within device */
+		writeb(offset + total_xfer,
+		       i2c->m_base + CEL_CPLD_I2C_CMD_BYTE0);
+
+		/* Configure transfer length - max of 8 bytes */
+		xfer_len = (length > 8) ? 8 : length;
+		tmp = (xfer_len << OPCODE_DATA_LENGTH_SHIFT);
+		tmp |= OPCODE_CMD_LENGTH;
+		writeb(tmp, i2c->m_base + CEL_CPLD_I2C_OPCODE);
+
+		/* Load the transmit data into the send buffer */
+		for (i = 0; i < xfer_len; i++)
+			writeb(data[total_xfer + i], i2c->m_base + WRITE_DATA(i));
+
+		/* Initiate write transaction */
+		tmp = (target << 1) | DEV_ADDR_WRITE_OP;
+		writeb(tmp, i2c->m_base + CEL_CPLD_I2C_DEV_ADDR);
+
+		/* Wait for transfer completion */
+		ret = cel_cpld_wait(i2c);
+		if (ret)
+			return ret;
+
+		total_xfer += xfer_len;
+		length -= xfer_len;
+	}
+
+	return 0;
+}
+
+static int cel_cpld_i2c_read(struct cel_cpld_i2c *i2c, int target,
+			     u8 offset, u8 *data, int length)
+{
+	u8 tmp, xfer_len, i;
+	int ret, total_xfer = 0;
+
+	/* The CEL-CPLD I2C master reads in units of 8 bytes */
+	while (length > 0) {
+
+		/* Configure byte offset within device */
+		writeb(offset + total_xfer,
+		       i2c->m_base + CEL_CPLD_I2C_CMD_BYTE0);
+
+		/* Configure transfer length - max of 8 bytes */
+		xfer_len = (length > 8) ? 8 : length;
+		tmp = (xfer_len << OPCODE_DATA_LENGTH_SHIFT);
+		tmp |= OPCODE_CMD_LENGTH;
+		writeb(tmp, i2c->m_base + CEL_CPLD_I2C_OPCODE);
+
+		/* Initiate read transaction */
+		tmp = (target << 1) | DEV_ADDR_READ_OP;
+		writeb(tmp, i2c->m_base + CEL_CPLD_I2C_DEV_ADDR);
+
+		/* Wait for transfer completion */
+		ret = cel_cpld_wait(i2c);
+		if (ret)
+			return ret;
+
+		/* Gather up the results */
+		for (i = 0; i < xfer_len; i++)
+			data[total_xfer + i] = readb(i2c->m_base + READ_DATA(i));
+
+		total_xfer += xfer_len;
+		length -= xfer_len;
+	}
+
+	return 0;
+}
+
+static int cel_cpld_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs, int num)
+{
+	struct i2c_msg *pmsg;
+	int ret = 0;
+	struct cel_cpld_i2c *i2c = i2c_get_adapdata(adap);
+	u8 offset;
+
+	/* Allow bus to become not busy */
+	ret = cel_cpld_wait(i2c);
+	if (ret)
+		return ret;
+
+	/*
+	 * This is somewhat gimpy.
+	 *
+	 * The CEL-CPLD I2C master is special built to read/write SFP+
+	 * EEPROMs only.  It is *not* a general purpose I2C master.
+	 * The clients of this master are *always* expected to be
+	 * "at,24c04" or "sff-8436 based qsfp" compatible EEPROMs.
+	 *
+	 * As such we have the following expectations for READ operation:
+	 *
+	 *    - number of messages is "2"
+	 *    - msg[0] contains info about the offset within the 512-byte EEPROM
+	 *      - msg[0].len = 1
+	 *      - msg[0].buf[0] contains the offset
+	 *    - msg[1] contains info about the read payload
+	 *
+	 * As such we have the following expectations for WRITE operation:
+	 *
+	 *    - number of messages is "1"
+	 *    - msg[0] contains info about the offset within the 512-byte EEPROM
+	 *    - msg[0].buf[0] contains the offset
+	 *    - msg[0] also contains info about the write payload
+	 */
+
+	/*
+	 * The offset within the EEPROM is stored in msg[0].buf[0].
+	 */
+	offset = msgs[0].buf[0];
+
+	if (num == 1) {
+		pmsg = &msgs[0];
+	} else {
+		pmsg = &msgs[1];
+	}
+
+	if ((offset + pmsg->len) > 0x200)
+		return -EINVAL;
+
+	if (pmsg->flags & I2C_M_RD) {
+		if (num != 2) {
+			dev_warn(i2c->m_dev, "Expecting 2 i2c messages. Got %d\n", num);
+			return -EINVAL;
+		}
+
+		if (msgs[0].len != 1) {
+			dev_warn(i2c->m_dev, "Expecting mgs[0].len == 1. Got %d\n",
+                msgs[0].len);
+			return -EINVAL;
+		}
+
+		ret = cel_cpld_i2c_read(i2c, pmsg->addr, offset, pmsg->buf, pmsg->len);
+	} else {
+		ret = cel_cpld_i2c_write(i2c, pmsg->addr, offset, &(pmsg->buf[1]), (pmsg->len - 1));
+	}
+
+	return (ret < 0) ? ret : num;
+}
+
+static u32 cel_cpld_functionality(struct i2c_adapter *adap)
+{
+	return I2C_FUNC_I2C | I2C_FUNC_SMBUS_EMUL;
+}
+
+static const struct i2c_algorithm cel_cpld_algo = {
+	.master_xfer = cel_cpld_xfer,
+	.functionality = cel_cpld_functionality,
+};
+
+static struct i2c_adapter cel_cpld_ops = {
+	.owner = THIS_MODULE,
+	.name = "CEL_CPLD adapter",
+	.algo = &cel_cpld_algo,
+	.timeout = HZ,
+};
+
+static void __devinit cel_cpld_i2c_bus_setup(struct device_node *node,
+					 struct cel_cpld_i2c *i2c,
+					 u32 clock)
+{
+	u8 clk_freq = CEL_CPLD_I2C_CLK_50KHZ;
+
+	if (clock == 100000)
+		clk_freq = CEL_CPLD_I2C_CLK_100KHZ;
+
+	i2c->m_clk_freq = clk_freq;
+	writeb(clk_freq, i2c->m_base + CEL_CPLD_I2C_PORT_ID);
+
+	/* Reset the I2C master logic */
+	writeb(~CSR_MASTER_RESET_L, i2c->m_base + CEL_CPLD_I2C_CSR);
+	udelay(3000);
+	writeb(CSR_MASTER_RESET_L, i2c->m_base + CEL_CPLD_I2C_CSR);
+
+}
+
+static const struct of_device_id cel_cpld_i2c_bus_of_match[];
+static int __devinit cel_cpld_i2c_bus_probe(struct platform_device *op)
+{
+	const struct of_device_id *match;
+	struct cel_cpld_i2c *i2c;
+	const u32 *prop;
+	u32 clock = 100000;
+	int result = 0;
+	int plen;
+
+	match = of_match_device(cel_cpld_i2c_bus_of_match, &op->dev);
+	if (!match)
+		return -EINVAL;
+
+	i2c = kzalloc(sizeof(*i2c), GFP_KERNEL);
+	if (!i2c)
+		return -ENOMEM;
+
+	i2c->m_dev = &op->dev; /* for debug and error output */
+
+	i2c->m_base = of_iomap(op->dev.of_node, 0);
+	if (!i2c->m_base) {
+		dev_err(i2c->m_dev, "failed to map controller\n");
+		result = -ENOMEM;
+		goto fail_map;
+	}
+
+	prop = of_get_property(op->dev.of_node, "clock-frequency", &plen);
+	if (prop && plen == sizeof(u32)) {
+		/*
+		 * The hardware only supports two clock frequencies:
+		 * 50kHz and 100kHz.
+		 *
+		 */
+		if ((*prop != 50000) && (*prop != 100000)) {
+			dev_err(i2c->m_dev, "clock-frequency %u is not valid.\n",
+				*prop);
+			result = -EINVAL;
+			goto fail_property;
+		} else {
+			clock = *prop;
+			dev_info(i2c->m_dev, "clock-frequency %u\n", clock);
+		}
+	}
+
+	cel_cpld_i2c_bus_setup(op->dev.of_node, i2c, clock);
+
+	prop = of_get_property(op->dev.of_node, "cel_cpld,timeout", &plen);
+	if (prop && plen == sizeof(u32)) {
+		cel_cpld_ops.timeout = *prop * HZ / 1000000;
+		if (cel_cpld_ops.timeout < 5)
+			cel_cpld_ops.timeout = 5;
+	}
+	dev_info(i2c->m_dev, "timeout %u us\n", cel_cpld_ops.timeout * 1000000 / HZ);
+
+	dev_set_drvdata(&op->dev, i2c);
+
+	i2c->m_adap = cel_cpld_ops;
+	i2c_set_adapdata(&i2c->m_adap, i2c);
+	i2c->m_adap.dev.parent = &op->dev;
+	i2c->m_adap.dev.of_node = of_node_get(op->dev.of_node);
+
+	result = i2c_add_adapter(&i2c->m_adap);
+	if (result < 0) {
+		dev_err(i2c->m_dev, "failed to add adapter\n");
+		goto fail_add;
+	}
+	of_i2c_register_devices(&i2c->m_adap);
+
+	return result;
+
+ fail_add:
+	dev_set_drvdata(&op->dev, NULL);
+ fail_property:
+	iounmap(i2c->m_base);
+ fail_map:
+	kfree(i2c);
+	return result;
+};
+
+static int __devexit cel_cpld_i2c_bus_remove(struct platform_device *op)
+{
+	struct cel_cpld_i2c *i2c = dev_get_drvdata(&op->dev);
+
+	i2c_del_adapter(&i2c->m_adap);
+	dev_set_drvdata(&op->dev, NULL);
+
+	iounmap(i2c->m_base);
+	kfree(i2c);
+	return 0;
+};
+
+static const struct of_device_id cel_cpld_i2c_bus_of_match[] = {
+	{.compatible = "cel,cpld-i2c-bus", },
+	{ /* end of list */ },
+};
+MODULE_DEVICE_TABLE(of, cel_cpld_i2c_bus_of_match);
+
+/* Structure for a device driver */
+static struct platform_driver cel_cpld_i2c_bus_driver = {
+	.driver = {
+		.owner = THIS_MODULE,
+		.name = BUS_DRV_NAME,
+		.of_match_table = cel_cpld_i2c_bus_of_match,
+	},
+	.probe		= cel_cpld_i2c_bus_probe,
+	.remove		= __devexit_p(cel_cpld_i2c_bus_remove),
+};
+
+/*
+ * MUX Driver starts here
+ */
+
+#define MUX_DRV_NAME    "cel-cpld-i2c-mux"
+
+#define INVALID_CHANNEL		(0xFF)
+
+struct cel_cpld_vadapter {
+	struct i2c_adapter *m_adapter;  /* virtual i2c adapter struct */
+	u32                 m_channel;  /* MUX channel */
+	struct llist_node   m_llnode;
+};
+
+struct cel_cpld_i2c_mux {
+	struct device       *m_dev;           /* for debug and error output */
+	struct llist_head    m_vadapter_list; /* list of virtual i2c adapters */
+	struct cel_cpld_i2c *m_i2c_bus;       /* parent I2C master device */
+	u8                   m_last_channel;  /* last channel selected    */
+	u32                  m_mux_id;        /* mux ID */
+};
+
+static int cel_cpld_i2c_mux_select_chan(struct i2c_adapter *adap,
+					void *client, u32 channel)
+{
+	struct cel_cpld_i2c_mux *mux = i2c_get_clientdata(client);
+
+	if (channel != mux->m_last_channel) {
+		cel_cpld_set_mux_reg(mux->m_i2c_bus, channel);
+		mux->m_last_channel = channel;
+	}
+
+	return 0;
+}
+
+/*
+ * I2C init/probing/exit functions
+ */
+
+static int __devinit cel_cpld_i2c_mux_probe(struct i2c_client *client,
+					    const struct i2c_device_id *id)
+{
+	struct i2c_adapter  *adap = to_i2c_adapter(client->dev.parent);
+	struct cel_cpld_i2c *i2c = i2c_get_adapdata(adap);
+	struct cel_cpld_i2c_mux *mux;
+	const void* prop;
+	struct device_node *mux_of_child;
+	struct cel_cpld_vadapter *entry;
+	struct llist_node *llnode;
+	int plen = 0;
+	u32 mux_id, cnt = 0;
+	int rc = -ENODEV;
+
+	/*
+	 * Use the parent adapter for our register access.
+	 */
+	if (i2c->m_base == NULL) {
+		dev_err(&client->dev,
+			"Cannot find valid register iomap for CPLD mux.\n");
+		rc = -ENODEV;
+		goto err;
+	}
+
+	prop = of_get_property(client->dev.of_node, "reg", &plen);
+	if (prop && plen == sizeof(u32)) {
+		mux_id = *((u32*)prop);
+	} else {
+		dev_err(&client->dev,
+			"Cannot find valid mux_id for CPLD mux.\n");
+		rc = -ENODEV;
+		goto err;
+	}
+
+	mux = kmalloc(sizeof(struct cel_cpld_i2c_mux), GFP_KERNEL);
+	if (!mux) {
+		rc = -ENOMEM;
+		goto err;
+	}
+
+	i2c_set_clientdata(client, mux);
+
+	mux->m_dev          = &client->dev; /* for debug and error output */
+	mux->m_i2c_bus      = i2c;
+	mux->m_mux_id       = mux_id;
+	mux->m_last_channel = INVALID_CHANNEL;
+	init_llist_head(&mux->m_vadapter_list);
+
+	/* Create a virtual adapter for each child channel of this mux */
+	for_each_child_of_node(client->dev.of_node, mux_of_child) {
+		u32 channel;
+
+		prop = of_get_property(mux_of_child, "reg", &plen);
+		if (prop && plen == sizeof(u32)) {
+			channel = *((u32*)prop);
+		} else {
+			dev_err(&client->dev,
+				"Cannot find channel for CPLD mux.\n");
+			rc = -EINVAL;
+			of_node_put(mux_of_child);
+			goto virt_reg_failed;
+		}
+		of_node_put(mux_of_child);
+
+		/* Check for duplicates */
+		llist_for_each_entry(entry,
+				     mux->m_vadapter_list.first,
+				     m_llnode) {
+			if (entry->m_channel == channel) {
+				dev_err(&client->dev,
+					"Duplicate MUX channel: %u\n", channel);
+				rc = -EINVAL;
+				goto virt_reg_failed;
+			}
+		}
+
+		entry = kmalloc(sizeof(struct cel_cpld_vadapter), GFP_KERNEL);
+		if (!entry) {
+			rc = -ENOMEM;
+			goto virt_reg_failed;
+		}
+
+		entry->m_channel = channel;
+		entry->m_adapter =
+			i2c_add_mux_adapter(adap, &client->dev, client,
+					    0, channel,
+					    cel_cpld_i2c_mux_select_chan,
+					    NULL);
+
+		if (entry->m_adapter == NULL) {
+			rc = -ENODEV;
+			dev_err(&client->dev,
+				"failed to register multiplexed adapter %u\n",
+				channel);
+			kfree(entry);
+			goto virt_reg_failed;
+		}
+
+		llist_add(&entry->m_llnode, &mux->m_vadapter_list);
+		cnt++;
+	}
+
+	dev_info(&client->dev,
+		 "registered %u multiplexed buses for mux_id %u\n",
+		 cnt, mux_id);
+
+	return 0;
+
+virt_reg_failed:
+	while ((llnode = llist_del_first(&mux->m_vadapter_list)) != NULL) {
+		entry = llist_entry(llnode, struct cel_cpld_vadapter, m_llnode);
+		if (entry->m_adapter)
+			(void)i2c_del_mux_adapter(entry->m_adapter);
+		kfree(entry);
+	}
+
+	kfree(mux);
+err:
+	return rc;
+}
+
+static int __devexit cel_cpld_i2c_mux_remove(struct i2c_client *client)
+{
+	struct cel_cpld_i2c_mux  *mux = i2c_get_clientdata(client);
+	struct llist_node        *llnode;
+	struct cel_cpld_vadapter *entry;
+
+	while ((llnode = llist_del_first(&mux->m_vadapter_list)) != NULL) {
+		entry = llist_entry(llnode, struct cel_cpld_vadapter, m_llnode);
+		if (entry->m_adapter)
+			(void)i2c_del_mux_adapter(entry->m_adapter);
+		kfree(entry);
+	}
+
+	kfree(mux);
+	return 0;
+}
+
+static const struct i2c_device_id cel_cpld_i2c_mux_ids[] = {
+	{ "cpld-i2c-mux", 0 },
+	{ /* end of list */ },
+};
+MODULE_DEVICE_TABLE(i2c, cel_cpld_i2c_mux_ids);
+
+static struct i2c_driver cel_cpld_i2c_mux_driver = {
+	.driver = {
+		.name  = MUX_DRV_NAME,
+		.owner = THIS_MODULE,
+	},
+	.probe    = cel_cpld_i2c_mux_probe,
+	.remove   = __devexit_p(cel_cpld_i2c_mux_remove),
+	.id_table = cel_cpld_i2c_mux_ids,
+};
+
+/*
+ * Module init/exit methods begin here.  The init and exit methods
+ * register/de-register two devices:
+ *
+ * - The i2c bus adapter device
+ * - The i2c mux device
+ *
+ */
+static int __init cel_cpld_i2c_init(void)
+{
+	int rc;
+
+	/* First register the i2c adapter */
+	rc = platform_driver_register(&cel_cpld_i2c_bus_driver);
+	if (rc) {
+		printk(KERN_ERR"%s(): platform_driver_register() failed: %d\n",
+		       __func__, rc);
+		return rc;
+	}
+
+	/* Next register the i2c mux */
+	rc = i2c_add_driver(&cel_cpld_i2c_mux_driver);
+	if (rc) {
+		printk(KERN_ERR"%s(): i2c_add_driver() failed: %d\n",
+		       __func__, rc);
+		platform_driver_unregister(&cel_cpld_i2c_bus_driver);
+	}
+
+	return rc;
+}
+
+static void __exit cel_cpld_i2c_exit(void)
+{
+	/* First remove the i2c mux driver */
+	i2c_del_driver( &cel_cpld_i2c_mux_driver);
+
+	/* Next remove the i2c adapter */
+	platform_driver_unregister(&cel_cpld_i2c_bus_driver);
+}
+
+module_init(cel_cpld_i2c_init);
+module_exit(cel_cpld_i2c_exit);
+
+MODULE_AUTHOR("Curt Brune <curt@cumulusnetworks.com>");
+MODULE_DESCRIPTION("I2C Adapter/Mux Driver for Celestica CPLD");
+MODULE_LICENSE("GPL v2");
+MODULE_VERSION(BUS_MUX_DRV_VERSION);
