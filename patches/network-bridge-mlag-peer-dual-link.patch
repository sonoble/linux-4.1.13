Added MLAG peerlink and duallink bridge port attributes

diff --git a/include/linux/if_link.h b/include/linux/if_link.h
index b262ddd..45736db 100644
--- a/include/linux/if_link.h
+++ b/include/linux/if_link.h
@@ -219,6 +219,8 @@ enum {
 	IFLA_BRPORT_FAST_LEAVE, /* multicast fast leave    */
 	IFLA_BRPORT_LEARNING,   /* mac learning */
 	IFLA_BRPORT_UNICAST_FLOOD, /* flood unicast traffic */
+	IFLA_BRPORT_PEER_LINK = 253, /* MLAG peer link */
+	IFLA_BRPORT_DUAL_LINK,  /* MLAG Dual Connected link */
 	__IFLA_BRPORT_MAX
 };
 #define IFLA_BRPORT_MAX (__IFLA_BRPORT_MAX - 1)
diff --git a/net/bridge/br_forward.c b/net/bridge/br_forward.c
index 79ab806..2bcb63f 100644
--- a/net/bridge/br_forward.c
+++ b/net/bridge/br_forward.c
@@ -112,6 +112,11 @@ static void __br_forward(const struct net_bridge_port *to, struct sk_buff *skb)
 	/* flood forward IGMP/MLD report/leave when hardware forwarded */
 	if (br_hw_fwding_enabled && br_multicast_is_rep_leave(skb))
 		igmp_report_leave_forward = 1;
+	/* don't forward IGMP/MLD report/leave when received on MLAG peer_link
+	 * and being sent to dual_link interface
+	 */
+	if (igmp_report_leave_forward && p->peer_link && to->dual_link)
+		igmp_report_leave_forward = 0;
 
 	if (br_hw_fwding_enabled && !stp_disabled_forward &&
 				!igmp_report_leave_forward) {
diff --git a/net/bridge/br_netlink.c b/net/bridge/br_netlink.c
index 4544c7b..77666db 100644
--- a/net/bridge/br_netlink.c
+++ b/net/bridge/br_netlink.c
@@ -34,6 +34,8 @@ static inline size_t br_port_info_size(void)
 		+ nla_total_size(1)	/* IFLA_BRPORT_FAST_LEAVE */
 		+ nla_total_size(1)	/* IFLA_BRPORT_LEARNING */
 		+ nla_total_size(1)	/* IFLA_BRPORT_UNICAST_FLOOD */
+		+ nla_total_size(1)     /* IFLA_BRPORT_PEER_LINK */
+		+ nla_total_size(1)     /* IFLA_BRPORT_DUAL_LINK */
 		+ 0;
 }
 
@@ -58,6 +60,8 @@ static int br_port_fill_attrs(struct sk_buff *skb,
 	    nla_put_u16(skb, IFLA_BRPORT_PRIORITY, p->priority) ||
 	    nla_put_u32(skb, IFLA_BRPORT_COST, p->path_cost) ||
 	    nla_put_u8(skb, IFLA_BRPORT_MODE, mode) ||
+	    nla_put_u8(skb, IFLA_BRPORT_PEER_LINK, p->peer_link) ||
+	    nla_put_u8(skb, IFLA_BRPORT_DUAL_LINK, p->dual_link) ||
 	    nla_put_u8(skb, IFLA_BRPORT_GUARD, !!(p->flags & BR_BPDU_GUARD)) ||
 	    nla_put_u8(skb, IFLA_BRPORT_PROTECT, !!(p->flags & BR_ROOT_BLOCK)) ||
 	    nla_put_u8(skb, IFLA_BRPORT_FAST_LEAVE, !!(p->flags & BR_MULTICAST_FAST_LEAVE)) ||
@@ -387,6 +391,8 @@ static const struct nla_policy ifla_brport_policy[IFLA_BRPORT_MAX + 1] = {
 	[IFLA_BRPORT_PROTECT]	= { .type = NLA_U8 },
 	[IFLA_BRPORT_LEARNING]	= { .type = NLA_U8 },
 	[IFLA_BRPORT_UNICAST_FLOOD] = { .type = NLA_U8 },
+	[IFLA_BRPORT_PEER_LINK] = { .type = NLA_U8 },
+	[IFLA_BRPORT_DUAL_LINK] = { .type = NLA_U8 },
 };
 
 /* Change the state of the port and notify spanning tree */
@@ -421,6 +427,18 @@ static void br_set_port_flag(struct net_bridge_port *p, struct nlattr *tb[],
 	}
 }
 
+static int br_set_port_peer_link(struct net_bridge_port *p, u8 enable)
+{
+	p->peer_link = enable;
+	return 0;
+}
+
+static int br_set_port_dual_link(struct net_bridge_port *p, u8 enable)
+{
+	p->dual_link = enable;
+	return 0;
+}
+
 /* Process bridge protocol info on port */
 static int br_setport(struct net_bridge_port *p, struct nlattr *tb[])
 {
@@ -450,6 +468,18 @@ static int br_setport(struct net_bridge_port *p, struct nlattr *tb[])
 		if (err)
 			return err;
 	}
+
+	if (tb[IFLA_BRPORT_PEER_LINK]) {
+		err = br_set_port_peer_link(p, nla_get_u8(tb[IFLA_BRPORT_PEER_LINK]));
+		if (err)
+			return err;
+	}
+
+	if (tb[IFLA_BRPORT_DUAL_LINK]) {
+		err = br_set_port_dual_link(p, nla_get_u8(tb[IFLA_BRPORT_DUAL_LINK]));
+		if (err)
+			return err;
+	}
 	return 0;
 }
 
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index c5fe7c0..75068b7 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -202,6 +202,8 @@ struct net_bridge_port
 #ifdef CONFIG_BRIDGE_VLAN_FILTERING
 	struct net_port_vlans __rcu	*vlan_info;
 #endif
+	u8				peer_link;
+	u8				dual_link;
 };
 
 #define br_port_exists(dev) (dev->priv_flags & IFF_BRIDGE_PORT)
