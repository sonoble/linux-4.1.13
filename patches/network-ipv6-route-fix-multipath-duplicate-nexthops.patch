Problem:
(route output trimmed to show example):
# ip -6 route add 2001:10:1:3::/64 nexthop via 2001:10:1:2::99

# ip -6 route show
2001:10:1:3::/64 via 2001:10:1:2::99 dev swp26  metric 1024

# ip -6 route add 2001:10:1:3::/64 nexthop via 2001:10:1:2::99
RTNETLINK answers: File exists

# ip route show
#
/* Previously added route vanished */

When the route add fails with -EXISTS, kernel in its cleanup path tries
to delete all nexthops added so far. This cleanup logic has a bug.
It tries to delete all the nexthops given by user. In the above case though
the route was added by the user in his previous attempts, just because it
matches with the nexthop in the new request, the previously added route is
deleted. The patch fixes this cleanup handling by introducing a few flags.
Did not want to change the function too much.

The other problem is the misleading error code (-ESRCH):
# ip -6 route add 2001:10:1:3::/64 nexthop via 2001:10:1:2::99 nexthop via 2001:10:1:2::99
RTNETLINK answers: No such process

In the above case, the second nexthop add fails with -EXIST,
but when it tries to delete all the nexthops the first one deletes fine,
and the second nexthop results in -ESRCH (which is returned to the user).

This patch does not fix the return code yet. Its a remote error case.
The code is used by both add and delete. And did not want to change the
error code specific for this case. It is fixable though.
Still debating about the fix. We could also add a high level check for
duplicate nexthops in the kernel.

diff --git a/net/ipv6/route.c b/net/ipv6/route.c
index c3be1a3..2ec2865 100644
--- a/net/ipv6/route.c
+++ b/net/ipv6/route.c
@@ -2407,10 +2407,13 @@ static int ip6_route_multipath(struct fib6_config *cfg, int add)
 	int remaining;
 	int attrlen;
 	int err = 0, last_err = 0;
+	int nh_processed_cnt, nh_processed_cnt_last = 0;
+	int rollback = 0;
 
 beginning:
 	rtnh = (struct rtnexthop *)cfg->fc_mp;
 	remaining = cfg->fc_mp_len;
+	nh_processed_cnt = 0;
 
 	/* Parse a Multipath Entry */
 	while (rtnh_ok(rtnh, remaining)) {
@@ -2440,9 +2443,16 @@ beginning:
 				 * next hops that have been already added.
 				 */
 				add = 0;
+				rollback = 1;
+				if (!nh_processed_cnt)
+					break;
+				nh_processed_cnt_last = nh_processed_cnt;
 				goto beginning;
 			}
 		}
+		if (rollback && nh_processed_cnt == nh_processed_cnt_last)
+			break;
+		nh_processed_cnt++;
 		rtnh = rtnh_next(rtnh, &remaining);
 	}
 
