net: link route status to port carrier status

Initial patches from Dinesh including sysctl bits.

diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index 7e9cae6..2a75139 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -2283,6 +2283,7 @@ extern int		dev_forward_skb(struct net_device *dev,
 					struct sk_buff *skb);
 
 extern int		netdev_budget;
+extern int		delete_dead_routes;
 
 /* Called by rtnetlink.c:rtnl_unlock() */
 extern void netdev_run_todo(void);
diff --git a/include/linux/rtnetlink.h b/include/linux/rtnetlink.h
index 0c693d9..549b574 100644
--- a/include/linux/rtnetlink.h
+++ b/include/linux/rtnetlink.h
@@ -324,6 +324,8 @@ struct rtnexthop {
 #define RTNH_F_DEAD		1	/* Nexthop is dead (used by multipath)	*/
 #define RTNH_F_PERVASIVE	2	/* Do recursive gateway lookup	*/
 #define RTNH_F_ONLINK		4	/* Gateway is forced on link	*/
+/* Skipping a few bits in between to avoid any conflict with upstream */
+#define RTNH_F_DEAD_LINKDOWN    64       /* Nexthop is dead due to no carrier */
 
 /* Macros to handle hexthops */
 
diff --git a/include/linux/sysctl.h b/include/linux/sysctl.h
index 703cfa3..d0db95e 100644
--- a/include/linux/sysctl.h
+++ b/include/linux/sysctl.h
@@ -275,6 +275,7 @@ enum
 	NET_CORE_AEVENT_ETIME=20,
 	NET_CORE_AEVENT_RSEQTH=21,
 	NET_CORE_WARNINGS=22,
+	NET_CORE_DELETE_DEAD_ROUTES=23,
 };
 
 /* /proc/sys/net/ethernet */
diff --git a/include/net/ip6_route.h b/include/net/ip6_route.h
index 4913dac..e50385e 100644
--- a/include/net/ip6_route.h
+++ b/include/net/ip6_route.h
@@ -149,6 +149,7 @@ struct rt6_rtnl_dump_arg {
 
 extern int rt6_dump_route(struct rt6_info *rt, void *p_arg);
 extern void rt6_ifdown(struct net *net, struct net_device *dev);
+extern void rt6_link_change(struct net *net, struct net_device *dev);
 extern void rt6_mtu_change(struct net_device *dev, unsigned mtu);
 extern void rt6_remove_prefsrc(struct inet6_ifaddr *ifp);
 
diff --git a/kernel/sysctl_binary.c b/kernel/sysctl_binary.c
index 9f9aa32..12a46f7 100644
--- a/kernel/sysctl_binary.c
+++ b/kernel/sysctl_binary.c
@@ -195,6 +195,7 @@ static const struct bin_table bin_net_core_table[] = {
 	{ CTL_INT,	NET_CORE_AEVENT_ETIME,	"xfrm_aevent_etime" },
 	{ CTL_INT,	NET_CORE_AEVENT_RSEQTH,	"xfrm_aevent_rseqth" },
 	{ CTL_INT,	NET_CORE_WARNINGS,	"warnings" },
+	{ CTL_INT,	NET_CORE_DELETE_DEAD_ROUTES,	"delete_dead_routes" },
 	{},
 };
 
diff --git a/net/core/dev.c b/net/core/dev.c
index ef84f5a..725ac59 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -2575,6 +2575,8 @@ int netdev_max_backlog __read_mostly = 1000;
 int netdev_tstamp_prequeue __read_mostly = 1;
 int netdev_budget __read_mostly = 300;
 int weight_p __read_mostly = 64;            /* old backlog weight */
+int delete_dead_routes = 0;
+EXPORT_SYMBOL(delete_dead_routes);
 
 /* Called with irq disabled */
 static inline void ____napi_schedule(struct softnet_data *sd,
diff --git a/net/core/sysctl_net_core.c b/net/core/sysctl_net_core.c
index f0bdd36..9aa94d0 100644
--- a/net/core/sysctl_net_core.c
+++ b/net/core/sysctl_net_core.c
@@ -186,6 +186,13 @@ static struct ctl_table net_core_table[] = {
 		.mode		= 0644,
 		.proc_handler	= proc_dointvec
 	},
+	{
+		.procname	= "delete_dead_routes",
+		.data		= &delete_dead_routes,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= proc_dointvec
+	},
 	{ }
 };
 
diff --git a/net/ipv4/fib_frontend.c b/net/ipv4/fib_frontend.c
index 92fc5f6..482dbea 100644
--- a/net/ipv4/fib_frontend.c
+++ b/net/ipv4/fib_frontend.c
@@ -994,6 +994,7 @@ static int fib_netdev_event(struct notifier_block *this, unsigned long event, vo
 	struct net_device *dev = ptr;
 	struct in_device *in_dev = __in_dev_get_rtnl(dev);
 	struct net *net = dev_net(dev);
+	unsigned flags;
 
 	if (event == NETDEV_UNREGISTER) {
 		fib_disable_ip(dev, 2, -1);
@@ -1017,8 +1018,13 @@ static int fib_netdev_event(struct notifier_block *this, unsigned long event, vo
 	case NETDEV_DOWN:
 		fib_disable_ip(dev, 0, 0);
 		break;
-	case NETDEV_CHANGEMTU:
 	case NETDEV_CHANGE:
+		flags = dev_get_flags(dev);
+		if (!(flags & IFF_RUNNING))
+			fib_sync_down_dev(dev, 0);
+		else if (flags & IFF_RUNNING)
+			fib_sync_up(dev);
+	case NETDEV_CHANGEMTU:
 		rt_cache_flush(dev_net(dev), 0);
 		break;
 	case NETDEV_UNREGISTER_BATCH:
diff --git a/net/ipv4/fib_semantics.c b/net/ipv4/fib_semantics.c
index 76da979..02fcc81 100644
--- a/net/ipv4/fib_semantics.c
+++ b/net/ipv4/fib_semantics.c
@@ -552,6 +552,8 @@ static int fib_check_nh(struct fib_config *cfg, struct fib_info *fi,
 				return -ENODEV;
 			if (!(dev->flags & IFF_UP))
 				return -ENETDOWN;
+			if (!netif_carrier_ok(dev) && delete_dead_routes)
+				nh->nh_flags |= RTNH_F_DEAD;
 			nh->nh_dev = dev;
 			dev_hold(dev);
 			nh->nh_scope = RT_SCOPE_LINK;
@@ -583,6 +585,8 @@ static int fib_check_nh(struct fib_config *cfg, struct fib_info *fi,
 		if (!dev)
 			goto out;
 		dev_hold(dev);
+		if (!netif_carrier_ok(dev) && delete_dead_routes)
+			nh->nh_flags |= RTNH_F_DEAD;
 		err = (dev->flags & IFF_UP) ? 0 : -ENETDOWN;
 	} else {
 		struct in_device *in_dev;
@@ -601,6 +605,8 @@ static int fib_check_nh(struct fib_config *cfg, struct fib_info *fi,
 		nh->nh_dev = in_dev->dev;
 		dev_hold(nh->nh_dev);
 		nh->nh_scope = RT_SCOPE_HOST;
+		if (!netif_carrier_ok(nh->nh_dev) && delete_dead_routes)
+			nh->nh_flags |= RTNH_F_DEAD;
 		err = 0;
 	}
 out:
@@ -711,6 +717,7 @@ struct fib_info *fib_create_info(struct fib_config *cfg)
 	struct fib_info *ofi;
 	int nhs = 1;
 	struct net *net = cfg->fc_nlinfo.nl_net;
+	int dead;
 
 	if (cfg->fc_type > RTN_MAX)
 		goto err_inval;
@@ -849,11 +856,18 @@ struct fib_info *fib_create_info(struct fib_config *cfg)
 		if (nh->nh_dev == NULL)
 			goto failure;
 	} else {
+		dead = 0;
 		change_nexthops(fi) {
 			err = fib_check_nh(cfg, fi, nexthop_nh);
 			if (err != 0)
 				goto failure;
+			if (nexthop_nh->nh_flags & RTNH_F_DEAD)
+				dead++;
 		} endfor_nexthops(fi)
+		if ((dead == fi->fib_nhs) && delete_dead_routes) {
+			fi->fib_flags |= RTNH_F_DEAD;
+			fi->fib_flags |= RTNH_F_DEAD_LINKDOWN;
+		}
 	}
 
 	if (fi->fib_prefsrc) {
@@ -1021,6 +1035,8 @@ int fib_sync_down_addr(struct net *net, __be32 local)
 			continue;
 		if (fi->fib_prefsrc == local) {
 			fi->fib_flags |= RTNH_F_DEAD;
+			/* Addr is gone, more serious than a linkdown */
+			fi->fib_flags &= ~RTNH_F_DEAD_LINKDOWN;
 			ret++;
 		}
 	}
@@ -1072,6 +1088,14 @@ int fib_sync_down_dev(struct net_device *dev, int force)
 		} endfor_nexthops(fi)
 		if (dead == fi->fib_nhs) {
 			fi->fib_flags |= RTNH_F_DEAD;
+			/*
+			 * force marks route down due to other reasons.
+			 * We honor that and don't set dead due to linkdown.
+			 */
+			if (!force)
+				fi->fib_flags |= RTNH_F_DEAD_LINKDOWN;
+			else
+				fi->fib_flags &= ~RTNH_F_DEAD_LINKDOWN;
 			ret++;
 		}
 	}
@@ -1149,10 +1173,12 @@ int fib_sync_up(struct net_device *dev)
 	struct hlist_node *node;
 	struct fib_nh *nh;
 	int ret;
+	int link_up;
 
 	if (!(dev->flags & IFF_UP))
 		return 0;
 
+	link_up = netif_carrier_ok(dev) || !delete_dead_routes;
 	prev_fi = NULL;
 	hash = fib_devindex_hashfn(dev->ifindex);
 	head = &fib_info_devhash[hash];
@@ -1179,16 +1205,26 @@ int fib_sync_up(struct net_device *dev)
 			if (nexthop_nh->nh_dev != dev ||
 			    !__in_dev_get_rtnl(dev))
 				continue;
-			alive++;
+			if (link_up) {
+				/* Link is up, so mark NH as alive */
+				nexthop_nh->nh_flags &= ~RTNH_F_DEAD;
+				alive++;
+			} else
+				nexthop_nh->nh_flags |= RTNH_F_DEAD;
 			spin_lock_bh(&fib_multipath_lock);
 			nexthop_nh->nh_power = 0;
-			nexthop_nh->nh_flags &= ~RTNH_F_DEAD;
 			spin_unlock_bh(&fib_multipath_lock);
 		} endfor_nexthops(fi)
 
 		if (alive > 0) {
+			/* Some NHs are alive, unmark the route as dead */
+			fi->fib_flags &= ~RTNH_F_DEAD_LINKDOWN;
 			fi->fib_flags &= ~RTNH_F_DEAD;
 			ret++;
+		} else {
+			/* No NHs are alive, mark the route as dead */
+			fi->fib_flags |= RTNH_F_DEAD_LINKDOWN;
+			fi->fib_flags |= RTNH_F_DEAD;
 		}
 	}
 
diff --git a/net/ipv4/fib_trie.c b/net/ipv4/fib_trie.c
index 948ee5c..9384158 100644
--- a/net/ipv4/fib_trie.c
+++ b/net/ipv4/fib_trie.c
@@ -1729,7 +1729,9 @@ static int trie_flush_list(struct fib_table *tb, struct leaf *l,
 	list_for_each_entry_safe(fa, fa_node, &li->falh, fa_list) {
 		struct fib_info *fi = fa->fa_info;
 
-		if (fi && (fi->fib_flags & RTNH_F_DEAD)) {
+		/* Do not flush route if marked dead and link is down */
+		if (fi && (fi->fib_flags & RTNH_F_DEAD) &&
+		    !(fi->fib_flags & RTNH_F_DEAD_LINKDOWN) && delete_dead_routes) {
 			struct nl_info nlinfo = { .nl_net = fi->fib_net, };
 
 			rtmsg_fib(RTM_DELROUTE, htonl(l->key), fa, li->plen,
diff --git a/net/ipv6/addrconf.c b/net/ipv6/addrconf.c
index e6c48a1..017795c 100644
--- a/net/ipv6/addrconf.c
+++ b/net/ipv6/addrconf.c
@@ -2660,13 +2660,16 @@ static int addrconf_notify(struct notifier_block *this, unsigned long event,
 		} else {
 			if (!addrconf_qdisc_ok(dev)) {
 				/* device is still not ready. */
+				rt6_link_change(dev_net(dev), dev);
 				break;
 			}
 
 			if (idev) {
-				if (idev->if_flags & IF_READY)
+				if (idev->if_flags & IF_READY) {
+					rt6_link_change(dev_net(dev), dev);
 					/* device is already configured. */
 					break;
+				}
 				idev->if_flags |= IF_READY;
 			}
 
diff --git a/net/ipv6/route.c b/net/ipv6/route.c
index 2ec2865..b688e41 100644
--- a/net/ipv6/route.c
+++ b/net/ipv6/route.c
@@ -406,6 +406,9 @@ static inline struct rt6_info *rt6_device_match(struct net *net,
 	for (sprt = rt; sprt; sprt = sprt->dst.rt6_next) {
 		struct net_device *dev = sprt->rt6i_dev;
 
+		if (!netif_carrier_ok(dev) && delete_dead_routes)
+			continue;
+
 		if (oif) {
 			if (dev->ifindex == oif)
 				return sprt;
@@ -571,10 +574,12 @@ static struct rt6_info *find_rr_leaf(struct fib6_node *fn,
 	match = NULL;
 	for (rt = rr_head; rt && rt->rt6i_metric == metric;
 	     rt = rt->dst.rt6_next)
-		match = find_match(rt, oif, strict, &mpri, match);
+		if (netif_carrier_ok(rt->rt6i_dev) || !delete_dead_routes)
+			match = find_match(rt, oif, strict, &mpri, match);
 	for (rt = fn->leaf; rt && rt != rr_head && rt->rt6i_metric == metric;
 	     rt = rt->dst.rt6_next)
-		match = find_match(rt, oif, strict, &mpri, match);
+		if (netif_carrier_ok(rt->rt6i_dev) || !delete_dead_routes)
+			match = find_match(rt, oif, strict, &mpri, match);
 
 	return match;
 }
@@ -2241,6 +2246,15 @@ static int fib6_ifdown(struct rt6_info *rt, void *arg)
 	return 0;
 }
 
+static int fib6_linkdown(struct rt6_info *rt, void *arg)
+{
+	if (rt->rt6i_flags & RTF_CACHE) {
+		RT6_TRACE("deleted by ifdown %p\n", rt);
+		return -1;
+	}
+	return 0;
+}
+
 void rt6_ifdown(struct net *net, struct net_device *dev)
 {
 	struct arg_dev_net adn = {
@@ -2252,6 +2266,17 @@ void rt6_ifdown(struct net *net, struct net_device *dev)
 	icmp6_clean_all(fib6_ifdown, &adn);
 }
 
+void rt6_link_change(struct net *net, struct net_device *dev)
+{
+	struct arg_dev_net adn = {
+		.dev = dev,
+		.net = net,
+	};
+
+	fib6_clean_all(net, fib6_linkdown, 0, &adn);
+	icmp6_clean_all(fib6_linkdown, &adn);
+}
+
 struct rt6_mtu_change_arg
 {
 	struct net_device *dev;
@@ -2570,6 +2595,8 @@ static int rt6_fill_node(struct net *net,
 	if (rt->rt6i_flags&RTF_CACHE)
 		rtm->rtm_flags |= RTM_F_CLONED;
 
+	if (rt->rt6i_dev && !netif_carrier_ok(rt->rt6i_dev) && delete_dead_routes)
+		rtm->rtm_flags |= RTNH_F_DEAD;
 	if (dst) {
 		NLA_PUT(skb, RTA_DST, 16, dst);
 		rtm->rtm_dst_len = 128;
