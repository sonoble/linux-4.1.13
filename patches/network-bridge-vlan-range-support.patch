Support configuring and querying bridge vlan in ranges.

diff --git a/include/linux/if_bridge.h b/include/linux/if_bridge.h
index d72ce1c..51eba88 100644
--- a/include/linux/if_bridge.h
+++ b/include/linux/if_bridge.h
@@ -127,6 +127,7 @@ enum {
 struct bridge_vlan_info {
 	__u16 flags;
 	__u16 vid;
+	__u16 vid_end;
 };
 
 /* Bridge multicast database attributes
diff --git a/net/bridge/br_netlink.c b/net/bridge/br_netlink.c
index 4fd0735..882072e 100644
--- a/net/bridge/br_netlink.c
+++ b/net/bridge/br_netlink.c
@@ -128,11 +128,11 @@ static int br_fill_ifinfo(struct sk_buff *skb,
 	}
 
 	/* Check if  the VID information is requested */
-	if (filter_mask & RTEXT_FILTER_BRVLAN) {
+	if ((filter_mask & RTEXT_FILTER_BRVLAN) || (filter_mask == 0)) {
 		struct nlattr *af;
 		const struct net_port_vlans *pv;
 		struct bridge_vlan_info vinfo;
-		u16 vid;
+		u16 vid, start, end;
 		u16 pvid;
 
 		memset(vlan_bmp_copy, 0,
@@ -152,21 +152,93 @@ static int br_fill_ifinfo(struct sk_buff *skb,
 		if (!af)
 			goto nla_put_failure;
 
+		bitmap_copy(vlan_bmp_copy, pv->vlan_bitmap, VLAN_N_VID);
+		bitmap_copy(untagged_bmp_copy, pv->untagged_bitmap, VLAN_N_VID);
+
+		/* send the pvid separately first */
 		pvid = br_get_pvid(pv);
-		for_each_set_bit(vid, pv->vlan_bitmap, VLAN_N_VID) {
-			vinfo.vid = vid;
-			vinfo.flags = 0;
-			if (vid == pvid)
-				vinfo.flags |= BRIDGE_VLAN_INFO_PVID;
 
-			if (test_bit(vid, pv->untagged_bitmap))
+		if (pvid != VLAN_N_VID) {
+			memset(&vinfo, 0, sizeof(vinfo));
+			vinfo.flags |= BRIDGE_VLAN_INFO_PVID;
+			if (test_bit(pvid, untagged_bmp_copy)) {
 				vinfo.flags |= BRIDGE_VLAN_INFO_UNTAGGED;
+				clear_bit(pvid, untagged_bmp_copy);
+			}
+			clear_bit(pvid, vlan_bmp_copy);
+			vinfo.vid = pvid;
+			vinfo.vid_end = pvid;
+			if (nla_put(skb, IFLA_BRIDGE_VLAN_INFO,
+				    sizeof(vinfo), &vinfo))
+				goto nla_put_failure;
+		}
+
+		/* handle the untagged */
+		start = end = 0;
+		for_each_set_bit(vid, untagged_bmp_copy, VLAN_N_VID) {
+			if (start == 0) {
+				start = vid;
+				end = vid;
+			}
 
+			if ((vid - end) > 1) {
+				memset(&vinfo, 0, sizeof(vinfo));
+				vinfo.flags |= BRIDGE_VLAN_INFO_UNTAGGED;
+				vinfo.vid = start;
+				vinfo.vid_end = end;
+				if (nla_put(skb, IFLA_BRIDGE_VLAN_INFO,
+					    sizeof(vinfo), &vinfo))
+					goto nla_put_failure;
+
+				start = vid;
+				end = vid;
+			} else
+				end = vid;
+
+			clear_bit(vid, vlan_bmp_copy);
+		}
+
+		if (start != 0 && end != 0) {
+			memset(&vinfo, 0, sizeof(vinfo));
+			vinfo.flags |= BRIDGE_VLAN_INFO_UNTAGGED;
+			vinfo.vid = start;
+			vinfo.vid_end = end;
 			if (nla_put(skb, IFLA_BRIDGE_VLAN_INFO,
 				    sizeof(vinfo), &vinfo))
 				goto nla_put_failure;
 		}
 
+		/* handle the tagged */
+		start = end = 0;
+		for_each_set_bit(vid, vlan_bmp_copy, VLAN_N_VID) {
+			if (start == 0) {
+				start = vid;
+				end = vid;
+                        }
+
+			if ((vid - end) > 1) {
+				memset(&vinfo, 0, sizeof(vinfo));
+				vinfo.vid = start;
+				vinfo.vid_end = end;
+				if (nla_put(skb, IFLA_BRIDGE_VLAN_INFO,
+					    sizeof(vinfo), &vinfo))
+					goto nla_put_failure;
+
+				start = vid;
+				end = vid;
+                        } else
+				end = vid;
+		}
+
+		if (start != 0 && end != 0) {
+			memset(&vinfo, 0, sizeof(vinfo));
+			vinfo.vid = start;
+			vinfo.vid_end = end;
+			if (nla_put(skb, IFLA_BRIDGE_VLAN_INFO,
+				    sizeof(vinfo), &vinfo))
+				goto nla_put_failure;
+                }
+
 		nla_nest_end(skb, af);
 	}
 
@@ -251,6 +323,7 @@ static int br_afspec(struct net_bridge *br,
 {
 	struct nlattr *tb[IFLA_BRIDGE_MAX+1];
 	int err = 0;
+	__u16 vid;
 
 	err = nla_parse_nested(tb, IFLA_BRIDGE_MAX, af_spec, ifla_br_policy);
 	if (err)
@@ -264,31 +337,37 @@ static int br_afspec(struct net_bridge *br,
 		if (!vinfo->vid || vinfo->vid >= VLAN_VID_MASK)
 			return -EINVAL;
 
+		if (!vinfo->vid_end || vinfo->vid_end >= VLAN_VID_MASK)
+			return -EINVAL;
+
 		switch (cmd) {
 		case RTM_SETLINK:
-			if (p) {
-				err = nbp_vlan_add(p, vinfo->vid, vinfo->flags);
+			for (vid = vinfo->vid; vid <= vinfo->vid_end; vid++) {
+				if (p) {
+					err = nbp_vlan_add(p, vid, vinfo->flags);
+					if (err)
+						break;
+
+					if (vinfo->flags & BRIDGE_VLAN_INFO_MASTER)
+						err = br_vlan_add(p->br, vid,
+								  vinfo->flags);
+				} else
+					err = br_vlan_add(br, vid, vinfo->flags);
+
 				if (err)
 					break;
-
-				if (vinfo->flags & BRIDGE_VLAN_INFO_MASTER)
-					err = br_vlan_add(p->br, vinfo->vid,
-							  vinfo->flags);
-			} else
-				err = br_vlan_add(br, vinfo->vid, vinfo->flags);
-
-			if (err)
-				break;
-
+			}
 			break;
 
 		case RTM_DELLINK:
-			if (p) {
-				nbp_vlan_delete(p, vinfo->vid);
-				if (vinfo->flags & BRIDGE_VLAN_INFO_MASTER)
-					br_vlan_delete(p->br, vinfo->vid);
-			} else
-				br_vlan_delete(br, vinfo->vid);
+			for (vid = vinfo->vid; vid <= vinfo->vid_end; vid++) {
+				if (p) {
+					nbp_vlan_delete(p, vid);
+					if (vinfo->flags & BRIDGE_VLAN_INFO_MASTER)
+						br_vlan_delete(p->br, vid);
+				} else
+					br_vlan_delete(br, vid);
+			}
 			break;
 		}
 	}
