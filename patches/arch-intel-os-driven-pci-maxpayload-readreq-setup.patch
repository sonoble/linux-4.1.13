#Copyright 2014 Cumulus Networks, Inc.  All rights reserved.
Have the OS set up all PCI device maxpayload and maxreadrequest on the PCIe bus
Notes:
1. This is similar to the payload size fixup done for powerpc.
Ref:  arch-powerpc-os-driven-pci-maxpayload-readreq-setup.patch
2. pci=pcie_bus_safe is supposed to fix up the entire tree below a root complex
with the smallest common denominator MPS. However it is only setting the
devices associated with the children (child buses) of the root. And that leaves
some of the devices on the root with a different (and in some cases lower MPS
based on the bios setting).
2. This patch works by walking the bus underneath each PCIe controller,
querying PCI_EXP_DEVCAP_PAYLOAD, and finding the minimum value underneath each
controller.  Then it walks though the same set of devices setting
PCI_EXP_DEVCTL_PAYLOAD and PCI_EXP_DEVCTL_READRQ to this value.  The payloads
are powers of 2 starting at 128...

0 -> 128
1 -> 256
...
7 -> 16,384:1

diff --git a/arch/x86/pci/acpi.c b/arch/x86/pci/acpi.c
index 0ed97d8..f1a970f 100644
--- a/arch/x86/pci/acpi.c
+++ b/arch/x86/pci/acpi.c
@@ -329,6 +329,66 @@ res_alloc_fail:
 	return;
 }
 
+/*
+ * scan and set the PCIe bus payload and read request sizes.
+ */
+static int __devinit __fixup_pcie_scan_payload(struct pci_dev *pdev,
+							void *data)
+{
+	int *payload_size = data;
+	int rval, cap, payload_cap;
+	uint32_t devcap;
+
+	if (!pci_is_pcie(pdev))
+		return 0;
+
+	cap = pci_find_capability(pdev, PCI_CAP_ID_EXP);
+	if (cap == 0)
+		return -ENODEV;
+
+	rval = pci_read_config_dword(pdev, cap + PCI_EXP_DEVCAP, &devcap);
+	if (rval)
+		return rval;
+
+	payload_cap = devcap & PCI_EXP_DEVCAP_PAYLOAD;
+	if (payload_cap < *payload_size)
+		*payload_size = payload_cap;
+
+	return 0;
+}
+
+static int __devinit __fixup_pcie_set_payload(struct pci_dev *pdev,
+							void *data)
+{
+	int *payload_size = data;
+	int rval, cap;
+	uint16_t devctl;
+
+	if (!pci_is_pcie(pdev))
+		return 0;
+
+	cap = pci_find_capability(pdev, PCI_CAP_ID_EXP);
+	if (cap == 0)
+		return -ENODEV;
+
+	rval = pci_read_config_word(pdev, cap + PCI_EXP_DEVCTL, &devctl);
+	if (rval)
+		return rval;
+
+	devctl &= ~PCI_EXP_DEVCTL_PAYLOAD;
+	devctl |= *payload_size << 5;
+
+	devctl &= ~PCI_EXP_DEVCTL_READRQ;
+	devctl |= *payload_size << 12;
+
+	rval = pci_write_config_word(pdev, cap + PCI_EXP_DEVCTL, devctl);
+	if (rval)
+		return rval;
+
+	return 0;
+}
+
+
 struct pci_bus * __devinit pci_acpi_scan_root(struct acpi_pci_root *root)
 {
 	struct acpi_device *device = root->device;
@@ -395,6 +455,28 @@ struct pci_bus * __devinit pci_acpi_scan_root(struct acpi_pci_root *root)
 		}
 	}
 
+/* Set the payload size for all devices on the bus */
+	if (bus) {
+		int payload_size;
+		payload_size = PCI_EXP_DEVCAP_PAYLOAD;
+		pci_walk_bus(bus, __fixup_pcie_scan_payload, &payload_size);
+		if (payload_size < PCI_EXP_DEVCAP_PAYLOAD) {
+			pci_walk_bus(bus, __fixup_pcie_set_payload,
+							&payload_size);
+			dev_info(&bus->dev,
+					"Set PCIe payload and read request to %d\n",
+					(payload_size == 0) ?    128 :
+					(payload_size == 1) ?    256 :
+					(payload_size == 2) ?    512 :
+					(payload_size == 3) ?   1024 :
+					(payload_size == 4) ?   2048 :
+					(payload_size == 5) ?   4096 :
+					(payload_size == 6) ?   8192 :
+					16384
+					);
+		}
+	}
+
 	/* After the PCI-E bus has been walked and all devices discovered,
 	 * configure any settings of the fabric that might be necessary.
 	 */
