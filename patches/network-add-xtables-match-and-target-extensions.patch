Add extensions modules for match and target for (x)tables.

diff --git a/include/linux/netfilter/xt_ERSPAN.h b/include/linux/netfilter/xt_ERSPAN.h
new file mode 100644
index 0000000..cc210cf
--- /dev/null
+++ b/include/linux/netfilter/xt_ERSPAN.h
@@ -0,0 +1,14 @@
+#ifndef _XT_ERSPAN_TARGET_H
+#define _XT_ERSPAN_TARGET_H
+
+struct xt_erspan_tginfo {
+	union nf_inet_addr src_ip;
+	union nf_inet_addr dst_ip;
+	__u8 ttl;
+	__u8 prec;
+
+	/* used internally by the kernel */
+	struct xt_erspan_priv *priv __attribute__((aligned(8)));
+};
+
+#endif /* _XT_ERSPAN_TARGET_H */
diff --git a/include/linux/netfilter/xt_POLICE.h b/include/linux/netfilter/xt_POLICE.h
new file mode 100644
index 0000000..d7918d1
--- /dev/null
+++ b/include/linux/netfilter/xt_POLICE.h
@@ -0,0 +1,50 @@
+#ifndef _XT_POLICE_TARGET_H
+#define _XT_POLICE_TARGET_H
+
+#define XT_POLICE_CLASS    0x01
+#define XT_POLICE_RATE     0x02
+#define XT_POLICE_BURST    0x04
+#define XT_POLICE_MODE     0x08
+#define XT_POLICE_VIOLATE_ACTION        0x10
+#define XT_POLICE_MASK (XT_POLICE_CLASS | XT_POLICE_RATE | XT_POLICE_BURST | XT_POLICE_MODE | \
+			XT_POLICE_VIOLATE_ACTION)
+
+#define XT_POLICE_MIN_CLASS 0
+#define XT_POLICE_MAX_CLASS 7
+
+#define XT_POLICE_MIN_RATE  1
+#define XT_POLICE_MAX_RATE  200000
+
+#define XT_POLICE_MIN_BURST 1
+#define XT_POLICE_MAX_BURST 2000
+
+#define XT_POLICE_MODE_PPS  0
+#define XT_POLICE_MODE_KB   1
+
+/* POLICE ACTION */
+typedef enum {
+	XT_POLICE_ACTION_PERMIT = 0,
+	XT_POLICE_ACTION_DENY,
+	XT_POLICE_ACTION_MAX_FIELD
+} xt_police_action_e;
+
+/* Action & DSCP value */
+typedef struct xt_police_action {
+	xt_police_action_e type;
+} xt_police_action_t;
+
+
+struct xt_police_tginfo {
+	__u8  class;
+	__u8  mode;
+	__u16 rate;
+	__u16 burst;
+	__u32 bitmask;
+
+	xt_police_action_t violate_action;
+
+	/* used internally by the kernel */
+	struct xt_police_priv *priv __attribute__((aligned(8)));
+};
+
+#endif /* _XT_POLICE_TARGET_H */
diff --git a/include/linux/netfilter/xt_SETCLASS.h b/include/linux/netfilter/xt_SETCLASS.h
new file mode 100644
index 0000000..be80cd5
--- /dev/null
+++ b/include/linux/netfilter/xt_SETCLASS.h
@@ -0,0 +1,10 @@
+#ifndef _XT_SETCLASS_H
+#define _XT_SETCLASS_H
+
+#include <linux/types.h>
+
+struct xt_setclass_target_info {
+	__u32 priority;
+};
+
+#endif /*_XT_SETCLASS_H */
diff --git a/include/linux/netfilter/xt_SETQOS.h b/include/linux/netfilter/xt_SETQOS.h
new file mode 100644
index 0000000..6a238ca
--- /dev/null
+++ b/include/linux/netfilter/xt_SETQOS.h
@@ -0,0 +1,22 @@
+#ifndef _XT_SETQOS_H
+#define _XT_SETQOS_H
+
+#include <linux/types.h>
+
+#define XT_SETQOS_COS      0x01
+#define XT_SETQOS_DSCP     0x02
+
+#define XT_SETQOS_MIN_COS 0
+#define XT_SETQOS_MAX_COS 7
+
+#define XT_SETQOS_DSCP_MASK    0xfc    /* 11111100 */
+#define XT_SETQOS_DSCP_SHIFT   2
+#define XT_SETQOS_DSCP_MAX     0x3f    /* 00111111 */
+
+struct xt_setqos_target_info {
+     __u8  cos;
+     __u8  dscp;
+     __u8  bitmask;
+};
+
+#endif /*_XT_SETQOS_H */
diff --git a/include/linux/netfilter/xt_SPAN.h b/include/linux/netfilter/xt_SPAN.h
new file mode 100644
index 0000000..74e8cef
--- /dev/null
+++ b/include/linux/netfilter/xt_SPAN.h
@@ -0,0 +1,11 @@
+#ifndef _XT_SPAN_TARGET_H
+#define _XT_SPAN_TARGET_H
+
+struct xt_span_tginfo {
+	char dport[16];
+
+	/* used internally by the kernel */
+	struct xt_span_priv *priv __attribute__((aligned(8)));
+};
+
+#endif /* _XT_SPAN_TARGET_H */
diff --git a/include/linux/netfilter/xt_TRICOLORPOLICE.h b/include/linux/netfilter/xt_TRICOLORPOLICE.h
new file mode 100644
index 0000000..6c242ce
--- /dev/null
+++ b/include/linux/netfilter/xt_TRICOLORPOLICE.h
@@ -0,0 +1,65 @@
+#ifndef _XT_TRICOLORPOLICE_TARGET_H
+#define _XT_TRICOLORPOLICE_TARGET_H
+
+#define XT_TRICOLOR_POLICE_COLOR_MODE            0x01
+#define XT_TRICOLOR_POLICE_CIR                   0x02
+#define XT_TRICOLOR_POLICE_CBS                   0x04
+#define XT_TRICOLOR_POLICE_PIR                   0x08
+#define XT_TRICOLOR_POLICE_EBS                   0x10
+#define XT_TRICOLOR_POLICE_VIOLATE_ACTION        0x20
+#define XT_TRICOLOR_POLICE_CONFORM_ACTION_DSCP   0x40
+#define XT_TRICOLOR_POLICE_EXCEED_ACTION_DSCP    0x80
+#define XT_TRICOLOR_POLICE_VIOLATE_ACTION_DSCP   0x100
+#define XT_TRICOLOR_POLICE_MAX                   0x200
+
+#define XT_TRICOLOR_POLICE_MASK (XT_TRICOLOR_POLICE_MAX - 1)
+
+#define XT_TRICOLOR_POLICE_MIN_CLASS 0
+#define XT_TRICOLOR_POLICE_MAX_CLASS 7
+
+#define XT_TRICOLOR_POLICE_MIN_CIR  0
+#define XT_TRICOLOR_POLICE_MAX_CIR  0xFFFFFFFF
+
+#define XT_TRICOLOR_POLICE_MIN_CBS 0
+#define XT_TRICOLOR_POLICE_MAX_CBS 0xFFFFFFFF
+
+#define XT_TRICOLOR_POLICE_MIN_PIR  0
+#define XT_TRICOLOR_POLICE_MAX_PIR  0xFFFFFFFF
+
+#define XT_TRICOLOR_POLICE_MIN_EBS 0
+#define XT_TRICOLOR_POLICE_MAX_EBS 0xFFFFFFFF
+
+#define XT_TRICOLOR_POLICE_COLOR_MODE_BLIND  0
+#define XT_TRICOLOR_POLICE_COLOR_MODE_AWARE   1
+
+/* TRICOLOR_POLICE ACTION */
+typedef enum {
+	XT_TRICOLOR_POLICE_ACTION_PERMIT = 0,
+	XT_TRICOLOR_POLICE_ACTION_DENY,
+	XT_TRICOLOR_POLICE_ACTION_MAX_FIELD
+} xt_tricolor_police_action_e;
+
+/* Action & DSCP value */
+typedef struct xt_tricolor_police_action {
+	xt_tricolor_police_action_e type;
+	__u8  dscp_value;
+} xt_tricolor_police_action_t;
+
+
+struct xt_tricolor_police_tginfo {
+	__u8  color_mode;
+	__u32 cir;
+	__u32 cbs;
+	__u32 pir;
+	__u32 ebs;
+	__u32 bitmask;
+
+	xt_tricolor_police_action_t conform_action;
+	xt_tricolor_police_action_t exceed_action;
+	xt_tricolor_police_action_t violate_action;
+
+	/* used internally by the kernel */
+	struct xt_tricolor_police_priv *priv __attribute__((aligned(8)));
+};
+
+#endif /* _XT_TRICOLORPOLICE_TARGET_H */
diff --git a/include/linux/netfilter/xt_addrtype.h b/include/linux/netfilter/xt_addrtype.h
index b156baa..30d1304 100644
--- a/include/linux/netfilter/xt_addrtype.h
+++ b/include/linux/netfilter/xt_addrtype.h
@@ -25,6 +25,7 @@ enum {
 	XT_ADDRTYPE_THROW = 1 << 9,
 	XT_ADDRTYPE_NAT = 1 << 10,
 	XT_ADDRTYPE_XRESOLVE = 1 << 11,
+	XT_ADDRTYPE_IPROUTER = 1 << 12,
 };
 
 struct xt_addrtype_info_v1 {
diff --git a/include/linux/netfilter_bridge/ebt_erspan.h b/include/linux/netfilter_bridge/ebt_erspan.h
new file mode 100644
index 0000000..b2962fc
--- /dev/null
+++ b/include/linux/netfilter_bridge/ebt_erspan.h
@@ -0,0 +1,20 @@
+#ifndef __LINUX_BRIDGE_EBT_ERSPAN_H
+#define __LINUX_BRIDGE_EBT_ERSPAN_H
+
+#define EBT_ERSPAN_SRC_IP 0x01
+#define EBT_ERSPAN_DST_IP 0x02
+#define EBT_ERSPAN_TTL    0x04
+#define EBT_ERSPAN_PREC   0x08
+#define EBT_ERSPAN_MASK (EBT_ERSPAN_SRC_IP | EBT_ERSPAN_DST_IP | EBT_ERSPAN_TTL | EBT_ERSPAN_PREC)
+
+struct ebt_erspan_info {
+        __be32 src_ip;
+        __be32 dst_ip;
+        __u8 ttl;
+        __u8 prec;
+	__u8 bitmask;
+	int target;
+};
+#define EBT_ERSPAN_TARGET "erspan"
+
+#endif
diff --git a/include/linux/netfilter_bridge/ebt_police.h b/include/linux/netfilter_bridge/ebt_police.h
new file mode 100644
index 0000000..8b8e11c
--- /dev/null
+++ b/include/linux/netfilter_bridge/ebt_police.h
@@ -0,0 +1,32 @@
+#ifndef __LINUX_BRIDGE_EBT_POLICE_H
+#define __LINUX_BRIDGE_EBT_POLICE_H
+
+#define EBT_POLICE_CLASS  0x01
+#define EBT_POLICE_RATE   0x02
+#define EBT_POLICE_BURST  0x04
+#define EBT_POLICE_MODE   0x08
+#define EBT_POLICE_MASK (EBT_POLICE_CLASS | EBT_POLICE_RATE | EBT_POLICE_BURST | EBT_POLICE_MODE)
+
+#define EBT_POLICE_MIN_CLASS 0
+#define EBT_POLICE_MAX_CLASS 7
+
+#define EBT_POLICE_MIN_RATE  1
+#define EBT_POLICE_MAX_RATE  200000
+
+#define EBT_POLICE_MIN_BURST 1
+#define EBT_POLICE_MAX_BURST 2000
+
+#define EBT_POLICE_MODE_PPS  0
+#define EBT_POLICE_MODE_KB   1
+
+struct ebt_police_info {
+        __u8  class;
+	__u8  mode;
+        __u16 rate;
+        __u16 burst;
+	__u8  bitmask;
+	int target;
+};
+#define EBT_POLICE_TARGET "police"
+
+#endif
diff --git a/include/linux/netfilter_bridge/ebt_setclass.h b/include/linux/netfilter_bridge/ebt_setclass.h
new file mode 100644
index 0000000..99a8d07
--- /dev/null
+++ b/include/linux/netfilter_bridge/ebt_setclass.h
@@ -0,0 +1,16 @@
+#ifndef __LINUX_BRIDGE_EBT_SETCLASS_H
+#define __LINUX_BRIDGE_EBT_SETCLASS_H
+
+#define EBT_POLICE_CLASS  0x01
+
+#define EBT_POLICE_MIN_CLASS 0
+#define EBT_POLICE_MAX_CLASS 7
+
+struct ebt_setclass_info {
+        __u8  class;
+        __u8  bitmask;
+        int target;
+};
+#define EBT_SETCLASS_TARGET "setclass"
+
+#endif
diff --git a/include/linux/netfilter_bridge/ebt_span.h b/include/linux/netfilter_bridge/ebt_span.h
new file mode 100644
index 0000000..1f1b935
--- /dev/null
+++ b/include/linux/netfilter_bridge/ebt_span.h
@@ -0,0 +1,14 @@
+#ifndef __LINUX_BRIDGE_EBT_SPAN_H
+#define __LINUX_BRIDGE_EBT_SPAN_H
+
+#define EBT_SPAN_DPORT 0x01
+#define EBT_SPAN_MASK (EBT_ERSPAN_DPORT)
+
+struct ebt_span_info {
+	char dport[16];
+	__u8  bitmask;
+	int target;
+};
+#define EBT_SPAN_TARGET "span"
+
+#endif
diff --git a/include/linux/netfilter_bridge/ebt_tricolorpolice.h b/include/linux/netfilter_bridge/ebt_tricolorpolice.h
new file mode 100644
index 0000000..78b65c5
--- /dev/null
+++ b/include/linux/netfilter_bridge/ebt_tricolorpolice.h
@@ -0,0 +1,62 @@
+#ifndef __LINUX_BRIDGE_EBT_TRICOLORPOLICE_H
+#define __LINUX_BRIDGE_EBT_TRICOLORPOLICE_H
+
+#define EBT_TRICOLOR_POLICE_COLOR_MODE            0x01
+#define EBT_TRICOLOR_POLICE_CIR                   0x02
+#define EBT_TRICOLOR_POLICE_CBS                   0x04
+#define EBT_TRICOLOR_POLICE_PIR                   0x08
+#define EBT_TRICOLOR_POLICE_EBS                   0x10
+#define EBT_TRICOLOR_POLICE_VIOLATE_ACTION        0x20
+#define EBT_TRICOLOR_POLICE_CONFORM_ACTION_DSCP   0x40
+#define EBT_TRICOLOR_POLICE_EXCEED_ACTION_DSCP    0x80
+#define EBT_TRICOLOR_POLICE_VIOLATE_ACTION_DSCP   0x100
+#define EBT_TRICOLOR_POLICE_MAX                   0x200
+
+#define EBT_TRICOLOR_POLICE_MASK (EBT_TRICOLOR_POLICE_MAX - 1)
+
+#define EBT_TRICOLOR_POLICE_MIN_CLASS 0
+#define EBT_TRICOLOR_POLICE_MAX_CLASS 7
+
+#define EBT_TRICOLOR_POLICE_MIN_CIR  0
+#define EBT_TRICOLOR_POLICE_MAX_CIR  0xFFFFFFFF
+
+#define EBT_TRICOLOR_POLICE_MIN_CBS 0
+#define EBT_TRICOLOR_POLICE_MAX_CBS 0xFFFFFFFF
+
+#define EBT_TRICOLOR_POLICE_MIN_PIR  0
+#define EBT_TRICOLOR_POLICE_MAX_PIR  0xFFFFFFFF
+
+#define EBT_TRICOLOR_POLICE_MIN_EBS 0
+#define EBT_TRICOLOR_POLICE_MAX_EBS 0xFFFFFFFF
+
+#define EBT_TRICOLOR_POLICE_COLOR_MODE_BLIND  0
+#define EBT_TRICOLOR_POLICE_COLOR_MODE_AWARE  1
+
+/* TRICOLOR_POLICE ACTION */
+typedef enum {
+	EBT_TRICOLOR_POLICE_ACTION_PERMIT = 0,
+	EBT_TRICOLOR_POLICE_ACTION_DENY,
+	EBT_TRICOLOR_POLICE_ACTION_MAX_FIELD
+} ebt_tricolor_police_action_e;
+
+/* Action & DSCP value */
+typedef struct ebt_tricolor_police_action {
+	ebt_tricolor_police_action_e type;
+	__u8  dscp_value;
+} ebt_tricolor_police_action_t;
+
+struct ebt_tricolor_police_info {
+	__u8  color_mode;
+	__u32 cir;
+	__u32 cbs;
+	__u32 pir;
+	__u32 ebs;
+	__u32 bitmask;
+
+	ebt_tricolor_police_action_t conform_action;
+	ebt_tricolor_police_action_t exceed_action;
+	ebt_tricolor_police_action_t violate_action;
+};
+#define EBT_TRICOLORPOLICE_TARGET "tricolorpolice"
+
+#endif /* __LINUX_BRIDGE_EBT_TRICOLORPOLICE_H */
diff --git a/net/bridge/netfilter/Kconfig b/net/bridge/netfilter/Kconfig
index a9aff9c..f298b47 100644
--- a/net/bridge/netfilter/Kconfig
+++ b/net/bridge/netfilter/Kconfig
@@ -218,4 +218,39 @@ config BRIDGE_EBT_NFLOG
 
 	  To compile it as a module, choose M here.  If unsure, say N.
 
+config BRIDGE_EBT_ERSPAN
+        tristate "ebt: erspan support"
+        help
+          This option enables the support for ERSPAN
+
+          To compile it as a module, choose M here.  If unsure, say N.
+
+config BRIDGE_EBT_SPAN
+        tristate "ebt: span support"
+        help
+          This option enables the support for SPAN
+
+          To compile it as a module, choose M here.  If unsure, say N.
+
+config BRIDGE_EBT_POLICE
+        tristate "ebt: traffic policing support"
+        help
+          This option enables the support for traffic policing
+
+          To compile it as a module, choose M here.  If unsure, say N.
+
+config BRIDGE_EBT_TRICOLORPOLICE
+        tristate "ebt: traffic tricolorpolicing support"
+        help
+          This option enables the support for 3 color traffic policing
+
+          To compile it as a module, choose M here.  If unsure, say N.
+
+config BRIDGE_EBT_SETCLASS
+        tristate "ebt: set ingress traffic class"
+        help
+          This option enables the support for setting ingress traffic class
+
+          To compile it as a module, choose M here.  If unsure, say N.
+
 endif # BRIDGE_NF_EBTABLES
diff --git a/net/bridge/netfilter/Makefile b/net/bridge/netfilter/Makefile
index 0718699..678094e 100644
--- a/net/bridge/netfilter/Makefile
+++ b/net/bridge/netfilter/Makefile
@@ -27,6 +27,11 @@ obj-$(CONFIG_BRIDGE_EBT_MARK_T) += ebt_mark.o
 obj-$(CONFIG_BRIDGE_EBT_DNAT) += ebt_dnat.o
 obj-$(CONFIG_BRIDGE_EBT_REDIRECT) += ebt_redirect.o
 obj-$(CONFIG_BRIDGE_EBT_SNAT) += ebt_snat.o
+obj-$(CONFIG_BRIDGE_EBT_ERSPAN) += ebt_erspan.o
+obj-$(CONFIG_BRIDGE_EBT_SPAN) += ebt_span.o
+obj-$(CONFIG_BRIDGE_EBT_POLICE) += ebt_police.o
+obj-$(CONFIG_BRIDGE_EBT_TRICOLORPOLICE) += ebt_tricolorpolice.o
+obj-$(CONFIG_BRIDGE_EBT_SETCLASS) += ebt_setclass.o
 
 # watchers
 obj-$(CONFIG_BRIDGE_EBT_LOG) += ebt_log.o
diff --git a/net/bridge/netfilter/ebt_erspan.c b/net/bridge/netfilter/ebt_erspan.c
new file mode 100644
index 0000000..d1503bf
--- /dev/null
+++ b/net/bridge/netfilter/ebt_erspan.c
@@ -0,0 +1,54 @@
+/*
+ *  ebt_erspan
+ *
+ *  Copyright 2013 Cumulus Networks, LLC.  All rights reserved.
+ *
+ *	Authors:
+ *	Wilson Kok <wkok@cumulusnetworks.com>
+ *
+ */
+#include <linux/module.h>
+#include <net/sock.h>
+#include "../br_private.h"
+#include <linux/netfilter.h>
+#include <linux/netfilter/x_tables.h>
+#include <linux/netfilter_bridge/ebtables.h>
+#include <linux/netfilter_bridge/ebt_erspan.h>
+
+static unsigned int
+ebt_erspan_tg(struct sk_buff *skb, const struct xt_action_param *par)
+{
+	return EBT_CONTINUE;
+}
+
+static int ebt_erspan_tg_check(const struct xt_tgchk_param *par)
+{
+	return 0;
+}
+
+static struct xt_target ebt_erspan_tg_reg __read_mostly = {
+	.name		= "erspan",
+	.revision	= 0,
+	.family		= NFPROTO_BRIDGE,
+	.hooks		= (1 << NF_BR_NUMHOOKS) | (1 << NF_BR_LOCAL_IN) |
+			  (1 << NF_BR_FORWARD) | (1 << NF_BR_LOCAL_OUT),
+	.target		= ebt_erspan_tg,
+	.checkentry	= ebt_erspan_tg_check,
+	.targetsize	= sizeof(struct ebt_erspan_info),
+	.me		= THIS_MODULE,
+};
+
+static int __init ebt_erspan_init(void)
+{
+	return xt_register_target(&ebt_erspan_tg_reg);
+}
+
+static void __exit ebt_erspan_fini(void)
+{
+	xt_unregister_target(&ebt_erspan_tg_reg);
+}
+
+module_init(ebt_erspan_init);
+module_exit(ebt_erspan_fini);
+MODULE_DESCRIPTION("Ebtables: Encapsulated Remote Switch Port Analyzer");
+MODULE_LICENSE("GPL");
diff --git a/net/bridge/netfilter/ebt_police.c b/net/bridge/netfilter/ebt_police.c
new file mode 100644
index 0000000..a0603cb
--- /dev/null
+++ b/net/bridge/netfilter/ebt_police.c
@@ -0,0 +1,51 @@
+/*
+ *  ebt_police
+ *
+ *  Copyright 2013 Cumulus Networks, LLC.  All rights reserved.
+ *
+ *	Authors:
+ *	Wilson Kok <wkok@cumulusnetworks.com>
+ *
+ */
+#include <linux/module.h>
+#include <linux/netfilter/x_tables.h>
+#include <linux/netfilter_bridge/ebtables.h>
+#include <linux/netfilter_bridge/ebt_police.h>
+
+static unsigned int
+ebt_police_tg(struct sk_buff *skb, const struct xt_action_param *par)
+{
+	return EBT_ACCEPT;
+}
+
+static int ebt_police_tg_check(const struct xt_tgchk_param *par)
+{
+	return 0;
+}
+
+static struct xt_target ebt_police_tg_reg __read_mostly = {
+	.name		= "police",
+	.revision	= 0,
+	.family		= NFPROTO_BRIDGE,
+	.hooks		= (1 << NF_BR_NUMHOOKS) | (1 << NF_BR_LOCAL_IN) |
+			  (1 << NF_BR_FORWARD),
+	.target		= ebt_police_tg,
+	.checkentry	= ebt_police_tg_check,
+	.targetsize	= sizeof(struct ebt_police_info),
+	.me		= THIS_MODULE,
+};
+
+static int __init ebt_police_init(void)
+{
+	return xt_register_target(&ebt_police_tg_reg);
+}
+
+static void __exit ebt_police_fini(void)
+{
+	xt_unregister_target(&ebt_police_tg_reg);
+}
+
+module_init(ebt_police_init);
+module_exit(ebt_police_fini);
+MODULE_DESCRIPTION("Ebtables: Packet policing support");
+MODULE_LICENSE("GPL");
diff --git a/net/bridge/netfilter/ebt_setclass.c b/net/bridge/netfilter/ebt_setclass.c
new file mode 100644
index 0000000..317293b
--- /dev/null
+++ b/net/bridge/netfilter/ebt_setclass.c
@@ -0,0 +1,51 @@
+/*
+ *  ebt_setclass
+ *
+ *  Copyright 2013 Cumulus Networks, LLC.  All rights reserved.
+ *
+ *	Authors:
+ *	Wilson Kok <wkok@cumulusnetworks.com>
+ *
+ */
+#include <linux/module.h>
+#include <linux/netfilter/x_tables.h>
+#include <linux/netfilter_bridge/ebtables.h>
+#include <linux/netfilter_bridge/ebt_setclass.h>
+
+static unsigned int
+ebt_setclass_tg(struct sk_buff *skb, const struct xt_action_param *par)
+{
+	return EBT_ACCEPT;
+}
+
+static int ebt_setclass_tg_check(const struct xt_tgchk_param *par)
+{
+	return 0;
+}
+
+static struct xt_target ebt_setclass_tg_reg __read_mostly = {
+	.name		= "setclass",
+	.revision	= 0,
+	.family		= NFPROTO_BRIDGE,
+	.hooks		= (1 << NF_BR_NUMHOOKS) | (1 << NF_BR_LOCAL_IN) |
+			  (1 << NF_BR_FORWARD),
+	.target		= ebt_setclass_tg,
+	.checkentry	= ebt_setclass_tg_check,
+	.targetsize	= sizeof(struct ebt_setclass_info),
+	.me		= THIS_MODULE,
+};
+
+static int __init ebt_setclass_init(void)
+{
+	return xt_register_target(&ebt_setclass_tg_reg);
+}
+
+static void __exit ebt_setclass_fini(void)
+{
+	xt_unregister_target(&ebt_setclass_tg_reg);
+}
+
+module_init(ebt_setclass_init);
+module_exit(ebt_setclass_fini);
+MODULE_DESCRIPTION("Ebtables: Ingress classification");
+MODULE_LICENSE("GPL");
diff --git a/net/bridge/netfilter/ebt_span.c b/net/bridge/netfilter/ebt_span.c
new file mode 100644
index 0000000..2846ba3
--- /dev/null
+++ b/net/bridge/netfilter/ebt_span.c
@@ -0,0 +1,53 @@
+/*
+ *  ebt_span
+ *
+ *  Copyright 2013 Cumulus Networks, LLC.  All rights reserved.
+ *
+ *	Authors:
+ *	Wilson Kok <wkok@cumulusnetworks.com>
+ */
+#include <linux/module.h>
+#include <net/sock.h>
+#include "../br_private.h"
+#include <linux/netfilter.h>
+#include <linux/netfilter/x_tables.h>
+#include <linux/netfilter_bridge/ebtables.h>
+#include <linux/netfilter_bridge/ebt_span.h>
+
+static unsigned int
+ebt_span_tg(struct sk_buff *skb, const struct xt_action_param *par)
+{
+	return EBT_CONTINUE;
+}
+
+static int ebt_span_tg_check(const struct xt_tgchk_param *par)
+{
+	return 0;
+}
+
+static struct xt_target ebt_span_tg_reg __read_mostly = {
+	.name		= "span",
+	.revision	= 0,
+	.family		= NFPROTO_BRIDGE,
+	.hooks		= (1 << NF_BR_NUMHOOKS) | (1 << NF_BR_LOCAL_IN) |
+			  (1 << NF_BR_FORWARD) | (1 << NF_BR_LOCAL_OUT),
+	.target		= ebt_span_tg,
+	.checkentry	= ebt_span_tg_check,
+	.targetsize	= sizeof(struct ebt_span_info),
+	.me		= THIS_MODULE,
+};
+
+static int __init ebt_span_init(void)
+{
+	return xt_register_target(&ebt_span_tg_reg);
+}
+
+static void __exit ebt_span_fini(void)
+{
+	xt_unregister_target(&ebt_span_tg_reg);
+}
+
+module_init(ebt_span_init);
+module_exit(ebt_span_fini);
+MODULE_DESCRIPTION("Ebtables: Switch Port Analyzer");
+MODULE_LICENSE("GPL");
diff --git a/net/bridge/netfilter/ebt_tricolorpolice.c b/net/bridge/netfilter/ebt_tricolorpolice.c
new file mode 100644
index 0000000..9a878ca
--- /dev/null
+++ b/net/bridge/netfilter/ebt_tricolorpolice.c
@@ -0,0 +1,51 @@
+/*
+ *  ebt_tricolorpolice
+ *
+ *  Copyright 2013 Cumulus Networks, LLC.  All rights reserved.
+ *
+ *	Authors:
+ *	James Li <jli@cumulusnetworks.com>
+ *
+ */
+#include <linux/module.h>
+#include <linux/netfilter/x_tables.h>
+#include <linux/netfilter_bridge/ebtables.h>
+#include <linux/netfilter_bridge/ebt_tricolorpolice.h>
+
+static unsigned int
+ebt_tricolorpolice_tg(struct sk_buff *skb, const struct xt_action_param *par)
+{
+	return EBT_ACCEPT;
+}
+
+static int ebt_tricolorpolice_tg_check(const struct xt_tgchk_param *par)
+{
+	return 0;
+}
+
+static struct xt_target ebt_tricolorpolice_tg_reg __read_mostly = {
+	.name		= "tricolorpolice",
+	.revision	= 0,
+	.family		= NFPROTO_BRIDGE,
+	.hooks		= (1 << NF_BR_NUMHOOKS) | (1 << NF_BR_LOCAL_IN) |
+			  (1 << NF_BR_FORWARD),
+	.target		= ebt_tricolorpolice_tg,
+	.checkentry	= ebt_tricolorpolice_tg_check,
+	.targetsize	= sizeof(struct ebt_tricolor_police_info),
+	.me		= THIS_MODULE,
+};
+
+static int __init ebt_tricolorpolice_init(void)
+{
+	return xt_register_target(&ebt_tricolorpolice_tg_reg);
+}
+
+static void __exit ebt_tricolorpolice_fini(void)
+{
+	xt_unregister_target(&ebt_tricolorpolice_tg_reg);
+}
+
+module_init(ebt_tricolorpolice_init);
+module_exit(ebt_tricolorpolice_fini);
+MODULE_DESCRIPTION("Ebtables: Packet three color policing support");
+MODULE_LICENSE("GPL");
diff --git a/net/netfilter/Kconfig b/net/netfilter/Kconfig
index d5597b7..b3dd036 100644
--- a/net/netfilter/Kconfig
+++ b/net/netfilter/Kconfig
@@ -643,6 +643,48 @@ config NETFILTER_XT_TARGET_TCPOPTSTRIP
 	  This option adds a "TCPOPTSTRIP" target, which allows you to strip
 	  TCP options from TCP packets.
 
+config NETFILTER_XT_TARGET_ERSPAN
+        tristate '"ERSPAN" - packet cloning to alternate destination'
+        depends on NETFILTER_ADVANCED
+        ---help---
+        This option adds a "ERSPAN" target with which a packet can be cloned and
+        this clone be rerouted to another nexthop.
+
+config NETFILTER_XT_TARGET_SPAN
+        tristate '"SPAN" - packet cloning to a local port'
+        depends on NETFILTER_ADVANCED
+        ---help---
+        This option adds a "SPAN" target with which a packet can be cloned and
+        this clone be forwarded out of a designated local port.
+
+config NETFILTER_XT_TARGET_POLICE
+        tristate '"POLICE" - policing packets'
+        depends on NETFILTER_ADVANCED
+        ---help---
+        This option adds a "POLICE" target with which the rate of traffic is
+        limited to a set rate and burst.
+
+config NETFILTER_XT_TARGET_TRICOLORPOLICE
+        tristate '"TRICOLORPOLICE" - 3 color policing packets'
+        depends on NETFILTER_ADVANCED
+        ---help---
+        This option adds a "TRICOLORPOLICE" target
+
+config NETFILTER_XT_TARGET_SETCLASS
+        tristate '"SETCLASS" - setting ingress traffic class'
+        depends on NETFILTER_ADVANCED
+        ---help---
+        This option adds a "SETCLASS" target with which the traffic class is
+        set at the ingress of the datapath.
+
+config NETFILTER_XT_TARGET_SETQOS
+        tristate '"SETQOS" - setting ingress traffic class'
+        depends on NETFILTER_ADVANCED
+        ---help---
+        This option adds a "SETQOS" target with which the traffic class is
+        set at the ingress of the datapath.
+
+
 # alphabetically ordered list of matches
 
 comment "Xtables matches"
diff --git a/net/netfilter/Makefile b/net/netfilter/Makefile
index 1a02853..5016031 100644
--- a/net/netfilter/Makefile
+++ b/net/netfilter/Makefile
@@ -66,6 +66,12 @@ obj-$(CONFIG_NETFILTER_XT_TARGET_TPROXY) += xt_TPROXY.o
 obj-$(CONFIG_NETFILTER_XT_TARGET_TCPMSS) += xt_TCPMSS.o
 obj-$(CONFIG_NETFILTER_XT_TARGET_TCPOPTSTRIP) += xt_TCPOPTSTRIP.o
 obj-$(CONFIG_NETFILTER_XT_TARGET_TEE) += xt_TEE.o
+obj-$(CONFIG_NETFILTER_XT_TARGET_ERSPAN) += xt_ERSPAN.o
+obj-$(CONFIG_NETFILTER_XT_TARGET_SPAN) += xt_SPAN.o
+obj-$(CONFIG_NETFILTER_XT_TARGET_POLICE) += xt_POLICE.o
+obj-$(CONFIG_NETFILTER_XT_TARGET_TRICOLORPOLICE) += xt_TRICOLORPOLICE.o
+obj-$(CONFIG_NETFILTER_XT_TARGET_SETCLASS) += xt_SETCLASS.o
+obj-$(CONFIG_NETFILTER_XT_TARGET_SETQOS) += xt_SETQOS.o
 obj-$(CONFIG_NETFILTER_XT_TARGET_TRACE) += xt_TRACE.o
 obj-$(CONFIG_NETFILTER_XT_TARGET_IDLETIMER) += xt_IDLETIMER.o
 
diff --git a/net/netfilter/xt_ERSPAN.c b/net/netfilter/xt_ERSPAN.c
new file mode 100644
index 0000000..c2b8b5a
--- /dev/null
+++ b/net/netfilter/xt_ERSPAN.c
@@ -0,0 +1,135 @@
+/*
+ *	"ERSPAN" target extension for Xtables
+ *	Copyright 2013 Cumulus Networks, LLC.  All rights reserved.
+ *
+ *	This program is free software; you can redistribute it and/or
+ *	modify it under the terms of the GNU General Public License
+ *	version 2 or later, as published by the Free Software Foundation.
+ */
+#include <linux/ip.h>
+#include <linux/module.h>
+#include <linux/percpu.h>
+#include <linux/route.h>
+#include <linux/skbuff.h>
+#include <linux/notifier.h>
+#include <net/checksum.h>
+#include <net/icmp.h>
+#include <net/ip.h>
+#include <net/ipv6.h>
+#include <net/ip6_route.h>
+#include <net/route.h>
+#include <linux/netfilter/x_tables.h>
+#include <linux/netfilter/xt_ERSPAN.h>
+
+#if defined(CONFIG_NF_CONNTRACK) || defined(CONFIG_NF_CONNTRACK_MODULE)
+#	define WITH_CONNTRACK 1
+#	include <net/netfilter/nf_conntrack.h>
+#endif
+#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
+#	define WITH_IPV6 1
+#endif
+
+struct xt_erspan_priv {
+	struct notifier_block	notifier;
+	struct xt_erspan_tginfo	*tginfo;
+	int			oif;
+};
+
+static const union nf_inet_addr erspan_zero_address;
+
+static struct net *pick_net(struct sk_buff *skb)
+{
+#ifdef CONFIG_NET_NS
+	const struct dst_entry *dst;
+
+	if (skb->dev != NULL)
+		return dev_net(skb->dev);
+	dst = skb_dst(skb);
+	if (dst != NULL && dst->dev != NULL)
+		return dev_net(dst->dev);
+#endif
+	return &init_net;
+}
+
+static unsigned int
+erspan_tg4(struct sk_buff *skb, const struct xt_action_param *par)
+{
+	return XT_CONTINUE;
+}
+
+#ifdef WITH_IPV6
+static unsigned int
+erspan_tg6(struct sk_buff *skb, const struct xt_action_param *par)
+{
+	return XT_CONTINUE;
+}
+#endif /* WITH_IPV6 */
+
+static int erspan_tg_check(const struct xt_tgchk_param *par)
+{
+	struct xt_erspan_tginfo *info = par->targinfo;
+
+	/* 0.0.0.0 and :: not allowed */
+	if (memcmp(&info->src_ip, &erspan_zero_address,
+		   sizeof(erspan_zero_address)) == 0)
+		return -EINVAL;
+
+	if (memcmp(&info->dst_ip, &erspan_zero_address,
+		  sizeof(erspan_zero_address)) == 0)
+		return -EINVAL;
+
+	return 0;
+}
+
+static void erspan_tg_destroy(const struct xt_tgdtor_param *par)
+{
+	struct xt_erspan_tginfo *info = par->targinfo;
+
+	if (info->priv) {
+		unregister_netdevice_notifier(&info->priv->notifier);
+		kfree(info->priv);
+	}
+}
+
+static struct xt_target erspan_tg_reg[] __read_mostly = {
+	{
+		.name       = "ERSPAN",
+		.revision   = 1,
+		.family     = NFPROTO_IPV4,
+		.target     = erspan_tg4,
+		.targetsize = sizeof(struct xt_erspan_tginfo),
+		.checkentry = erspan_tg_check,
+		.destroy    = erspan_tg_destroy,
+		.me         = THIS_MODULE,
+	},
+#ifdef WITH_IPV6
+	{
+		.name       = "ERSPAN",
+		.revision   = 1,
+		.family     = NFPROTO_IPV6,
+		.target     = erspan_tg6,
+		.targetsize = sizeof(struct xt_erspan_tginfo),
+		.checkentry = erspan_tg_check,
+		.destroy    = erspan_tg_destroy,
+		.me         = THIS_MODULE,
+	},
+#endif
+};
+
+static int __init erspan_tg_init(void)
+{
+	return xt_register_targets(erspan_tg_reg, ARRAY_SIZE(erspan_tg_reg));
+}
+
+static void __exit erspan_tg_exit(void)
+{
+	xt_unregister_targets(erspan_tg_reg, ARRAY_SIZE(erspan_tg_reg));
+}
+
+module_init(erspan_tg_init);
+module_exit(erspan_tg_exit);
+MODULE_AUTHOR("Wilson Kok <wkok@cumulusnetworks.com>");
+MODULE_DESCRIPTION("Xtables: Encapsulated Remote Switch Port Analyzer");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("ipt_ERSPAN");
+MODULE_ALIAS("ip6t_ERSPAN");
diff --git a/net/netfilter/xt_POLICE.c b/net/netfilter/xt_POLICE.c
new file mode 100644
index 0000000..fdd6415
--- /dev/null
+++ b/net/netfilter/xt_POLICE.c
@@ -0,0 +1,82 @@
+/*
+ *	"POLICE" target extension for Xtables
+ *	Copyright 2013 Cumulus Networks, LLC.  All rights reserved.
+ *
+ *	This program is free software; you can redistribute it and/or
+ *	modify it under the terms of the GNU General Public License
+ *	version 2 or later, as published by the Free Software Foundation.
+ */
+#include <linux/ip.h>
+#include <linux/module.h>
+#include <linux/percpu.h>
+#include <linux/route.h>
+#include <linux/skbuff.h>
+#include <linux/notifier.h>
+#include <net/checksum.h>
+#include <net/icmp.h>
+#include <net/ip.h>
+#include <net/ipv6.h>
+#include <net/ip6_route.h>
+#include <net/route.h>
+#include <linux/netfilter/x_tables.h>
+#include <linux/netfilter/xt_POLICE.h>
+
+struct xt_police_priv {
+	struct notifier_block	notifier;
+	struct xt_police_tginfo	*tginfo;
+};
+
+static unsigned int
+police_tg(struct sk_buff *skb, const struct xt_action_param *par)
+{
+	return NF_ACCEPT;
+}
+
+static int police_tg_check(const struct xt_tgchk_param *par)
+{
+	struct xt_police_tginfo *info = par->targinfo;
+
+	if (info->class > XT_POLICE_MAX_CLASS)
+		return -EINVAL;
+	if (info->rate < XT_POLICE_MIN_RATE || info->rate > XT_POLICE_MAX_RATE)
+		return -EINVAL;
+	if (info->burst < XT_POLICE_MIN_BURST || info->burst > XT_POLICE_MAX_BURST)
+		return -EINVAL;
+
+	return 0;
+}
+
+static void police_tg_destroy(const struct xt_tgdtor_param *par)
+{
+}
+
+static struct xt_target police_tg_reg[] __read_mostly = {
+	{
+		.name       = "POLICE",
+		.revision   = 1,
+		.family     = NFPROTO_UNSPEC,
+		.target     = police_tg,
+		.targetsize = sizeof(struct xt_police_tginfo),
+		.checkentry = police_tg_check,
+		.destroy    = police_tg_destroy,
+		.me         = THIS_MODULE,
+	},
+};
+
+static int __init police_tg_init(void)
+{
+	return xt_register_targets(police_tg_reg, ARRAY_SIZE(police_tg_reg));
+}
+
+static void __exit police_tg_exit(void)
+{
+	xt_unregister_targets(police_tg_reg, ARRAY_SIZE(police_tg_reg));
+}
+
+module_init(police_tg_init);
+module_exit(police_tg_exit);
+MODULE_AUTHOR("Wilson Kok <wkok@cumuusnetworks.com>");
+MODULE_DESCRIPTION("Xtables: Policing");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("ipt_POLICE");
+MODULE_ALIAS("ip6t_POLICE");
diff --git a/net/netfilter/xt_SETCLASS.c b/net/netfilter/xt_SETCLASS.c
new file mode 100644
index 0000000..6a1667a
--- /dev/null
+++ b/net/netfilter/xt_SETCLASS.c
@@ -0,0 +1,73 @@
+/*
+ *      "SETCLASS" target extension for Xtables
+ *      Copyright 2013 Cumulus Networks, LLC.  All rights reserved.
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/skbuff.h>
+#include <linux/ip.h>
+#include <net/checksum.h>
+
+#include <linux/netfilter_ipv4.h>
+#include <linux/netfilter_ipv6.h>
+#include <linux/netfilter/x_tables.h>
+#include <linux/netfilter/xt_SETCLASS.h>
+#include <linux/netfilter_arp.h>
+
+MODULE_AUTHOR("Wilson Kok <wkok@cumulusnetworks.com>");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Xtables: Ingress classification");
+MODULE_ALIAS("ipt_SETCLASS");
+MODULE_ALIAS("ip6t_SETCLASS");
+MODULE_ALIAS("arpt_SETCLASS");
+
+static unsigned int
+setclass_tg(struct sk_buff *skb, const struct xt_action_param *par)
+{
+	const struct xt_setclass_target_info *clinfo = par->targinfo;
+
+	skb->priority = clinfo->priority;
+
+	return NF_ACCEPT;
+}
+
+static struct xt_target setclass_tg_reg[] __read_mostly = {
+	{
+		.name       = "SETCLASS",
+		.revision   = 0,
+		.family     = NFPROTO_UNSPEC,
+		.hooks      = (1 << NF_INET_LOCAL_IN) | (1 << NF_INET_FORWARD) |
+		              (1 << NF_INET_PRE_ROUTING),
+		.target     = setclass_tg,
+		.targetsize = sizeof(struct xt_setclass_target_info),
+		.me         = THIS_MODULE,
+	},
+	{
+		.name       = "SETCLASS",
+		.revision   = 0,
+		.family     = NFPROTO_ARP,
+		.hooks      = (1 << NF_ARP_IN) | (1 << NF_ARP_FORWARD),
+		.target     = setclass_tg,
+		.targetsize = sizeof(struct xt_setclass_target_info),
+		.me         = THIS_MODULE,
+	},
+};
+
+static int __init setclass_tg_init(void)
+{
+	return xt_register_targets(setclass_tg_reg, ARRAY_SIZE(setclass_tg_reg));
+}
+
+static void __exit setclass_tg_exit(void)
+{
+	xt_unregister_targets(setclass_tg_reg, ARRAY_SIZE(setclass_tg_reg));
+}
+
+module_init(setclass_tg_init);
+module_exit(setclass_tg_exit);
diff --git a/net/netfilter/xt_SETQOS.c b/net/netfilter/xt_SETQOS.c
new file mode 100644
index 0000000..fe32312
--- /dev/null
+++ b/net/netfilter/xt_SETQOS.c
@@ -0,0 +1,77 @@
+/*
+ *      "SETQOS" target extension for Xtables
+ *      Copyright 2013 Cumulus Networks, LLC.  All rights reserved.
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/skbuff.h>
+#include <linux/ip.h>
+#include <net/checksum.h>
+
+#include <linux/netfilter_ipv4.h>
+#include <linux/netfilter_ipv6.h>
+#include <linux/netfilter/x_tables.h>
+#include <linux/netfilter/xt_SETQOS.h>
+#include <linux/netfilter_arp.h>
+
+static unsigned int
+setqos_tg(struct sk_buff *skb, const struct xt_action_param *par)
+{
+    return NF_ACCEPT;
+}
+
+static int setqos_tg_check(const struct xt_tgchk_param *par)
+{
+	struct xt_setqos_target_info *info = par->targinfo;
+
+	if (info->cos < XT_SETQOS_MIN_COS || info->cos > XT_SETQOS_MAX_COS)
+		return -EINVAL;
+
+	if (info->dscp > XT_SETQOS_DSCP_MAX) {
+		pr_info("dscp %x out of range\n", info->dscp);
+		return -EDOM;
+	}
+
+	return 0;
+}
+
+static void setqos_tg_destroy(const struct xt_tgdtor_param *par)
+{
+}
+
+static struct xt_target setqos_tg_reg[] __read_mostly = {
+	{
+		.name       = "SETQOS",
+		.revision   = 1,
+		.family     = NFPROTO_UNSPEC,
+		.target     = setqos_tg,
+		.targetsize = sizeof(struct xt_setqos_target_info),
+		.checkentry = setqos_tg_check,
+		.destroy    = setqos_tg_destroy,
+		.me         = THIS_MODULE,
+	},
+};
+
+static int __init setqos_tg_init(void)
+{
+	return xt_register_targets(setqos_tg_reg, ARRAY_SIZE(setqos_tg_reg));
+}
+
+static void __exit setqos_tg_exit(void)
+{
+	xt_unregister_targets(setqos_tg_reg, ARRAY_SIZE(setqos_tg_reg));
+}
+
+module_init(setqos_tg_init);
+module_exit(setqos_tg_exit);
+MODULE_AUTHOR("Vidya Ravipati <vidya@cumulusnetworks.com>");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Xtables: Ingress classification");
+MODULE_ALIAS("ipt_SETQOS");
+MODULE_ALIAS("ip6t_SETQOS");
diff --git a/net/netfilter/xt_SPAN.c b/net/netfilter/xt_SPAN.c
new file mode 100644
index 0000000..1120bb2
--- /dev/null
+++ b/net/netfilter/xt_SPAN.c
@@ -0,0 +1,74 @@
+/*
+ *	"SPAN" target extension for Xtables
+ *	Copyright 2013 Cumulus Networks, LLC.  All rights reserved.
+ *
+ *	This program is free software; you can redistribute it and/or
+ *	modify it under the terms of the GNU General Public License
+ *	version 2 or later, as published by the Free Software Foundation.
+ */
+#include <linux/ip.h>
+#include <linux/module.h>
+#include <linux/percpu.h>
+#include <linux/route.h>
+#include <linux/skbuff.h>
+#include <linux/notifier.h>
+#include <net/checksum.h>
+#include <net/icmp.h>
+#include <net/ip.h>
+#include <net/ipv6.h>
+#include <net/ip6_route.h>
+#include <net/route.h>
+#include <linux/netfilter/x_tables.h>
+#include <linux/netfilter/xt_SPAN.h>
+
+struct xt_span_priv {
+	struct notifier_block	notifier;
+	struct xt_span_tginfo	*tginfo;
+};
+
+static unsigned int
+span_tg(struct sk_buff *skb, const struct xt_action_param *par)
+{
+	return XT_CONTINUE;
+}
+
+static int span_tg_check(const struct xt_tgchk_param *par)
+{
+	return 0;
+}
+
+static void span_tg_destroy(const struct xt_tgdtor_param *par)
+{
+	return;
+}
+
+static struct xt_target span_tg_reg[] __read_mostly = {
+	{
+		.name       = "SPAN",
+		.revision   = 1,
+		.family     = NFPROTO_UNSPEC,
+		.target     = span_tg,
+		.targetsize = sizeof(struct xt_span_tginfo),
+		.checkentry = span_tg_check,
+		.destroy    = span_tg_destroy,
+		.me         = THIS_MODULE,
+	},
+};
+
+static int __init span_tg_init(void)
+{
+	return xt_register_targets(span_tg_reg, ARRAY_SIZE(span_tg_reg));
+}
+
+static void __exit span_tg_exit(void)
+{
+	xt_unregister_targets(span_tg_reg, ARRAY_SIZE(span_tg_reg));
+}
+
+module_init(span_tg_init);
+module_exit(span_tg_exit);
+MODULE_AUTHOR("Wilson Kok <wkok@cumulusnetworks.com>");
+MODULE_DESCRIPTION("Xtables: Switch Port Analyzer");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("ipt_SPAN");
+MODULE_ALIAS("ip6t_SPAN");
diff --git a/net/netfilter/xt_TRICOLORPOLICE.c b/net/netfilter/xt_TRICOLORPOLICE.c
new file mode 100644
index 0000000..7750aaa
--- /dev/null
+++ b/net/netfilter/xt_TRICOLORPOLICE.c
@@ -0,0 +1,95 @@
+/*
+ *	"TRICOLORPOLICE" target extension for Xtables
+ *	Copyright 2013 Cumulus Networks, LLC.  All rights reserved.
+ *
+ *	This program is free software; you can redistribute it and/or
+ *	modify it under the terms of the GNU General Public License
+ *	version 2 or later, as published by the Free Software Foundation.
+ */
+#include <linux/ip.h>
+#include <linux/module.h>
+#include <linux/percpu.h>
+#include <linux/route.h>
+#include <linux/skbuff.h>
+#include <linux/notifier.h>
+#include <net/checksum.h>
+#include <net/icmp.h>
+#include <net/ip.h>
+#include <net/ipv6.h>
+#include <net/ip6_route.h>
+#include <net/route.h>
+#include <linux/netfilter/x_tables.h>
+#include <linux/netfilter/xt_TRICOLORPOLICE.h>
+
+struct xt_tricolor_police_priv {
+	struct notifier_block	notifier;
+	struct xt_tricolor_police_tginfo	*tginfo;
+};
+
+static unsigned int
+tricolor_police_tg(struct sk_buff *skb, const struct xt_action_param *par)
+{
+	return NF_ACCEPT;
+}
+
+static int tricolor_police_tg_check(const struct xt_tgchk_param *par)
+{
+	struct xt_tricolor_police_tginfo *info = par->targinfo;
+
+	if ((info->bitmask & XT_TRICOLOR_POLICE_CIR) &&
+	    (info->cir < XT_TRICOLOR_POLICE_MIN_CIR ||
+	     info->cir > XT_TRICOLOR_POLICE_MAX_CIR))
+		return -EINVAL;
+
+	if ((info->bitmask & XT_TRICOLOR_POLICE_CBS) &&
+	    (info->cbs < XT_TRICOLOR_POLICE_MIN_CBS ||
+	     info->cbs > XT_TRICOLOR_POLICE_MAX_CBS))
+		return -EINVAL;
+
+	if ((info->bitmask & XT_TRICOLOR_POLICE_PIR) &&
+	    (info->pir < XT_TRICOLOR_POLICE_MIN_PIR ||
+	     info->pir > XT_TRICOLOR_POLICE_MAX_PIR))
+		return -EINVAL;
+
+	if ((info->bitmask & XT_TRICOLOR_POLICE_EBS) &&
+	    (info->ebs < XT_TRICOLOR_POLICE_MIN_EBS ||
+	     info->ebs > XT_TRICOLOR_POLICE_MAX_EBS))
+		return -EINVAL;
+
+	return 0;
+}
+
+static void tricolor_police_tg_destroy(const struct xt_tgdtor_param *par)
+{
+}
+
+static struct xt_target tricolor_police_tg_reg[] __read_mostly = {
+	{
+		.name       = "TRICOLORPOLICE",
+		.revision   = 1,
+		.family     = NFPROTO_UNSPEC,
+		.target     = tricolor_police_tg,
+		.targetsize = sizeof(struct xt_tricolor_police_tginfo),
+		.checkentry = tricolor_police_tg_check,
+		.destroy    = tricolor_police_tg_destroy,
+		.me         = THIS_MODULE,
+	},
+};
+
+static int __init tricolor_police_tg_init(void)
+{
+	return xt_register_targets(tricolor_police_tg_reg, ARRAY_SIZE(tricolor_police_tg_reg));
+}
+
+static void __exit tricolor_police_tg_exit(void)
+{
+	xt_unregister_targets(tricolor_police_tg_reg, ARRAY_SIZE(tricolor_police_tg_reg));
+}
+
+module_init(tricolor_police_tg_init);
+module_exit(tricolor_police_tg_exit);
+MODULE_AUTHOR("James Li <jli@cumulusnetworks.com>");
+MODULE_DESCRIPTION("Xtables: TriColorPolicing");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("ipt_TRICOLORPOLICE");
+MODULE_ALIAS("ip6t_TRICOLORPOLICE");
diff --git a/net/netfilter/xt_addrtype.c b/net/netfilter/xt_addrtype.c
index b77d383..32cf85d 100644
--- a/net/netfilter/xt_addrtype.c
+++ b/net/netfilter/xt_addrtype.c
@@ -196,7 +196,8 @@ static int addrtype_mt_checkentry_v1(const struct xt_mtchk_param *par)
 			pr_err("ipv6 BLACKHOLE matching not supported\n");
 			return -EINVAL;
 		}
-		if ((info->source | info->dest) >= XT_ADDRTYPE_PROHIBIT) {
+		if (((info->source | info->dest) >= XT_ADDRTYPE_PROHIBIT) &&
+                    (info->dest & XT_ADDRTYPE_IPROUTER) == 0) {
 			pr_err("ipv6 PROHIBT (THROW, NAT ..) matching not supported\n");
 			return -EINVAL;
 		}
