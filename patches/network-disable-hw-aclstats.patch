Disable Incrementing of ACL HW stats in kernel as HW already increments this coutner

diff --git a/net/bridge/netfilter/ebtables.c b/net/bridge/netfilter/ebtables.c
index 45f93f8..54be1cc 100644
--- a/net/bridge/netfilter/ebtables.c
+++ b/net/bridge/netfilter/ebtables.c
@@ -186,6 +186,8 @@ unsigned int ebt_do_table (unsigned int hook, struct sk_buff *skb,
    const struct net_device *in, const struct net_device *out,
    struct ebt_table *table)
 {
+	static const char nulldevname[IFNAMSIZ] __attribute__((aligned(sizeof(long))));
+
 	int i, nentries;
 	struct ebt_entry *point;
 	struct ebt_counter *counter_base, *cb_base;
@@ -196,6 +198,10 @@ unsigned int ebt_do_table (unsigned int hook, struct sk_buff *skb,
 	const char *base;
 	const struct ebt_table_info *private;
 	struct xt_action_param acpar;
+	const char *indev, *outdev;
+
+	indev = in ? in->name : nulldevname;
+	outdev = out ? out->name : nulldevname;
 
 	acpar.family  = NFPROTO_BRIDGE;
 	acpar.in      = in;
@@ -219,6 +225,8 @@ unsigned int ebt_do_table (unsigned int hook, struct sk_buff *skb,
 	base = private->entries;
 	i = 0;
 	while (i < nentries) {
+		bool no_incflag = false;
+
 		if (ebt_basic_match(point, skb, in, out))
 			goto letscontinue;
 
@@ -229,9 +237,25 @@ unsigned int ebt_do_table (unsigned int hook, struct sk_buff *skb,
 			return NF_DROP;
 		}
 
-		/* increase counter */
-		(*(counter_base + i)).pcnt++;
-		(*(counter_base + i)).bcnt += skb->len;
+		/*
+		 *  Kernel should increment traffic
+		 *  only for eth interfaces
+		 *  TODO:This check will be modified to group check
+		 */
+		if ((hook == NF_BR_LOCAL_IN) || (hook == NF_BR_FORWARD)) {
+			if (((strstr(indev, "eth") == NULL) &&
+				strcmp(indev, nulldevname)) ||
+				((strstr(outdev, "eth") == NULL) &&
+				strcmp(outdev, nulldevname))) {
+				no_incflag = true;
+			}
+		}
+
+		if (!no_incflag) {
+			/* increase counter */
+			(*(counter_base + i)).pcnt++;
+			(*(counter_base + i)).bcnt += skb->len;
+		}
 
 		/* these should only watch: not modify, nor tell us
 		   what to do with the packet */
diff --git a/net/ipv4/netfilter/ip_tables.c b/net/ipv4/netfilter/ip_tables.c
index f98a1cf..8882964 100644
--- a/net/ipv4/netfilter/ip_tables.c
+++ b/net/ipv4/netfilter/ip_tables.c
@@ -341,6 +341,7 @@ ipt_do_table(struct sk_buff *skb,
 	do {
 		const struct xt_entry_target *t;
 		const struct xt_entry_match *ematch;
+		bool no_incflag = false;
 
 		IP_NF_ASSERT(e);
 		if (!ip_packet_match(ip, indev, outdev,
@@ -357,7 +358,23 @@ ipt_do_table(struct sk_buff *skb,
 				goto no_match;
 		}
 
-		ADD_COUNTER(e->counters, skb->len, 1);
+		/*
+		 * Kernel should increment traffic
+		 * only for eth interfaces
+		 * TODO:This check will be modified to group check
+		 */
+		if ((hook == NF_INET_LOCAL_IN) || (hook == NF_INET_FORWARD)) {
+			if (((strstr(indev, "eth") == NULL) &&
+				strcmp(indev, nulldevname)) ||
+				((strstr(outdev, "eth") == NULL) &&
+				strcmp(outdev, nulldevname))) {
+				no_incflag = true;
+			}
+		}
+
+		if (!no_incflag) {
+			ADD_COUNTER(e->counters, skb->len, 1);
+		}
 
 		t = ipt_get_target(e);
 		IP_NF_ASSERT(t->u.kernel.target);
diff --git a/net/ipv6/netfilter/ip6_tables.c b/net/ipv6/netfilter/ip6_tables.c
index 2e752b2..d84bd7c 100644
--- a/net/ipv6/netfilter/ip6_tables.c
+++ b/net/ipv6/netfilter/ip6_tables.c
@@ -373,6 +373,7 @@ ip6t_do_table(struct sk_buff *skb,
 	do {
 		const struct xt_entry_target *t;
 		const struct xt_entry_match *ematch;
+		bool no_incflag = false;
 
 		IP_NF_ASSERT(e);
 		if (!ip6_packet_match(skb, indev, outdev, &e->ipv6,
@@ -389,7 +390,23 @@ ip6t_do_table(struct sk_buff *skb,
 				goto no_match;
 		}
 
-		ADD_COUNTER(e->counters, skb->len, 1);
+		/*
+		 * Kernel should increment traffic
+		 * only for eth interfaces
+		 * TODO:This check will be modified to group check
+		 */
+		if ((hook == NF_INET_LOCAL_IN) || (hook == NF_INET_FORWARD)) {
+			if (((strstr(indev, "eth") == NULL) &&
+				strcmp(indev, nulldevname)) ||
+				((strstr(outdev, "eth") == NULL) &&
+				strcmp(outdev, nulldevname))) {
+				no_incflag = true;
+			}
+		}
+
+		if (!no_incflag) {
+			ADD_COUNTER(e->counters, skb->len, 1);
+		}
 
 		t = ip6t_get_target_c(e);
 		IP_NF_ASSERT(t->u.kernel.target);
