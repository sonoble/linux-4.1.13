When deleting an fdb as a result of a RTM_DELNEIGH message, check if the
dst matches so that it does not delete on behalf of the wrong interface.

diff --git a/net/bridge/br_fdb.c b/net/bridge/br_fdb.c
index 924e87d..eb16520 100644
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@ -814,13 +814,30 @@ int fdb_delete_by_addr(struct net_bridge *br, const u8 *addr,
 	return 0;
 }
 
+int fdb_delete_by_addr_and_port(struct net_bridge_port *p,
+				const unsigned char *addr, u16 vid)
+{
+	struct hlist_head *head = &p->br->hash[br_mac_hash(addr, vid)];
+	struct net_bridge_fdb_entry *fdb;
+
+	fdb = fdb_find(head, addr, vid);
+	if (!fdb)
+		return -ENOENT;
+
+	if (fdb->dst != p)
+		return -ENOENT;
+
+	fdb_delete(p->br, fdb);
+	return 0;
+}
+
 static int __br_fdb_delete(struct net_bridge_port *p,
 			   const unsigned char *addr, u16 vid)
 {
 	int err;
 
 	spin_lock_bh(&p->br->hash_lock);
-	err = fdb_delete_by_addr(p->br, addr, vid);
+	err = fdb_delete_by_addr_and_port(p, addr, vid);
 	spin_unlock_bh(&p->br->hash_lock);
 
 	return err;
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index a7f764d..cc204a1 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -397,6 +397,8 @@ void br_fdb_update(struct net_bridge *br, struct net_bridge_port *source,
 		   const unsigned char *addr, u16 vid);
 int fdb_delete_by_addr(struct net_bridge *br, const u8 *addr, u16 vid);
 
+int fdb_delete_by_addr_and_port(struct net_bridge_port *p,
+				const unsigned char *addr, u16 vid);
 int br_fdb_delete(struct ndmsg *ndm, struct nlattr *tb[],
 		  struct net_device *dev, const unsigned char *addr);
 int br_fdb_add(struct ndmsg *nlh, struct nlattr *tb[], struct net_device *dev,
diff --git a/net/bridge/br_vlan.c b/net/bridge/br_vlan.c
index 6317f3c..90732f5 100644
--- a/net/bridge/br_vlan.c
+++ b/net/bridge/br_vlan.c
@@ -363,7 +363,7 @@ int nbp_vlan_delete(struct net_bridge_port *port, u16 vid)
 		return -EINVAL;
 
 	spin_lock_bh(&port->br->hash_lock);
-	fdb_delete_by_addr(port->br, port->dev->dev_addr, vid);
+	fdb_delete_by_addr_and_port(port, port->dev->dev_addr, vid);
 	spin_unlock_bh(&port->br->hash_lock);
 
 	return __vlan_del(pv, vid);
