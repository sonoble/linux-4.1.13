Add support for 64-bit interface statistics.

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index ee1aab0..0c31f58 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -64,6 +64,7 @@
 #include <linux/nsproxy.h>
 #include <linux/virtio_net.h>
 #include <linux/rcupdate.h>
+#include <linux/u64_stats_sync.h>
 #include <net/net_namespace.h>
 #include <net/netns/generic.h>
 #include <net/rtnetlink.h>
@@ -134,6 +135,10 @@ struct tun_struct {
 
 	int			vnet_hdr_sz;
 
+	spinlock_t              stat_lock;
+	struct u64_stats_sync   stat_sync;
+	struct rtnl_link_stats64	stats;
+
 #ifdef TUN_DEBUG
 	int debug;
 #endif
@@ -376,6 +381,15 @@ static int tun_net_close(struct net_device *dev)
 	return 0;
 }
 
+static inline void tun_stat64_inc(struct tun_struct *tun, u64 *stat)
+{
+	spin_lock_bh(&tun->stat_lock);
+	u64_stats_update_begin(&tun->stat_sync);
+	(*stat)++;
+	u64_stats_update_end(&tun->stat_sync);
+	spin_unlock_bh(&tun->stat_lock);
+}
+
 /* Net device start xmit */
 static netdev_tx_t tun_net_xmit(struct sk_buff *skb, struct net_device *dev)
 {
@@ -405,7 +419,7 @@ static netdev_tx_t tun_net_xmit(struct sk_buff *skb, struct net_device *dev)
 
 			/* We won't see all dropped packets individually, so overrun
 			 * error is more appropriate. */
-			dev->stats.tx_fifo_errors++;
+			tun_stat64_inc(tun, &tun->stats.tx_fifo_errors);
 		} else {
 			/* Single queue mode.
 			 * Driver handles dropping of all packets itself. */
@@ -430,7 +444,7 @@ static netdev_tx_t tun_net_xmit(struct sk_buff *skb, struct net_device *dev)
 	return NETDEV_TX_OK;
 
 drop:
-	dev->stats.tx_dropped++;
+	tun_stat64_inc(tun, &tun->stats.tx_dropped);
 	kfree_skb(skb);
 	return NETDEV_TX_OK;
 }
@@ -650,12 +664,12 @@ static ssize_t tun_get_user(struct tun_struct *tun,
 	skb = tun_alloc_skb(tun, align, len, gso.hdr_len, noblock);
 	if (IS_ERR(skb)) {
 		if (PTR_ERR(skb) != -EAGAIN)
-			tun->dev->stats.rx_dropped++;
+			tun_stat64_inc(tun, &tun->stats.rx_dropped);
 		return PTR_ERR(skb);
 	}
 
 	if (skb_copy_datagram_from_iovec(skb, 0, iv, offset, len)) {
-		tun->dev->stats.rx_dropped++;
+		tun_stat64_inc(tun, &tun->stats.rx_dropped);
 		kfree_skb(skb);
 		return -EFAULT;
 	}
@@ -663,7 +677,7 @@ static ssize_t tun_get_user(struct tun_struct *tun,
 	if (gso.flags & VIRTIO_NET_HDR_F_NEEDS_CSUM) {
 		if (!skb_partial_csum_set(skb, gso.csum_start,
 					  gso.csum_offset)) {
-			tun->dev->stats.rx_frame_errors++;
+			tun_stat64_inc(tun, &tun->stats.rx_frame_errors);
 			kfree_skb(skb);
 			return -EINVAL;
 		}
@@ -680,7 +694,7 @@ static ssize_t tun_get_user(struct tun_struct *tun,
 				pi.proto = htons(ETH_P_IPV6);
 				break;
 			default:
-				tun->dev->stats.rx_dropped++;
+				tun_stat64_inc(tun, &tun->stats.rx_dropped);
 				kfree_skb(skb);
 				return -EINVAL;
 			}
@@ -708,7 +722,7 @@ static ssize_t tun_get_user(struct tun_struct *tun,
 			skb_shinfo(skb)->gso_type = SKB_GSO_UDP;
 			break;
 		default:
-			tun->dev->stats.rx_frame_errors++;
+			tun_stat64_inc(tun, &tun->stats.rx_frame_errors);
 			kfree_skb(skb);
 			return -EINVAL;
 		}
@@ -718,7 +732,7 @@ static ssize_t tun_get_user(struct tun_struct *tun,
 
 		skb_shinfo(skb)->gso_size = gso.gso_size;
 		if (skb_shinfo(skb)->gso_size == 0) {
-			tun->dev->stats.rx_frame_errors++;
+			tun_stat64_inc(tun, &tun->stats.rx_frame_errors);
 			kfree_skb(skb);
 			return -EINVAL;
 		}
@@ -730,9 +744,6 @@ static ssize_t tun_get_user(struct tun_struct *tun,
 
 	netif_rx_ni(skb);
 
-	tun->dev->stats.rx_packets++;
-	tun->dev->stats.rx_bytes += len;
-
 	return count;
 }
 
@@ -830,9 +841,6 @@ static ssize_t tun_put_user(struct tun_struct *tun,
 	skb_copy_datagram_const_iovec(skb, 0, iv, total, len);
 	total += skb->len;
 
-	tun->dev->stats.tx_packets++;
-	tun->dev->stats.tx_bytes += len;
-
 	return total;
 }
 
