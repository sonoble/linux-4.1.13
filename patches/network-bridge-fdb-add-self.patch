This patch adds support to allow fdb add's on the
bridge device.

Signed-off-by: Roopa Prabhu <roopa@cumulusnetworks.com>

diff --git a/net/bridge/br_fdb.c b/net/bridge/br_fdb.c
index 87c45dc..991f7a2 100644
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@ -768,6 +768,7 @@ int br_fdb_add(struct ndmsg *ndm, struct nlattr *tb[],
 	int err = 0;
 	struct net_port_vlans *pv;
 	unsigned short vid = VLAN_N_VID;
+	struct net_bridge *br = NULL;
 
 	if (!(ndm->ndm_state & (NUD_PERMANENT|NUD_NOARP|NUD_REACHABLE))) {
 		pr_info("bridge: RTM_NEWNEIGH with invalid state %#x\n", ndm->ndm_state);
@@ -794,14 +795,20 @@ int br_fdb_add(struct ndmsg *ndm, struct nlattr *tb[],
 		return -EINVAL;
 	}
 
-	p = br_port_get_rtnl(dev);
-	if (p == NULL) {
-		pr_info("bridge: RTM_NEWNEIGH %s not a bridge port\n",
-			dev->name);
-		return -EINVAL;
+	if (dev->priv_flags & IFF_EBRIDGE) {
+		br = netdev_priv(dev);
+		pv = br_get_vlan_info(br);
+	} else {
+		p = br_port_get_rtnl(dev);
+		if (p == NULL) {
+			pr_info("bridge: RTM_NEWNEIGH %s not a bridge port\n",
+				dev->name);
+			return -EINVAL;
+		}
+
+		pv = nbp_get_vlan_info(p);
 	}
 
-	pv = nbp_get_vlan_info(p);
 	if (vid != VLAN_N_VID) {
 		if (!pv || !test_bit(vid, pv->vlan_bitmap)) {
 			pr_info("bridge: RTM_NEWNEIGH with unconfigured "
@@ -810,10 +817,16 @@ int br_fdb_add(struct ndmsg *ndm, struct nlattr *tb[],
 		}
 
 		/* VID was specified, so use it. */
-		err = __br_fdb_add(ndm, p, addr, nlh_flags, vid);
+		if (dev->priv_flags & IFF_EBRIDGE)
+			err = br_fdb_insert(br, NULL, addr, vid);
+		else
+			err = __br_fdb_add(ndm, p, addr, nlh_flags, vid);
 	} else {
 		if (!pv || bitmap_empty(pv->vlan_bitmap, VLAN_N_VID)) {
-			err = __br_fdb_add(ndm, p, addr, nlh_flags, 0);
+			if (dev->priv_flags & IFF_EBRIDGE)
+				err = br_fdb_insert(br, NULL, addr, 0);
+			else
+				err = __br_fdb_add(ndm, p, addr, nlh_flags, 0);
 			goto out;
 		}
 
@@ -822,7 +835,10 @@ int br_fdb_add(struct ndmsg *ndm, struct nlattr *tb[],
 		 * vlan on this port.
 		 */
 		for_each_set_bit(vid, pv->vlan_bitmap, VLAN_N_VID) {
-			err = __br_fdb_add(ndm, p, addr, nlh_flags, vid);
+			if (dev->priv_flags & IFF_EBRIDGE)
+				err = br_fdb_insert(br, NULL, addr, vid);
+			else
+				err = __br_fdb_add(ndm, p, addr, nlh_flags, vid);
 			if (err)
 				goto out;
 		}
@@ -884,6 +900,7 @@ int br_fdb_delete(struct ndmsg *ndm, struct nlattr *tb[],
 	int err;
 	struct net_port_vlans *pv;
 	unsigned short vid = VLAN_N_VID;
+	struct net_bridge *br;
 
 	if (tb[NDA_VLAN]) {
 		if (nla_len(tb[NDA_VLAN]) != sizeof(unsigned short)) {
@@ -899,14 +916,22 @@ int br_fdb_delete(struct ndmsg *ndm, struct nlattr *tb[],
 			return -EINVAL;
 		}
 	}
-	p = br_port_get_rtnl(dev);
-	if (p == NULL) {
-		pr_info("bridge: RTM_DELNEIGH %s not a bridge port\n",
-			dev->name);
-		return -EINVAL;
+
+	if (dev->priv_flags & IFF_EBRIDGE) {
+		br = netdev_priv(dev);
+		pv = br_get_vlan_info(br);
+	} else {
+
+		p = br_port_get_rtnl(dev);
+		if (p == NULL) {
+			pr_info("bridge: RTM_DELNEIGH %s not a bridge port\n",
+				dev->name);
+			return -EINVAL;
+		}
+
+		pv = nbp_get_vlan_info(p);
 	}
 
-	pv = nbp_get_vlan_info(p);
 	if (vid != VLAN_N_VID) {
 		/* vlan could have been deleted but we should still
 		 * attempt to delete the fdb.  Ideally, when vlan is
@@ -920,10 +945,20 @@ int br_fdb_delete(struct ndmsg *ndm, struct nlattr *tb[],
 		}
 		*/
 
-		err = __br_fdb_delete(p, addr, vid);
+		if (dev->priv_flags & IFF_EBRIDGE) {
+			spin_lock_bh(&br->hash_lock);
+			err = fdb_delete_by_addr(br, addr, vid);
+			spin_unlock_bh(&br->hash_lock);
+		} else
+			err = __br_fdb_delete(p, addr, vid);
 	} else {
 		if (!pv || bitmap_empty(pv->vlan_bitmap, VLAN_N_VID)) {
-			err = __br_fdb_delete(p, addr, 0);
+			if (dev->priv_flags & IFF_EBRIDGE) {
+				spin_lock_bh(&br->hash_lock);
+				err = fdb_delete_by_addr(br, addr, 0);
+				spin_unlock_bh(&br->hash_lock);
+			} else
+				err = __br_fdb_delete(p, addr, 0);
 			goto out;
 		}
 
@@ -933,7 +968,12 @@ int br_fdb_delete(struct ndmsg *ndm, struct nlattr *tb[],
 		 */
 		err = -ENOENT;
 		for_each_set_bit(vid, pv->vlan_bitmap, VLAN_N_VID) {
-			err &= __br_fdb_delete(p, addr, vid);
+			if (dev->priv_flags & IFF_EBRIDGE) {
+				spin_lock_bh(&br->hash_lock);
+				err &= fdb_delete_by_addr(br, addr, vid);
+				spin_unlock_bh(&br->hash_lock);
+			} else
+				err &= __br_fdb_delete(p, addr, vid);
 		}
 	}
 out:
