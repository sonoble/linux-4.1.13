static router port was not being marked after port down/up. Querier functionality was not being enabled, if userspace STP was being run. For redundant configuration of router port, the node was being added to router list every time.

diff --git a/net/bridge/br_multicast.c b/net/bridge/br_multicast.c
index bc10e6b..206e6c9 100644
--- a/net/bridge/br_multicast.c
+++ b/net/bridge/br_multicast.c
@@ -38,6 +38,8 @@
 	rcu_dereference_protected(X, lockdep_is_held(&br->multicast_lock))
 
 static void br_multicast_start_querier(struct net_bridge *br);
+static void br_multicast_add_router(struct net_bridge *br,
+				struct net_bridge_port *port);
 
 unsigned int br_mdb_rehash_seq;
 
@@ -870,6 +872,8 @@ void br_multicast_enable_port(struct net_bridge_port *port)
 		goto out;
 
 	__br_multicast_enable_port(port);
+	if ((port->multicast_router == 2) && hlist_unhashed(&port->rlist))
+		br_multicast_add_router(br, port);
 
 out:
 	spin_unlock(&br->multicast_lock);
@@ -1723,6 +1727,11 @@ int br_multicast_set_router(struct net_bridge *br, unsigned long val)
 	int err = -ENOENT;
 
 	spin_lock_bh(&br->multicast_lock);
+	if (br->multicast_router == val) {
+		err = 0;
+		goto unlock;
+	}
+
 	switch (val) {
 	case 0:
 	case 2:
@@ -1750,6 +1759,10 @@ int br_multicast_set_port_router(struct net_bridge_port *p, unsigned long val)
 	int err = -ENOENT;
 
 	spin_lock(&br->multicast_lock);
+	if (p->multicast_router == val) {
+		err = 0;
+		goto unlock;
+	}
 
 	switch (val) {
 	case 0:
diff --git a/net/bridge/br_stp.c b/net/bridge/br_stp.c
index 3fb4de8..542180a 100644
--- a/net/bridge/br_stp.c
+++ b/net/bridge/br_stp.c
@@ -420,6 +420,9 @@ void br_port_state_selection(struct net_bridge *br)
 				p->topology_change_ack = 0;
 				br_make_blocking(p);
 			}
+		} else if ((br->stp_enabled == BR_USER_STP) &&
+				(p->state == BR_STATE_FORWARDING)) {
+			br_multicast_enable_port(p);
 		}
 
 		if (p->state == BR_STATE_FORWARDING)
