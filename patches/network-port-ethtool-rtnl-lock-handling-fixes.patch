First attempt to fix port locking issues around ethtool

    Ticket: CM-4028
    Reviewed By: CCR-2209
    Testing Done: Precommit and directed testing

    The current solution for handling locking when issuing commands to user space has two major bugs as detailed in 4028.

    A global lock is released for most situations without regard to the calling context
    A pointer to freed memory is being held and used after the free

    This patch attempts to solve them with the following logic

    All accesses to the low level function is now separated into calls from ethtool context and others. For others we always
    answer from a local cache, this avoid the need to sleep thus avoiding the release of the lock. For the ethtool context we
    know we can release and do so .. the re-acquire of the lock is still a weakness here

    For the pointer to memory we call the decode functions in the context of the reply method, thus avoiding the need to reference later.

diff --git a/net/core/port.c b/net/core/port.c
index 6fea48f..ac4fc82 100644
--- a/net/core/port.c
+++ b/net/core/port.c
@@ -31,6 +31,7 @@
 
 static DEFINE_HASHTABLE(port_cache, 10);
 static DEFINE_SPINLOCK(port_cache_lock);
+static DEFINE_RWLOCK(port_wq_lock);
 
 struct port_node {
 	struct hlist_node hash_node;
@@ -280,38 +281,19 @@ static void port_cache_set_stats(int ifindex, int count, u64* data, int restart)
 	synchronize_rcu();
 }
 
-static void port_cache_clear_settings(int ifindex)
-{
-	struct port_node *port;
-	unsigned long flags;
-
-	spin_lock_irqsave(&port_cache_lock, flags);
-	port = __port_cache_get(ifindex);
-	if (!port) {
-		spin_unlock_irqrestore(&port_cache_lock, flags);
-		return;
-	}
-
-	memset(&port->settings, 0, sizeof(port->settings));
-	port->settings_valid = 0;
-	spin_unlock_irqrestore(&port_cache_lock, flags);
-	synchronize_rcu();
-}
-
 static int port_cache_get_settings(int ifindex, struct ethtool_cmd *cmd)
 {
 	struct port_node *port;
 	int valid = 0;
-    unsigned long flags;
 
-	spin_lock_irqsave(&port_cache_lock, flags);
+	rcu_read_lock();
 	port = __port_cache_get(ifindex);
 	if (port) {
 		valid = port->settings_valid;
 		if (valid)
 			memcpy(cmd, &port->settings, sizeof(*cmd));
 	}
-	spin_unlock_irqrestore(&port_cache_lock, flags);
+	rcu_read_unlock();
 
 	return valid ? 0 : -ENODATA;
 }
@@ -375,24 +357,11 @@ struct wq {
 	wait_queue_head_t wq;
 	int seq;
 	int hit;
-	struct nlattr **attrs;
+	int (*decode)(struct nlattr **attrs, void *arg1, void *arg2);
+	void *arg1, *arg2;
 	struct list_head list;
 };
 
-static struct wq *alloc_wq(int seq)
-{
-	struct wq *wq = kzalloc(sizeof(*wq), GFP_KERNEL);
-
-	if (!wq)
-		return wq;
-
-	init_waitqueue_head(&wq->wq);
-	INIT_LIST_HEAD(&wq->list);
-	wq->seq = seq;
-
-	return wq;
-}
-
 static struct wq *find_wq(int seq)
 {
 	struct list_head *pos;
@@ -407,98 +376,82 @@ static struct wq *find_wq(int seq)
 	return NULL;
 }
 
+static struct wq *alloc_wq(int seq)
+{
+	struct wq *wq = kzalloc(sizeof(*wq), GFP_KERNEL);
+
+	if (!wq)
+		return wq;
+
+	init_waitqueue_head(&wq->wq);
+	INIT_LIST_HEAD(&wq->list);
+	wq->seq = seq;
+
+	return wq;
+}
+
 static int port_wait(int seq, int wait,
 		     int (*decode)(struct nlattr **attrs,
 				   void *arg1, void *arg2),
 		     void *arg1, void *arg2)
 {
 	struct wq *wq;
-	int err, is_locked;
+	int err;
+
+	write_lock(&port_wq_lock);
 
 	wq = alloc_wq(seq);
-	if (!wq)
+	if (!wq) {
+		write_unlock(&port_wq_lock);
 		return -ENOMEM;
+	}
+
 	list_add(&wq->list, &wq_list);
+	wq->decode = decode;
+	wq->arg1 = arg1;
+	wq->arg2 = arg2;
 
-	is_locked = rtnl_is_locked();
-	if (is_locked)
-		rtnl_unlock();
+	write_unlock(&port_wq_lock);
+
+	ASSERT_RTNL();
+	rtnl_unlock(); /* unconditionally rtnl_unlock here as we
+					* should not be here with rtnl not held */
 
 	err = wait_event_interruptible_timeout(wq->wq, wq->hit, wait * HZ);
 
-	if (is_locked)
-		rtnl_lock();
+	rtnl_lock(); /* re-grab rtnl lock */
 
-	if (err == 0) {			/* timed out */
+	if (err == 0) {	/* timed out */
 		err = -ETIMEDOUT;
 		goto err_out;
 	}
 
-	if (err == -ERESTARTSYS)	/* interrupted */
-		goto err_out;
-
-	if (wq->attrs[PORT_ATTR_STATUS]) {
-		err = nla_get_u32(wq->attrs[PORT_ATTR_STATUS]);
-		if (err)
-			goto err_out;
-	}
-
-	if (decode) {
-		err = decode(wq->attrs, arg1, arg2);
-		if (err)
-			goto err_out;
-	}
-
 	err = 0;
 
 err_out:
+	write_lock(&port_wq_lock);
 	list_del(&wq->list);
 	kfree(wq);
+	write_unlock(&port_wq_lock);
 
 	return err;
 }
 
-static int port_sleep(void)
-{
-	struct wq wq = { .seq = -1 };
-	int err, is_locked;
-
-	init_waitqueue_head(&wq.wq);
-
-	is_locked = rtnl_is_locked();
-	if (is_locked)
-		rtnl_unlock();
-
-	err = wait_event_interruptible_timeout(wq.wq, wq.hit, HZ);
-
-	if (is_locked)
-		rtnl_lock();
-
-	if (err == 0)			/* timed out */
-		err = -ETIMEDOUT;
-
-	return err;
-}
-
-static int port_send(struct net_device *dev, u8 cmd, int size, int wait,
+static int port_send(struct net_device *dev, u8 cmd, int seq, int size,
 		     int (*encode)(struct sk_buff *skb, void *arg1, void *arg2),
 		     int (*decode)(struct nlattr **attrs, void *arg1, void *arg2),
 		     void *arg1, void *arg2)
 {
-	static atomic_t next_seq;
 	struct sk_buff *skb;
 	void *hdr;
-	int seq, err = -EMSGSIZE, retry = 0;
+	int err = -EMSGSIZE;
 
 	size += nla_total_size(sizeof(u32));    /* PORT_ATTR_IFINDEX */
 
-retry:
 	skb = genlmsg_new(size, GFP_KERNEL);
 	if (!skb)
 		return -ENOMEM;
 
-	/* use unique seq for each request */
-	seq = atomic_inc_return(&next_seq);
 	hdr = genlmsg_put(skb, 0, seq, &port_family, 0, cmd);
 	if (!hdr)
 		goto err_out;
@@ -520,15 +473,6 @@ nla_put_failure:
 	if (err < 0)
 		goto err_out_sent;
 
-	if (wait) {
-		err = port_wait(seq, wait, decode, arg1, arg2);
-		retry += wait;
-		if (err == -EAGAIN && retry < 60) {
-			port_sleep();
-			goto retry;
-		}
-	}
-
 	return err;
 
 err_out:
@@ -540,16 +484,20 @@ err_out_sent:
 static int port_reply(struct sk_buff *skb, struct genl_info *info)
 {
 	struct wq *wq;
+	int err;
 
-	rtnl_lock();
+	read_lock(&port_wq_lock);
 	wq = find_wq(info->snd_seq);
-	rtnl_unlock();
-
 	if (wq) {
 		wq->hit = 1;
-		wq->attrs = info->attrs;
+		if (info->attrs[PORT_ATTR_STATUS]) {
+			err = nla_get_u32(info->attrs[PORT_ATTR_STATUS]);
+			if (!err && wq->decode)
+				wq->decode(info->attrs, wq->arg1, wq->arg2);
+		}
 		wake_up_interruptible(&wq->wq);
 	}
+	read_unlock(&port_wq_lock);
 
 	return 0;
 }
@@ -703,6 +651,7 @@ static int decode_struct(struct nlattr *attr, size_t size, void *dst)
 {
 	if (!attr)
 		return -ENOSYS;
+
 	memcpy(dst, nla_data(attr), size);
 	return 0;
 
@@ -720,28 +669,73 @@ void port_uninit_ethtool_stats(struct net_device *dev)
 }
 EXPORT_SYMBOL_GPL(port_uninit_ethtool_stats);
 
-int port_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
+static int handle_remote_ops(struct net_device *dev,  u8 cmd, int size,
+			     int wait,
+			     int (*encode)(struct sk_buff *skb, void *arg1, void *arg2),
+			     int (*decode)(struct nlattr **attrs, void *arg1, void *arg2),
+			     void *arg1, void *arg2)
 {
-	int err, size = 0, wait = 20;
+	int err = 0, count, scount = 0, seq;
+	static atomic_t next_seq;
 
-	int decode(struct nlattr **attrs, void *arg1, void *arg2)
-	{
-		return decode_struct(attrs[PORT_ATTR_SETTINGS],
-				     sizeof(struct ethtool_cmd), arg1);
-	}
+	/* these follow a simple model
+	   since they can call port_wait we will unlock rtnl_lock
+	   before we call the underlying function
+	   
+	   subsequently we will trylock and restart_syscall when
+	   we wake up and process returned data. Only works
+	   for the case where we think the cmd came from ethtool
+	*/
 
-	err = port_cache_get_settings(dev->ifindex, cmd);
-	if (!err)
-		return 0;
+	/* use unique seq for each request */
+	seq = atomic_inc_return(&next_seq);
+	dev_hold(dev);
 
-	err = port_send(dev, PORT_CMD_GET_SETTINGS, size, wait,
-			NULL, decode, cmd, NULL);
-	if (err)
-		return err;
+	scount = port_send(dev, cmd, seq, size,
+			   encode, decode/*XXX*/, arg1, arg2);
+	if (scount < 0) {
+        err = scount;
+        goto err_out;
+    }
 
-	port_cache_set_settings(dev->ifindex, cmd);
+	if (wait) {
+		err = port_wait(seq, wait, decode, arg1, arg2);
+		if (err < 0)
+            goto err_out;
+	}
+
+	switch(cmd) {
+	case PORT_CMD_GET_STRINGS:
+		count = port_cache_get_sset_count(dev->ifindex, *(int *)arg1);
+		port_cache_set_stat_strings(dev->ifindex, count, arg2);
+		break;
+	case PORT_CMD_GET_SSET_COUNT:
+        err = scount;
+		port_cache_set_sset_count(dev->ifindex, *(int *)arg1, scount);
+		break;
+	case PORT_CMD_SET_SETTINGS:
+		port_cache_set_settings(dev->ifindex, arg1);
+		break;
+	case PORT_CMD_GET_MODULE_INFO:
+	case PORT_CMD_GET_MODULE_EEPROM:
+	case PORT_CMD_SET_PHYS_ID_STATE:
+	case PORT_CMD_GET_PAUSE:
+	case PORT_CMD_SET_PAUSE:
+		/* nothing to see here */
+		break;
+	default:
+        break;
+	}
 
-	return 0;
+err_out:
+	dev_put(dev);
+
+	return err;
+}
+
+int port_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
+{
+	return port_cache_get_settings(dev->ifindex, cmd);
 }
 EXPORT_SYMBOL_GPL(port_get_settings);
 
@@ -749,7 +743,6 @@ int port_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
 {
 	int size = nla_total_size(sizeof(struct ethtool_cmd));
 	int wait = 20;
-	int err = 0;
 
 	int encode(struct sk_buff *skb, void *arg1, void *arg2)
 	{
@@ -757,14 +750,8 @@ int port_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
 				     sizeof(struct ethtool_cmd), arg1);
 	}
 
-	err = port_send(dev, PORT_CMD_SET_SETTINGS, size, wait,
-			 encode, NULL, cmd, NULL);
-	if (err < 0)
-		return err;
-
-	port_cache_set_settings(dev->ifindex, cmd);
-
-	return err;
+	return handle_remote_ops(dev, PORT_CMD_SET_SETTINGS, size, wait,
+				 encode, NULL, cmd, NULL);
 }
 EXPORT_SYMBOL_GPL(port_set_settings);
 
@@ -780,8 +767,8 @@ void port_get_pauseparam(struct net_device *dev,
 				     arg1);
 	}
 
-	port_send(dev, PORT_CMD_GET_PAUSE, size, wait,
-		  NULL, decode, pause, NULL);
+	handle_remote_ops(dev, PORT_CMD_GET_PAUSE, size, wait,
+				  NULL, decode, pause, NULL);
 }
 EXPORT_SYMBOL_GPL(port_get_pauseparam);
 
@@ -797,9 +784,9 @@ int port_set_pauseparam(struct net_device *dev,
 				     sizeof(struct ethtool_pauseparam),
 				     arg1);
 	}
-
-	return port_send(dev, PORT_CMD_SET_PAUSE, size, wait,
-			 encode, NULL, pause, NULL);
+/* XXX we want to ensure this handling in switchd is done right */
+	return handle_remote_ops(dev, PORT_CMD_SET_PAUSE, size, wait,
+				 encode, NULL, pause, NULL);
 }
 EXPORT_SYMBOL_GPL(port_set_pauseparam);
 
@@ -857,12 +844,10 @@ void port_get_strings(struct net_device *dev, u32 stringset, u8 *data)
 	if (!err)
 		return;
 
-	err = port_send(dev, PORT_CMD_GET_STRINGS, size, wait,
-			encode, decode, &stringset, data);
+	err = handle_remote_ops(dev, PORT_CMD_GET_STRINGS, size, wait,
+				encode, decode, &stringset, data);
 	if (err)
 		return;
-
-	port_cache_set_stat_strings(dev->ifindex, count, data);
 }
 EXPORT_SYMBOL_GPL(port_get_strings);
 
@@ -891,13 +876,8 @@ int port_get_sset_count(struct net_device *dev, int sset)
 	if (count >= 0)
 		return count;
 
-	count = port_send(dev, PORT_CMD_GET_SSET_COUNT, size, wait,
+	handle_remote_ops(dev, PORT_CMD_GET_SSET_COUNT, size, wait,
 			  encode, decode, &sset, NULL);
-	if (count < 0)
-		return count;
-
-	port_cache_set_sset_count(dev->ifindex, sset, count);
-
 	return count;
 }
 EXPORT_SYMBOL_GPL(port_get_sset_count);
@@ -919,8 +899,8 @@ int port_set_phys_id(struct net_device *dev, enum ethtool_phys_id_state state)
 	if (state == ETHTOOL_ID_ACTIVE)
 		return 1;	/* 1 sec period */
 
-	return port_send(dev, PORT_CMD_SET_PHYS_ID_STATE, size, wait,
-			 encode, NULL, &state, NULL);
+	return handle_remote_ops(dev, PORT_CMD_SET_PHYS_ID_STATE, size, wait,
+				 encode, NULL, &state, NULL);
 }
 EXPORT_SYMBOL_GPL(port_set_phys_id);
 
@@ -934,8 +914,8 @@ int port_get_module_info(struct net_device *dev, struct ethtool_modinfo *info)
 				     sizeof(struct ethtool_modinfo), arg1);
 	}
 
-	return port_send(dev, PORT_CMD_GET_MODULE_INFO, size, wait,
-			 NULL, decode, info, NULL);
+	return handle_remote_ops(dev, PORT_CMD_GET_MODULE_INFO, size, wait,
+				 NULL, decode, info, NULL);
 }
 EXPORT_SYMBOL_GPL(port_get_module_info);
 
@@ -961,8 +941,8 @@ int port_get_module_eeprom(struct net_device *dev,
 		return 0;
 	}
 
-	return port_send(dev, PORT_CMD_GET_MODULE_EEPROM, size, wait,
-			 encode, decode, eeprom, data);
+	return handle_remote_ops(dev, PORT_CMD_GET_MODULE_EEPROM, size, wait,
+				 encode, decode, eeprom, data);
 }
 EXPORT_SYMBOL_GPL(port_get_module_eeprom);
 
