1. IGMP/MLD reports need to be software forwarded towards router ports
2. When IGMP snooping is disabled, IGMP/MLD packets need to be flooded
3. When a router port is detected or statically configured, it should
   be treated as if a querier exists in the network to do multicast
   forwarding to router ports for IGMP/MLD reports

diff --git a/net/bridge/br_device.c b/net/bridge/br_device.c
index 998d46d..34cf90d 100644
--- a/net/bridge/br_device.c
+++ b/net/bridge/br_device.c
@@ -70,7 +70,8 @@ netdev_tx_t br_dev_xmit(struct sk_buff *skb, struct net_device *dev)
 
 		mdst = br_mdb_get(br, skb, vid);
 		if ((mdst || BR_INPUT_SKB_CB_MROUTERS_ONLY(skb)) &&
-		    br_multicast_querier_exists(br, eth_hdr(skb)))
+				(br_multicast_querier_exists(br, eth_hdr(skb)) ||
+				 !hlist_empty(&br->router_list)))
 			br_multicast_deliver(mdst, skb);
 		else
 			br_flood_deliver(br, skb, false);
diff --git a/net/bridge/br_forward.c b/net/bridge/br_forward.c
index d6854a4..79ab806 100644
--- a/net/bridge/br_forward.c
+++ b/net/bridge/br_forward.c
@@ -100,6 +100,8 @@ static void __br_forward(const struct net_bridge_port *to, struct sk_buff *skb)
 	const unsigned char *dest = eth_hdr(skb)->h_dest;
 	struct net_bridge_port *p = br_port_get_rcu(skb->dev);
 	struct net_bridge *br = p->br;
+	__u8 igmp_report_leave_forward = 0;
+
 
 	/* flood forward STP/PVST BPDU when received and STP is disabled */
 	if ((!compare_ether_addr(br_group_address, dest) ||
@@ -107,8 +109,12 @@ static void __br_forward(const struct net_bridge_port *to, struct sk_buff *skb)
 			(br->stp_enabled == BR_NO_STP)) {
 		stp_disabled_forward = 1;
 	}
+	/* flood forward IGMP/MLD report/leave when hardware forwarded */
+	if (br_hw_fwding_enabled && br_multicast_is_rep_leave(skb))
+		igmp_report_leave_forward = 1;
 
-	if (br_hw_fwding_enabled && !stp_disabled_forward) {
+	if (br_hw_fwding_enabled && !stp_disabled_forward &&
+				!igmp_report_leave_forward) {
 		NF_HOOK(NFPROTO_BRIDGE, NF_BR_FORWARD, skb, skb->dev, to->dev,
 			br_hw_forward_finish);
 		return;
diff --git a/net/bridge/br_input.c b/net/bridge/br_input.c
index d2f8c04..602a0fc 100644
--- a/net/bridge/br_input.c
+++ b/net/bridge/br_input.c
@@ -117,8 +117,11 @@ int br_handle_frame_finish(struct sk_buff *skb)
 		unicast = false;
 	} else if (is_multicast_ether_addr(dest) || stp_disabled_forward) {
 		mdst = br_mdb_get(br, skb, vid);
-		if ((mdst || BR_INPUT_SKB_CB_MROUTERS_ONLY(skb)) &&
-		    br_multicast_querier_exists(br, eth_hdr(skb))) {
+		if ((mdst || BR_INPUT_SKB_CB_MROUTERS_ONLY(skb) ||
+				(BR_INPUT_SKB_CB(skb)->igmp_mld_rep_leave_fwd &&
+				br_hw_fwding_enabled)) &&
+				(br_multicast_querier_exists(br, eth_hdr(skb)) ||
+				 !hlist_empty(&br->router_list))) {
 			if ((mdst && mdst->mglist) ||
 			    br_multicast_is_router(br))
 				skb2 = skb;
diff --git a/net/bridge/br_multicast.c b/net/bridge/br_multicast.c
index 000cc59..7fc1f1b 100644
--- a/net/bridge/br_multicast.c
+++ b/net/bridge/br_multicast.c
@@ -45,6 +45,7 @@ static void br_ip6_multicast_leave_group(struct net_bridge *br,
 			struct net_bridge_port *port, const struct in6_addr *group, __u16 vid);
 #endif
 unsigned int br_mdb_rehash_seq;
+extern int br_hw_fwding_enabled;
 
 /* ported from net/ipv6/addrconf.c */
 static u32 ipv6_addr_hash(const struct in6_addr *addr)
@@ -1655,20 +1656,39 @@ static int br_multicast_ipv4_rcv(struct net_bridge *br,
 
 	BR_INPUT_SKB_CB(skb)->igmp = 1;
 	ih = igmp_hdr(skb2);
+	/* When IGMP snooping is disabled, flood forward all IGMP packets */
+	if (br->multicast_disabled) {
+		switch (ih->type) {
+			case IGMP_HOST_MEMBERSHIP_REPORT:
+			case IGMPV2_HOST_MEMBERSHIP_REPORT:
+			case IGMPV3_HOST_MEMBERSHIP_REPORT:
+			case IGMP_HOST_LEAVE_MESSAGE:
+				if (br_hw_fwding_enabled)
+					BR_INPUT_SKB_CB(skb)->igmp_mld_rep_leave_fwd = 1;
+				break;
+			case IGMP_HOST_MEMBERSHIP_QUERY:
+				break;
+		}
+		goto out;
+	}
 
 	switch (ih->type) {
 	case IGMP_HOST_MEMBERSHIP_REPORT:
 	case IGMPV2_HOST_MEMBERSHIP_REPORT:
 		BR_INPUT_SKB_CB(skb)->mrouters_only = 1;
+		/* Mark report/leaves to be forwarded */
+		BR_INPUT_SKB_CB(skb)->igmp_mld_rep_leave_fwd = 1;
 		err = br_ip4_multicast_add_group(br, port, ih->group, vid);
 		break;
 	case IGMPV3_HOST_MEMBERSHIP_REPORT:
+		BR_INPUT_SKB_CB(skb)->igmp_mld_rep_leave_fwd = 1;
 		err = br_ip4_multicast_igmp3_report(br, port, skb2, vid);
 		break;
 	case IGMP_HOST_MEMBERSHIP_QUERY:
 		err = br_ip4_multicast_query(br, port, skb2, vid);
 		break;
 	case IGMP_HOST_LEAVE_MESSAGE:
+		BR_INPUT_SKB_CB(skb)->igmp_mld_rep_leave_fwd = 1;
 		br_ip4_multicast_leave_group(br, port, ih->group, vid);
 		break;
 	}
@@ -1803,6 +1823,21 @@ static int br_multicast_ipv6_rcv(struct net_bridge *br,
 
 	BR_INPUT_SKB_CB(skb)->igmp = 1;
 
+	/* When IGMP snooping is disabled, flood forward all MLD packets */
+	if (br->multicast_disabled) {
+		switch (icmp6_type) {
+			case ICMPV6_MGM_REPORT:
+			case ICMPV6_MLD2_REPORT:
+			case ICMPV6_MGM_REDUCTION:
+				if (br_hw_fwding_enabled)
+					BR_INPUT_SKB_CB(skb)->igmp_mld_rep_leave_fwd = 1;
+				break;
+			case ICMPV6_MGM_QUERY:
+				break;
+		}
+		goto out;
+	}
+
 	switch (icmp6_type) {
 	case ICMPV6_MGM_REPORT:
 	    {
@@ -1813,10 +1848,13 @@ static int br_multicast_ipv6_rcv(struct net_bridge *br,
 		}
 		mld = (struct mld_msg *)skb_transport_header(skb2);
 		BR_INPUT_SKB_CB(skb)->mrouters_only = 1;
+		/* Mark report/leaves to be forwarded */
+		BR_INPUT_SKB_CB(skb)->igmp_mld_rep_leave_fwd = 1;
 		err = br_ip6_multicast_add_group(br, port, &mld->mld_mca, vid);
 		break;
 	    }
 	case ICMPV6_MLD2_REPORT:
+		BR_INPUT_SKB_CB(skb)->igmp_mld_rep_leave_fwd = 1;
 		err = br_ip6_multicast_mld2_report(br, port, skb2, vid);
 		break;
 	case ICMPV6_MGM_QUERY:
@@ -1829,6 +1867,7 @@ static int br_multicast_ipv6_rcv(struct net_bridge *br,
 			err = -EINVAL;
 			goto out;
 		}
+		BR_INPUT_SKB_CB(skb)->igmp_mld_rep_leave_fwd = 1;
 		mld = (struct mld_msg *)skb_transport_header(skb2);
 		br_ip6_multicast_leave_group(br, port, &mld->mld_mca, vid);
 	    }
@@ -1846,9 +1885,6 @@ int br_multicast_rcv(struct net_bridge *br, struct net_bridge_port *port,
 	BR_INPUT_SKB_CB(skb)->igmp = 0;
 	BR_INPUT_SKB_CB(skb)->mrouters_only = 0;
 
-	if (br->multicast_disabled)
-		return 0;
-
 	switch (skb->protocol) {
 	case htons(ETH_P_IP):
 		return br_multicast_ipv4_rcv(br, port, skb, vid);
@@ -2451,3 +2487,28 @@ void br_mdb_leave_topology_change(struct net_bridge *br,
 		}
 	}
 }
+
+/* check if the SKB is an IGMP/MLD report/leave
+ */
+bool br_multicast_is_rep_leave(struct sk_buff *skb)
+{
+	const struct iphdr *iph;
+	struct igmphdr *ih;
+
+	if (BR_INPUT_SKB_CB(skb)->igmp_mld_rep_leave_fwd)
+		return true;
+
+	if (skb->protocol == htons(ETH_P_IP)) {
+		iph = ip_hdr(skb);
+		if (iph->protocol == IPPROTO_IGMP) {
+			ih = igmp_hdr(skb);
+			if ((ih->type == IGMP_HOST_MEMBERSHIP_REPORT) ||
+					(ih->type == IGMPV2_HOST_MEMBERSHIP_REPORT) ||
+					(ih->type == IGMPV3_HOST_MEMBERSHIP_REPORT) ||
+					(ih->type == IGMP_HOST_LEAVE_MESSAGE))
+				return true;
+		}
+	}
+
+	return false;
+}
diff --git a/net/bridge/br_netfilter.c b/net/bridge/br_netfilter.c
index 2710379..63d473e 100644
--- a/net/bridge/br_netfilter.c
+++ b/net/bridge/br_netfilter.c
@@ -732,6 +732,7 @@ static int br_nf_forward_finish(struct sk_buff *skb)
 {
 	struct nf_bridge_info *nf_bridge = skb->nf_bridge;
 	struct net_device *in;
+	__u8 igmp_report_leave_forward = 0;
 
 	if (!IS_ARP(skb) && !IS_VLAN_ARP(skb)) {
 		in = nf_bridge->physindev;
@@ -744,8 +745,11 @@ static int br_nf_forward_finish(struct sk_buff *skb)
 		in = *((struct net_device **)(skb->cb));
 	}
 	nf_bridge_push_encap_header(skb);
+	/* flood forward IGMP/MLD report/leave when hardware forwarded */
+	if (br_hw_fwding_enabled && br_multicast_is_rep_leave(skb))
+		igmp_report_leave_forward = 1;
 
-	if (br_hw_fwding_enabled) {
+	if (br_hw_fwding_enabled && !igmp_report_leave_forward) {
 		NF_HOOK_THRESH(NFPROTO_BRIDGE, NF_BR_FORWARD, skb, in,
 				skb->dev, br_hw_forward_finish, 1);
 	} else {
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index e4ef7ca..c5fe7c0 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -310,6 +310,7 @@ struct br_input_skb_cb {
 #ifdef CONFIG_BRIDGE_IGMP_SNOOPING
 	int igmp;
 	int mrouters_only;
+	int igmp_mld_rep_leave_fwd;
 #endif
 };
 
@@ -514,8 +515,11 @@ static inline bool
 __br_multicast_querier_exists(struct net_bridge *br,
 			      struct bridge_mcast_querier *querier)
 {
-	return time_is_before_jiffies(querier->delay_time) &&
-	       (br->multicast_querier || timer_pending(&querier->timer));
+	/* check if multicast querier is configured, detected dynamically
+	 *	or configured statically
+	 */
+	return ((time_is_before_jiffies(querier->delay_time) &&
+	       (br->multicast_querier || timer_pending(&querier->timer))));
 }
 
 static inline bool br_multicast_querier_exists(struct net_bridge *br,
@@ -537,6 +541,7 @@ static inline bool br_multicast_querier_exists(struct net_bridge *br,
 int br_multicast_add_querier_src(struct net_bridge *br, struct br_ip *src);
 int br_multicast_del_querier_src(struct net_bridge *br, struct br_ip *src);
 #endif
+bool br_multicast_is_rep_leave(struct sk_buff *skb);
 
 #else
 static inline int br_multicast_rcv(struct net_bridge *br,
@@ -606,6 +611,9 @@ static inline void br_mdb_init(void)
 static inline void br_mdb_uninit(void)
 {
 }
+static inline bool br_multicast_is_rep_leave(struct sk_buff *skb)
+{
+}
 #endif
 
 /* br_vlan.c */
