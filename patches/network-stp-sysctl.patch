Add sysctl to decide if STP is in userspace/kernel

diff --git a/net/bridge/br.c b/net/bridge/br.c
index d3f57c1..9058381 100644
--- a/net/bridge/br.c
+++ b/net/bridge/br.c
@@ -35,14 +35,74 @@ static struct pernet_operations br_net_ops = {
 	.exit	= br_net_exit,
 };
 
+#ifdef CONFIG_SYSCTL
+static struct ctl_table_header *brstp_sysctl_header;
+int brstp_user_space __read_mostly = 1;
+
+static
+int brstp_sysctl_call_tables(ctl_table * ctl, int write,
+			    void __user * buffer, size_t * lenp, loff_t * ppos)
+{
+	int ret;
+	int old_brstp_user_space = brstp_user_space;
+
+	ret = proc_dointvec(ctl, write, buffer, lenp, ppos);
+	if (old_brstp_user_space != brstp_user_space) {
+		printk(KERN_INFO "set stp state - %s\n",
+			brstp_user_space ? "user" : "kernel");
+		if (!brstp_user_space) {
+			ret = stp_proto_register(&br_stp_proto);
+			if (ret < 0) {
+				pr_err("bridge: can't register sap for STP\n");
+				return ret;
+			}
+		} else {
+			stp_proto_unregister(&br_stp_proto);
+		}
+	}
+
+	return ret;
+}
+
+static ctl_table brstp_table[] = {
+	{
+		.procname	= "bridge-stp-user-space",
+		.data		= &brstp_user_space,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= brstp_sysctl_call_tables,
+	},
+	{ }
+};
+
+static struct ctl_path brstp_path[] = {
+	{ .procname = "net", },
+	{ .procname = "bridge", },
+	{ }
+};
+#else
+#define brstp_user_space 1
+#endif
+
 static int __init br_init(void)
 {
 	int err;
 
-	err = stp_proto_register(&br_stp_proto);
-	if (err < 0) {
-		pr_err("bridge: can't register sap for STP\n");
-		return err;
+#ifdef CONFIG_SYSCTL
+	brstp_sysctl_header = register_sysctl_paths(brstp_path, brstp_table);
+	if (brstp_sysctl_header == NULL) {
+		printk(KERN_WARNING
+		"br_init: can't register to sysctl.\n");
+		return -ENOMEM;
+	}
+#endif
+
+	if (!brstp_user_space) {
+		err = stp_proto_register(&br_stp_proto);
+		if (err < 0) {
+			pr_err("bridge: can't register sap for STP\n");
+			return err;
+		}
 	}
 
 	err = br_fdb_init();
@@ -81,14 +141,21 @@ err_out2:
 err_out1:
 	br_fdb_fini();
 err_out:
-	stp_proto_unregister(&br_stp_proto);
+	if (!brstp_user_space)
+		stp_proto_unregister(&br_stp_proto);
+#ifdef CONFIG_SYSCTL
+	unregister_sysctl_table(brstp_sysctl_header);
+#endif
 	return err;
 }
 
 static void __exit br_deinit(void)
 {
-	stp_proto_unregister(&br_stp_proto);
-
+	if (!brstp_user_space)
+		stp_proto_unregister(&br_stp_proto);
+#ifdef CONFIG_SYSCTL
+	unregister_sysctl_table(brstp_sysctl_header);
+#endif
 	br_netlink_fini();
 	unregister_netdevice_notifier(&br_device_notifier);
 	brioctl_set(NULL);
diff --git a/net/bridge/br_stp.c b/net/bridge/br_stp.c
index 03ff405..3fb4de8 100644
--- a/net/bridge/br_stp.c
+++ b/net/bridge/br_stp.c
@@ -32,8 +32,8 @@ static const char *const br_port_state_names[] = {
 void br_log_state(const struct net_bridge_port *p)
 {
 	br_info(p->br, "port %u(%s) entering %s state\n",
-		(unsigned) p->port_no, p->dev->name,
-		br_port_state_names[p->state]);
+			(unsigned) p->port_no, p->dev->name,
+			br_port_state_names[p->state]);
 }
 
 /* called under bridge lock */
diff --git a/net/bridge/br_stp_if.c b/net/bridge/br_stp_if.c
index ae80d6d..28c2b97 100644
--- a/net/bridge/br_stp_if.c
+++ b/net/bridge/br_stp_if.c
@@ -128,13 +128,13 @@ void br_stp_disable_port(struct net_bridge_port *p)
 
 static void br_stp_start(struct net_bridge *br)
 {
-	int r;
 	char *argv[] = { BR_STP_PROG, br->dev->name, "start", NULL };
 	char *envp[] = { NULL };
 	struct net_bridge_port *p;
+	extern int brstp_user_space;
 
-	r = call_usermodehelper(BR_STP_PROG, argv, envp, UMH_WAIT_PROC);
-	if (r == 0) {
+	if (brstp_user_space) {
+		call_usermodehelper(BR_STP_PROG, argv, envp, UMH_WAIT_PROC);
 		br->stp_enabled = BR_USER_STP;
 		br_debug(br, "userspace STP started\n");
 		/* Stop hello and hold timer */
