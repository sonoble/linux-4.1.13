Fixes for fdb and mdb for the new bridge driver.

diff --git a/include/linux/if_bridge.h b/include/linux/if_bridge.h
index 51eba88..cf81969 100644
--- a/include/linux/if_bridge.h
+++ b/include/linux/if_bridge.h
@@ -95,7 +95,7 @@ struct __fdb_entry {
 	__u32 ageing_timer_value;
 	__u8 port_hi;
 	__u8 pad0;
-	__u16 unused;
+	__u16 vlan;
 };
 
 /* Bridge Flags */
@@ -171,6 +171,7 @@ enum {
 
 struct br_port_msg {
 	__u8  family;
+	__u16 vlan;
 	__u32 ifindex;
 };
 
@@ -185,6 +186,7 @@ struct br_mdb_entry {
 			struct in6_addr ip6;
 		} u;
 		__be16		proto;
+		__be16		vlan_id;
 	} addr;
 };
 
diff --git a/net/bridge/br_fdb.c b/net/bridge/br_fdb.c
index ac4c109..c0e733e 100644
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@ -346,6 +346,7 @@ int br_fdb_fillbuf(struct net_bridge *br, void *buf,
 			fe->is_local = f->is_local;
 			if (!f->is_static)
 				fe->ageing_timer_value = jiffies_delta_to_clock_t(jiffies - f->updated);
+			fe->vlan = f->vlan_id;
 			++fe;
 			++num;
 		}
@@ -814,11 +815,17 @@ int br_fdb_delete(struct ndmsg *ndm, struct nlattr *tb[],
 
 	pv = nbp_get_vlan_info(p);
 	if (vid != VLAN_N_VID) {
+		/* vlan could have been deleted but we should still
+		 * attempt to delete the fdb.  Ideally, when vlan is
+		 * being deleted, all the fdb entries for the vlan should
+		 * be flushed. Need to look into that.
+
 		if (!pv || !test_bit(vid, pv->vlan_bitmap)) {
 			pr_info("bridge: RTM_DELNEIGH with unconfigured "
 				"vlan %d on port %s\n", vid, dev->name);
 			return -EINVAL;
 		}
+		*/
 
 		err = __br_fdb_delete(p, addr, vid);
 	} else {
diff --git a/net/bridge/br_mdb.c b/net/bridge/br_mdb.c
index 29c7b96..c3d9406 100644
--- a/net/bridge/br_mdb.c
+++ b/net/bridge/br_mdb.c
@@ -94,6 +94,7 @@ static int br_mdb_fill_info(struct sk_buff *skb, struct netlink_callback *cb,
 						e.addr.u.ip6 = p->addr.u.ip6;
 #endif
 					e.addr.proto = p->addr.proto;
+					e.addr.vlan_id = p->addr.vid;
 					if (nla_put(skb, MDBA_MDB_ENTRY_INFO, sizeof(e), &e)) {
 						nla_nest_cancel(skb, nest2);
 						err = -EMSGSIZE;
@@ -238,6 +239,7 @@ void br_mdb_notify(struct net_device *dev, struct net_bridge_port *port,
 	memset(&entry, 0, sizeof(entry));
 	entry.ifindex = port->dev->ifindex;
 	entry.addr.proto = group->proto;
+	entry.addr.vlan_id = group->vid;
 	entry.addr.u.ip4 = group->u.ip4;
 #if IS_ENABLED(CONFIG_IPV6)
 	entry.addr.u.ip6 = group->u.ip6;
@@ -248,7 +250,7 @@ void br_mdb_notify(struct net_device *dev, struct net_bridge_port *port,
 
 static int nlmsg_populate_rtr_fill(struct sk_buff *skb,
 				  struct net_device *dev,
-				  int ifindex, u32 pid,
+				  int ifindex, u16 vid, u32 pid,
 				  u32 seq, int type, unsigned int flags)
 {
 	struct nlmsghdr *nlh;
@@ -263,6 +265,7 @@ static int nlmsg_populate_rtr_fill(struct sk_buff *skb,
 	memset(bpm, 0, sizeof(*bpm));
 	bpm->family  = AF_BRIDGE;
 	bpm->ifindex = dev->ifindex;
+	bpm->vlan = vid;
 	nest = nla_nest_start(skb, MDBA_ROUTER);
 	if (nest == NULL)
 		goto cancel;
@@ -293,18 +296,37 @@ void br_rtr_notify(struct net_device *dev, struct net_bridge_port *port,
 	struct sk_buff *skb;
 	int err = -ENOBUFS;
 	int ifindex = port ? port->dev->ifindex : 0;
+	struct net_port_vlans *pv = nbp_get_vlan_info(port);
+	u16 vid;
+
+	if (!pv) {
+		skb = nlmsg_new(rtnl_rtr_nlmsg_size(), GFP_ATOMIC);
+                if (!skb)
+                        goto errout;
+
+                err = nlmsg_populate_rtr_fill(skb, dev, ifindex, 0, 0, 0, type, NTF_SELF);
+                if (err < 0) {
+                        kfree_skb(skb);
+                        goto errout;
+                }
+
+                rtnl_notify(skb, net, 0, RTNLGRP_MDB, NULL, GFP_ATOMIC);
+		return;
+	}
 
-	skb = nlmsg_new(rtnl_rtr_nlmsg_size(), GFP_ATOMIC);
-	if (!skb)
-		goto errout;
+	for_each_set_bit(vid, pv->vlan_bitmap, VLAN_N_VID) {
+		skb = nlmsg_new(rtnl_rtr_nlmsg_size(), GFP_ATOMIC);
+		if (!skb)
+			goto errout;
 
-	err = nlmsg_populate_rtr_fill(skb, dev, ifindex, 0, 0, type, NTF_SELF);
-	if (err < 0) {
-		kfree_skb(skb);
-		goto errout;
-	}
+		err = nlmsg_populate_rtr_fill(skb, dev, ifindex, vid, 0, 0, type, NTF_SELF);
+		if (err < 0) {
+			kfree_skb(skb);
+			goto errout;
+		}
 
-	rtnl_notify(skb, net, 0, RTNLGRP_MDB, NULL, GFP_ATOMIC);
+		rtnl_notify(skb, net, 0, RTNLGRP_MDB, NULL, GFP_ATOMIC);
+	}
 	return;
 errout:
 	rtnl_set_sk_err(net, RTNLGRP_MDB, err);
@@ -440,6 +462,7 @@ static int __br_mdb_add(struct net *net, struct net_bridge *br,
 		return -EINVAL;
 
 	ip.proto = entry->addr.proto;
+        ip.vid = entry->addr.vlan_id;
 	if (ip.proto == htons(ETH_P_IP))
 		ip.u.ip4 = entry->addr.u.ip4;
 #if IS_ENABLED(CONFIG_IPV6)
@@ -486,6 +509,7 @@ static int __br_mdb_del(struct net_bridge *br, struct br_mdb_entry *entry)
 		return -EINVAL;
 
 	ip.proto = entry->addr.proto;
+	ip.vid = entry->addr.vlan_id;
 	if (ip.proto == htons(ETH_P_IP)) {
 		if (timer_pending(&br->ip4_querier.timer))
 			return -EBUSY;
