This is a hack to make the softnode look like the hardnode in its handling of
proto_down i.e. on proto_down notification the carrier setting is cleared.

Also see network-core-proto-down.patch for details on the proto_down.

diff --git a/drivers/net/virtio_net.c b/drivers/net/virtio_net.c
index 9238fac..da384f7 100644
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -985,8 +985,10 @@ static void virtnet_update_status(struct virtnet_info *vi)
 	vi->status = v;
 
 	if (vi->status & VIRTIO_NET_S_LINK_UP) {
-		netif_carrier_on(vi->dev);
-		netif_wake_queue(vi->dev);
+		if (!(vi->dev->flags & IFF_PROTO_DOWN)) {
+			netif_carrier_on(vi->dev);
+			netif_wake_queue(vi->dev);
+		}
 	} else {
 		netif_carrier_off(vi->dev);
 		netif_stop_queue(vi->dev);
@@ -1123,7 +1125,8 @@ static int virtnet_probe(struct virtio_device *vdev)
 		virtnet_update_status(vi);
 	} else {
 		vi->status = VIRTIO_NET_S_LINK_UP;
-		netif_carrier_on(dev);
+		if (!(dev->flags & IFF_PROTO_DOWN))
+			netif_carrier_on(dev);
 	}
 
 	pr_debug("virtnet: registered device %s\n", dev->name);
@@ -1212,13 +1215,62 @@ static struct virtio_driver virtio_net_driver = {
 	.config_changed = virtnet_config_changed,
 };
 
+/* virtio_netdev_event: handle netdev notifier chain events. */
+static int virtio_netdev_event(struct notifier_block *this,
+			unsigned long event, void *ptr)
+{
+	struct net_device *dev = (struct net_device *)ptr;
+	struct virtnet_info *vi;
+
+	if (dev->netdev_ops != &virtnet_netdev)
+		return NOTIFY_DONE;
+
+	vi = netdev_priv(dev);
+
+	switch (event) {
+	case NETDEV_CHANGE:
+		/* check if carrier state needs to be updated based
+		 * on the proto_down state */
+		if (vi->status & VIRTIO_NET_S_LINK_UP) {
+			if (dev->flags & IFF_PROTO_DOWN) {
+				if (netif_carrier_ok(dev)) {
+					netif_carrier_off(dev);
+				}
+			} else {
+				if (!netif_carrier_ok(dev)) {
+					netif_carrier_on(dev);
+					netif_wake_queue(dev);
+				}
+			}
+		}
+	default:
+		break;
+	}
+
+	return NOTIFY_DONE;
+}
+
+static struct notifier_block virtio_netdev_notifier = {
+	.notifier_call = virtio_netdev_event,
+};
+
 static int __init init(void)
 {
-	return register_virtio_driver(&virtio_net_driver);
+	int ret;
+
+	ret = register_virtio_driver(&virtio_net_driver);
+	if (ret)
+		goto err_misc;
+
+	register_netdevice_notifier(&virtio_netdev_notifier);
+
+err_misc:
+	return ret;
 }
 
 static void __exit fini(void)
 {
+	unregister_netdevice_notifier(&virtio_netdev_notifier);
 	unregister_virtio_driver(&virtio_net_driver);
 }
 module_init(init);
