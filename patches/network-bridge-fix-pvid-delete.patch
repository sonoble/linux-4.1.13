When pvid is changed on a port, the old pvid should become tagged.

When a vlan is deleted from a port, and it is also the pvid of the port,
the pvid should revert to the default value.

The default pvid should not be allowed to be deleted.

Pvid and default pvid concept does not apply to bridge itself.

diff --git a/net/bridge/br_netlink.c b/net/bridge/br_netlink.c
index 882072e..7cb55c6 100644
--- a/net/bridge/br_netlink.c
+++ b/net/bridge/br_netlink.c
@@ -158,7 +158,7 @@ static int br_fill_ifinfo(struct sk_buff *skb,
 		/* send the pvid separately first */
 		pvid = br_get_pvid(pv);
 
-		if (pvid != VLAN_N_VID) {
+		if (pvid && (pvid != VLAN_N_VID)) {
 			memset(&vinfo, 0, sizeof(vinfo));
 			vinfo.flags |= BRIDGE_VLAN_INFO_PVID;
 			if (test_bit(pvid, untagged_bmp_copy)) {
diff --git a/net/bridge/br_vlan.c b/net/bridge/br_vlan.c
index 8e87ef6..6bedcc4 100644
--- a/net/bridge/br_vlan.c
+++ b/net/bridge/br_vlan.c
@@ -11,6 +11,8 @@ static void __vlan_add_pvid(struct net_port_vlans *v, u16 vid)
 		return;
 
 	smp_wmb();
+	clear_bit(v->pvid, v->untagged_bitmap);
+	clear_bit(v->pvid, v->vlan_bitmap);
 	v->pvid = vid;
 }
 
@@ -89,6 +91,12 @@ static int __vlan_del(struct net_port_vlans *v, u16 vid)
 	if (!test_bit(vid, v->vlan_bitmap))
 		return -EINVAL;
 
+	if (v->port_idx) {
+		if ((v->parent.port->br->default_pvid == vid) &&
+		    (v->pvid == vid))
+			return -EINVAL;
+	}
+
 	__vlan_delete_pvid(v, vid);
 	clear_bit(vid, v->untagged_bitmap);
 
@@ -97,6 +105,16 @@ static int __vlan_del(struct net_port_vlans *v, u16 vid)
 
 	clear_bit(vid, v->vlan_bitmap);
 	v->num_vlans--;
+
+	if (v->port_idx && (v->pvid == 0)) {
+		v->pvid = v->parent.port->br->default_pvid;
+		set_bit(v->pvid, v->untagged_bitmap);
+		if (!test_bit(v->pvid, v->vlan_bitmap)) {
+			set_bit(v->pvid, v->vlan_bitmap);
+			v->num_vlans++;
+		}
+	}
+
 	if (bitmap_empty(v->vlan_bitmap, VLAN_N_VID)) {
 		if (v->port_idx)
 			rcu_assign_pointer(v->parent.port->vlan_info, NULL);
@@ -403,12 +421,14 @@ static int __br_vlan_set_default_pvid(struct net_bridge *br, u16 pvid)
 	 */
 	if ((!old_pvid || vlan_default_pvid(br_get_vlan_info(br), old_pvid)) &&
 	    !br_vlan_find(br, pvid)) {
+/*
 		err = br_vlan_add(br, pvid,
 				  BRIDGE_VLAN_INFO_PVID |
 				  BRIDGE_VLAN_INFO_UNTAGGED);
 		if (err)
 			goto out;
 		br_vlan_delete(br, old_pvid);
+*/
 		set_bit(0, changed);
 	}
 
@@ -448,6 +468,7 @@ err_port:
 		nbp_vlan_delete(p, pvid);
 	}
 
+/*
 	if (test_bit(0, changed)) {
 		if (old_pvid)
 			br_vlan_add(br, old_pvid,
@@ -455,6 +476,7 @@ err_port:
 				    BRIDGE_VLAN_INFO_UNTAGGED);
 		br_vlan_delete(br, pvid);
 	}
+*/
 	goto out;
 }
 
