network: ipv4 tcp md5sig debugging code

There is a problem with ipv4 tcp md5 signatures (RFC 2385) on some
powerpc processors (seen on 85xx series at least). This debugging
code helped in the investigation.

This code is best used with the dynamic debug feature of the kernel
enabled, CONFIG_DYNAMIC_DEBUG=y.

If using dynamic debug do the following once the device has booted:
  export DEBUGFS=/sys/kernel/debug
  mount -t debugfs none "${DEBUGFS}"
  echo 'file crypto/ahash.c +p' >${DEBUGFS}/dynamic_debug/control
  echo 'file crypto/shash.c +p' >${DEBUGFS}/dynamic_debug/control
  echo 'file crypto/md5.c +p' >${DEBUGFS}/dynamic_debug/control
  echo 'file net/ipv4/tcp.c +p' >${DEBUGFS}/dynamic_debug/control
  echo 'file net/ipv4/tcp_ipv4.c +p' >${DEBUGFS}/dynamic_debug/control

diff --git a/crypto/ahash.c b/crypto/ahash.c
index 7fe1752..2b338ca 100644
--- a/crypto/ahash.c
+++ b/crypto/ahash.c
@@ -26,6 +26,43 @@
 
 #include "internal.h"
 
+#if defined(CONFIG_DYNAMIC_DEBUG)
+inline void __ahash_debug_walk(const char *_func, const unsigned long _line,
+	const struct crypto_hash_walk *walkptr,
+	const unsigned long len,
+	const char *tag,
+	const bool hexdump)
+{
+	pr_debug("%s:%lu - %s%sstruct crypto_hash_walk *walk: (hexdump: %s)\n"
+		 "\twalk->data:      0x%pK\n"
+		 "\twalk->offset:    0x%016lx\n"
+		 "\twalk->alignmask: 0x%016lx\n"
+		 "\twalk->pg:        0x%pK\n"
+		 "\twalk->entrylen:  %lu\n"
+		 "\twalk->total:     %lu\n"
+		 "\twalk->sg:        0x%pK\n"
+		 "\twalk->flags:     0x%016lx\n",
+		 _func, _line, tag, (strlen(tag)) ? " - " : "",
+		 (hexdump) ? "true" : "false",
+		 (walkptr)->data,
+		 (unsigned long) (walkptr)->offset,
+		 (unsigned long) (walkptr)->alignmask,
+		 (walkptr)->pg,
+		 (unsigned long) (walkptr)->entrylen,
+		 (unsigned long) (walkptr)->total,
+		 (walkptr)->sg,
+		 (unsigned long) (walkptr)->flags);
+	if (hexdump && (walkptr)->data) {
+		print_block_debug("walk->data:", (walkptr)->data, (len));
+	}
+}
+
+#define ahash_debug_walk(walkptr, len, tag, hexdump) \
+	__ahash_debug_walk(__FUNCTION__, __LINE__, walkptr, len, tag, hexdump)
+#else
+#define ahash_debug_walk(...)
+#endif
+
 struct ahash_request_priv {
 	crypto_completion_t complete;
 	void *data;
@@ -46,6 +83,7 @@ static int hash_walk_next(struct crypto_hash_walk *walk)
 	unsigned int nbytes = min(walk->entrylen,
 				  ((unsigned int)(PAGE_SIZE)) - offset);
 
+	ahash_debug_walk(walk, nbytes, "BEFORE kmap()", false);
 	walk->data = crypto_kmap(walk->pg, 0);
 	walk->data += offset;
 
@@ -56,6 +94,7 @@ static int hash_walk_next(struct crypto_hash_walk *walk)
 	}
 
 	walk->entrylen -= nbytes;
+	ahash_debug_walk(walk, nbytes, "AFTER kmap()", true);
 	return nbytes;
 }
 
@@ -72,6 +111,7 @@ static int hash_walk_new_entry(struct crypto_hash_walk *walk)
 		walk->entrylen = walk->total;
 	walk->total -= walk->entrylen;
 
+	ahash_debug_walk(walk, 0, "", false);
 	return hash_walk_next(walk);
 }
 
@@ -80,6 +120,8 @@ int crypto_hash_walk_done(struct crypto_hash_walk *walk, int err)
 	unsigned int alignmask = walk->alignmask;
 	unsigned int nbytes = walk->entrylen;
 
+	ahash_debug_walk(walk, nbytes, "", true);
+
 	walk->data -= walk->offset;
 
 	if (nbytes && walk->offset & alignmask && !err) {
@@ -90,6 +132,7 @@ int crypto_hash_walk_done(struct crypto_hash_walk *walk, int err)
 			     ((unsigned int)(PAGE_SIZE)) - walk->offset);
 		walk->entrylen -= nbytes;
 
+		ahash_debug_walk(walk, walk->entrylen, "alignment", true);
 		return nbytes;
 	}
 
@@ -110,6 +153,7 @@ int crypto_hash_walk_done(struct crypto_hash_walk *walk, int err)
 
 	walk->sg = scatterwalk_sg_next(walk->sg);
 
+	ahash_debug_walk(walk, 0, "", false);
 	return hash_walk_new_entry(walk);
 }
 EXPORT_SYMBOL_GPL(crypto_hash_walk_done);
@@ -143,6 +187,7 @@ int crypto_hash_walk_first_compat(struct hash_desc *hdesc,
 	walk->sg = sg;
 	walk->flags = hdesc->flags;
 
+	ahash_debug_walk(walk, 0, "", false);
 	return hash_walk_new_entry(walk);
 }
 
diff --git a/crypto/md5.c b/crypto/md5.c
index 7febeaa..c3a8335 100644
--- a/crypto/md5.c
+++ b/crypto/md5.c
@@ -65,29 +65,58 @@ static int md5_update(struct shash_desc *desc, const u8 *data, unsigned int len)
 	struct md5_state *mctx = shash_desc_ctx(desc);
 	const u32 avail = sizeof(mctx->block) - (mctx->byte_count & 0x3f);
 
+	pr_debug("%s:%d - desc: %pK\n\tdata: %pK\n\tlen: %llu\n\tmctx: %pK\n\t"
+		"sizeof(mctx->block): %llu\n\tmctx->byte_count: %llu\n\tavail: %llu\n",
+		__FUNCTION__, __LINE__,
+		desc,
+		data,
+		(unsigned long long) len,
+		mctx,
+		sizeof(mctx->block),
+		(unsigned long long) mctx->byte_count,
+		(unsigned long long) avail);
+	print_block_debug("data", data, len);
+	print_block_debug("initial block", mctx->block, sizeof(mctx->block));
+
 	mctx->byte_count += len;
 
 	if (avail > len) {
 		memcpy((char *)mctx->block + (sizeof(mctx->block) - avail),
 		       data, len);
+		print_block_debug("avail > len block", mctx->block, sizeof(mctx->block));
 		return 0;
 	}
 
 	memcpy((char *)mctx->block + (sizeof(mctx->block) - avail),
 	       data, avail);
 
+
+	print_block_debug("pre init md5_transform_helper block", mctx->block, sizeof(mctx->block));
+	print_block_debug("pre init md5_transform_helper hash", mctx->hash, sizeof(mctx->hash));
+
 	md5_transform_helper(mctx);
 	data += avail;
 	len -= avail;
 
+	print_block_debug("post md5_transform_helper block", mctx->block, sizeof(mctx->block));
+	print_block_debug("post md5_transform_helper hash", mctx->hash, sizeof(mctx->hash));
+
 	while (len >= sizeof(mctx->block)) {
+		print_block_debug("md5 block", mctx->block, sizeof(mctx->block));
+		print_block_debug("md5 hash", mctx->hash, sizeof(mctx->hash));
 		memcpy(mctx->block, data, sizeof(mctx->block));
+		print_block_debug("md5 block", mctx->block, sizeof(mctx->block));
+		print_block_debug("md5 hash", mctx->hash, sizeof(mctx->hash));
 		md5_transform_helper(mctx);
 		data += sizeof(mctx->block);
 		len -= sizeof(mctx->block);
+		print_block_debug("md5 block", mctx->block, sizeof(mctx->block));
+		print_block_debug("md5 hash", mctx->hash, sizeof(mctx->hash));
 	}
 
 	memcpy(mctx->block, data, len);
+	print_block_debug("md5 block final", mctx->block, sizeof(mctx->block));
+	print_block_debug("md5 hash final", mctx->hash, sizeof(mctx->hash));
 
 	return 0;
 }
diff --git a/crypto/shash.c b/crypto/shash.c
index f507294..6049fbc 100644
--- a/crypto/shash.c
+++ b/crypto/shash.c
@@ -101,6 +101,8 @@ int crypto_shash_update(struct shash_desc *desc, const u8 *data,
 	struct shash_alg *shash = crypto_shash_alg(tfm);
 	unsigned long alignmask = crypto_shash_alignmask(tfm);
 
+	print_block_debug("before update", data, len);
+
 	if ((unsigned long)data & alignmask)
 		return shash_update_unaligned(desc, data, len);
 
@@ -393,6 +395,11 @@ static int shash_compat_update(struct hash_desc *hdesc, struct scatterlist *sg,
 	struct crypto_hash_walk walk;
 	int nbytes;
 
+	pr_debug("%s:%d\n"
+			 "\twalk:  %pK\n"
+			 "\tdesc:  %pk\n"
+			 "\tdescp: %pK\n", __FUNCTION__, __LINE__, &walk, desc, descp);
+
 	for (nbytes = crypto_hash_walk_first_compat(hdesc, &walk, sg, len);
 	     nbytes > 0; nbytes = crypto_hash_walk_done(&walk, nbytes))
 		nbytes = crypto_shash_update(desc, walk.data, nbytes);
diff --git a/include/linux/printk.h b/include/linux/printk.h
index 8815d9d..8ab912f 100644
--- a/include/linux/printk.h
+++ b/include/linux/printk.h
@@ -292,9 +292,15 @@ extern void print_hex_dump(const char *level, const char *prefix_str,
 			   int prefix_type, int rowsize, int groupsize,
 			   const void *buf, size_t len, bool ascii);
 #if defined(CONFIG_DYNAMIC_DEBUG)
+#define print_block_debug(str, buf, len) \
+	do { \
+		pr_debug("%s:%d - %s:\n", __FUNCTION__, __LINE__, (str)); \
+		print_hex_dump_bytes("    ", DUMP_PREFIX_ADDRESS, (buf), (len)); \
+	} while(0)
 #define print_hex_dump_bytes(prefix_str, prefix_type, buf, len) \
 	dynamic_hex_dump(prefix_str, prefix_type, 16, 1, buf, len, true)
 #else
+#define print_block_debug(str, buf, len) do { } while(0)
 extern void print_hex_dump_bytes(const char *prefix_str, int prefix_type,
 				 const void *buf, size_t len);
 #endif /* defined(CONFIG_DYNAMIC_DEBUG) */
@@ -309,6 +315,7 @@ static inline void print_hex_dump_bytes(const char *prefix_str, int prefix_type,
 {
 }
 
+#define print_block_debug(str, buf, len) do { } while(0)
 #endif
 
 #endif
diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
index fe381c2..864515f 100644
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -277,6 +277,27 @@
 #include <asm/uaccess.h>
 #include <asm/ioctls.h>
 
+#include <linux/crypto.h>
+#include <linux/scatterlist.h>
+#include <crypto/hash.h>
+#include <crypto/md5.h>
+
+#if defined(CONFIG_DYNAMIC_DEBUG)
+#define print_sg_block_debug(header, sg) \
+	do { \
+		pr_debug("%s:%d - %s%sstruct scatterlist sg:\n" \
+				 "\tsg addr:       %pK\n" \
+				 "\tsg->page_link: %016lx\n" \
+				 "\tsg->offset:    %016lx\n" \
+				 "\tsg->length:    %016lx\n", \
+				 __FUNCTION__, __LINE__, (header), \
+				 (strlen(header)) ? " - " : "", \
+				 (sg), (sg)->page_link, (unsigned long) (sg)->offset, (unsigned long) (sg)->length); \
+	} while(0)
+#else
+#define print_sg_block_debug(header, sg)
+#endif
+
 int sysctl_tcp_fin_timeout __read_mostly = TCP_FIN_TIMEOUT;
 
 struct percpu_counter tcp_orphan_count;
@@ -3005,14 +3026,24 @@ int tcp_md5_hash_header(struct tcp_md5sig_pool *hp,
 	struct scatterlist sg;
 	struct tcphdr hdr;
 	int err;
+	struct md5_state *mctx;
 
 	/* We are not allowed to change tcphdr, make a local copy */
 	memcpy(&hdr, th, sizeof(hdr));
 	hdr.check = 0;
 
+	print_block_debug("input", &hdr, sizeof(hdr));
+
 	/* options aren't included in the hash */
 	sg_init_one(&sg, &hdr, sizeof(hdr));
+	print_sg_block_debug("sg on stack", &sg);
 	err = crypto_hash_update(&hp->md5_desc, &sg, sizeof(hdr));
+
+	mctx = shash_desc_ctx((struct shash_desc *) &(hp->md5_desc));
+	pr_debug("%s:%d - mctx: %pK\n", __func__, __LINE__, mctx);
+	print_block_debug("md5 block", mctx->block, sizeof(mctx->block));
+	print_block_debug("md5 hash", mctx->hash, sizeof(mctx->hash));
+
 	return err;
 }
 EXPORT_SYMBOL(tcp_md5_hash_header);
@@ -3029,7 +3060,10 @@ int tcp_md5_hash_skb_data(struct tcp_md5sig_pool *hp,
 	const struct skb_shared_info *shi = skb_shinfo(skb);
 	struct sk_buff *frag_iter;
 
+	pr_debug("%s:%d - head_data_len %llu\n", __FUNCTION__, __LINE__,
+		 (unsigned long long) head_data_len);
 	sg_init_table(&sg, 1);
+	print_sg_block_debug("sg on stack", &sg);
 
 	sg_set_buf(&sg, ((u8 *) tp) + header_len, head_data_len);
 	if (crypto_hash_update(desc, &sg, head_data_len))
@@ -3054,9 +3088,21 @@ EXPORT_SYMBOL(tcp_md5_hash_skb_data);
 int tcp_md5_hash_key(struct tcp_md5sig_pool *hp, const struct tcp_md5sig_key *key)
 {
 	struct scatterlist sg;
+	int err;
+	struct md5_state *mctx;
+
+	print_block_debug("input", key->key, key->keylen);
 
 	sg_init_one(&sg, key->key, key->keylen);
-	return crypto_hash_update(&hp->md5_desc, &sg, key->keylen);
+	print_sg_block_debug("sg on stack", &sg);
+	err = crypto_hash_update(&hp->md5_desc, &sg, key->keylen);
+
+	mctx = shash_desc_ctx((struct shash_desc *) &(hp->md5_desc));
+	pr_debug("%s:%d - mctx: %pK\n", __func__, __LINE__, mctx);
+	print_block_debug("md5 block", mctx->block, sizeof(mctx->block));
+	print_block_debug("md5 hash", mctx->hash, sizeof(mctx->hash));
+
+	return err;
 }
 EXPORT_SYMBOL(tcp_md5_hash_key);
 
diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
index a97c9ad..3d7b3b5 100644
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -83,6 +83,10 @@
 #include <linux/crypto.h>
 #include <linux/scatterlist.h>
 
+#include <crypto/hash.h>
+#include <crypto/md5.h>
+#include <linux/kernel.h>
+
 int sysctl_tcp_tw_reuse __read_mostly;
 int sysctl_tcp_low_latency __read_mostly;
 EXPORT_SYMBOL(sysctl_tcp_low_latency);
@@ -93,6 +97,22 @@ static struct tcp_md5sig_key *tcp_v4_md5_do_lookup(struct sock *sk,
 						   __be32 addr);
 static int tcp_v4_md5_hash_hdr(char *md5_hash, struct tcp_md5sig_key *key,
 			       __be32 daddr, __be32 saddr, const struct tcphdr *th);
+
+#if defined(CONFIG_DYNAMIC_DEBUG)
+#define print_sg_block_debug(header, sg) \
+	do { \
+		pr_debug("%s:%d - %s%sstruct scatterlist sg:\n" \
+				 "\tsg addr:       %pK\n" \
+				 "\tsg->page_link: %016lx\n" \
+				 "\tsg->offset:    %016lx\n" \
+				 "\tsg->length:    %016lx\n", \
+				 __FUNCTION__, __LINE__, (header), \
+				 (strlen(header)) ? " - " : "", \
+				 (sg), (sg)->page_link, (unsigned long) (sg)->offset, (unsigned long) (sg)->length); \
+	} while(0)
+#else
+#define print_sg_block_debug(header, sg)
+#endif
 #else
 static inline
 struct tcp_md5sig_key *tcp_v4_md5_do_lookup(struct sock *sk, __be32 addr)
@@ -1094,7 +1114,13 @@ static int tcp_v4_md5_hash_pseudoheader(struct tcp_md5sig_pool *hp,
 	bp->protocol = IPPROTO_TCP;
 	bp->len = cpu_to_be16(nbytes);
 
+	pr_debug("%s:%d - virt & phys addrs\n"
+			 "\tvirt_to_page(bp):   %pK\n"
+			 "\tvirt_to_phys(bp):   %pK\n",
+			 __FUNCTION__, __LINE__, virt_to_page(bp), (void *) virt_to_phys(bp));
 	sg_init_one(&sg, bp, sizeof(*bp));
+	print_block_debug("pseudoheader - bp", bp, sizeof(*bp));
+	print_sg_block_debug("sg on stack", &sg);
 	return crypto_hash_update(&hp->md5_desc, &sg, sizeof(*bp));
 }
 
@@ -1156,17 +1182,32 @@ int tcp_v4_md5_hash_skb(char *md5_hash, struct tcp_md5sig_key *key,
 		goto clear_hash_noput;
 	desc = &hp->md5_desc;
 
+	pr_debug("%s:%d:%s() - hp = 0x%pK", __FILE__, __LINE__, __func__, hp);
+	print_block_debug("(struct tcp_md5sig_pool) hp", hp, sizeof(*hp));
+
 	if (crypto_hash_init(desc))
 		goto clear_hash;
 
+	pr_debug("%s:%d Begin MD5 calculation - tcp_v4_md5_hash_pseudoheader\n",
+			__FUNCTION__, __LINE__);
 	if (tcp_v4_md5_hash_pseudoheader(hp, daddr, saddr, skb->len))
 		goto clear_hash;
+	pr_debug("%s:%d:%s() - hp = 0x%pK", __FILE__, __LINE__, __func__, hp);
+	print_block_debug("(struct tcp_md5sig_pool) hp", hp, sizeof(*hp));
+	pr_debug("%s:%d tcp_md5_hash_header\n", __FUNCTION__, __LINE__);
 	if (tcp_md5_hash_header(hp, th))
 		goto clear_hash;
+	pr_debug("%s:%d:%s() - hp = 0x%pK", __FILE__, __LINE__, __func__, hp);
+	print_block_debug("(struct tcp_md5sig_pool) hp", hp, sizeof(*hp));
+	pr_debug("%s:%d tcp_md5_hash_skb_data\n", __FUNCTION__, __LINE__);
 	if (tcp_md5_hash_skb_data(hp, skb, th->doff << 2))
 		goto clear_hash;
+	pr_debug("%s:%d:%s() - hp = 0x%pK", __FILE__, __LINE__, __func__, hp);
+	print_block_debug("(struct tcp_md5sig_pool) hp", hp, sizeof(*hp));
+	pr_debug("%s:%d tcp_md5_hash_key\n", __FUNCTION__, __LINE__);
 	if (tcp_md5_hash_key(hp, key))
 		goto clear_hash;
+	pr_debug("%s:%d crypto_hash_final\n", __FUNCTION__, __LINE__);
 	if (crypto_hash_final(desc, md5_hash))
 		goto clear_hash;
 
@@ -1215,6 +1256,8 @@ static int tcp_v4_inbound_md5_hash(struct sock *sk, const struct sk_buff *skb)
 		return 1;
 	}
 
+	pr_debug("vvvvvvvvvvvvvvvv START MD5 TCP Calc START vvvvvvvvvvvvvvvv\n");
+
 	/* Okay, so this is hash_expected and hash_location -
 	 * so we need to calculate the checksum.
 	 */
@@ -1222,6 +1265,11 @@ static int tcp_v4_inbound_md5_hash(struct sock *sk, const struct sk_buff *skb)
 				      hash_expected,
 				      NULL, NULL, skb);
 
+	print_block_debug("MD5 Hash (hash_expected)", hash_expected->key, hash_expected->keylen);
+	print_block_debug("MD5 Hash calculated (newhash)", newhash, sizeof(newhash));
+	print_block_debug("MD5 Hash pkt (hash_location)", hash_location, 16);
+	pr_debug("^^^^^^^^^^^^^^^^ END MD5 TCP Calc END ^^^^^^^^^^^^^^^^^\n");
+
 	if (genhash || memcmp(hash_location, newhash, 16) != 0) {
 		if (net_ratelimit()) {
 			printk(KERN_INFO "MD5 Hash failed for (%pI4, %d)->(%pI4, %d)%s\n",
