

diff --git a/include/linux/if_link.h b/include/linux/if_link.h
index 42a7c70..c71616e 100644
--- a/include/linux/if_link.h
+++ b/include/linux/if_link.h
@@ -219,6 +219,8 @@ enum {
 	IFLA_BRPORT_FAST_LEAVE, /* multicast fast leave    */
 	IFLA_BRPORT_LEARNING,   /* mac learning */
 	IFLA_BRPORT_UNICAST_FLOOD, /* flood unicast traffic */
+	IFLA_BRPORT_LEARN_PRIO = 253, /* fdb learn priority      */
+	IFLA_BRPORT_LEARN_FILTER,  /* fdb learn filter     */
 	__IFLA_BRPORT_MAX
 };
 #define IFLA_BRPORT_MAX (__IFLA_BRPORT_MAX - 1)
diff --git a/net/bridge/br_fdb.c b/net/bridge/br_fdb.c
index 924e87d..f1b4eb1 100644
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@ -466,10 +466,15 @@ static int fdb_insert(struct net_bridge *br, struct net_bridge_port *source,
 			/* address is already static (interface/bridge) so nop */
 			return 0;
 		} else {
+			if ((fdb->dst != source) && source && fdb->dst &&
+			    source->learn_filter &&
+			    (fdb->dst->learn_prio > source->learn_prio))
+				return 0;
+
 			/* add an interface address over a learned one */
 			br_warn(br, "adding interface %s with same address "
 				"as a received packet\n",
-				source->dev->name);
+				source ? source->dev->name : br->dev->name);
 		}
 		fdb_delete(br, fdb);
 	}
@@ -520,6 +525,11 @@ void br_fdb_update(struct net_bridge *br, struct net_bridge_port *source,
 					source->dev->name);
 		} else {
 			/* fastpath: update of existing entry */
+			if (fdb->dst && source && (fdb->dst != source) &&
+			    source->learn_filter &&
+			    (fdb->dst->learn_prio > source->learn_prio))
+				return;
+
 			fdb->dst = source;
 			fdb->updated = jiffies;
 		}
@@ -684,6 +694,10 @@ static int fdb_add_entry(struct net_bridge_port *source, const __u8 *addr,
 			return -EEXIST;
 
 		if (fdb->dst != source) {
+			if (source->learn_filter && source && fdb->dst &&
+			    (fdb->dst->learn_prio > source->learn_prio) &&
+			    !(flags & NLM_F_REPLACE))
+				return 0;
 			fdb->dst = source;
 			modified = true;
 		}
diff --git a/net/bridge/br_input.c b/net/bridge/br_input.c
index 874907a..fcde1ca 100644
--- a/net/bridge/br_input.c
+++ b/net/bridge/br_input.c
@@ -152,8 +152,14 @@ static int br_handle_local_finish(struct sk_buff *skb)
 	u16 vid = 0;
 
 	br_vlan_get_tag(skb, &vid);
-	if (!br_hw_fwding_enabled && (p->flags & BR_LEARNING))
+	if (!br_hw_fwding_enabled && (p->flags & BR_LEARNING)) {
+		if (vid == 0 && p->br->vlan_enabled) {
+			struct net_port_vlans *pv = nbp_get_vlan_info(p);
+			if (pv)
+				vid = br_get_pvid(pv);
+		}
 		br_fdb_update(p->br, p, eth_hdr(skb)->h_source, vid);
+	}
 	return 0;	 /* process further */
 }
 
diff --git a/net/bridge/br_netlink.c b/net/bridge/br_netlink.c
index 882072e..c86b0aa 100644
--- a/net/bridge/br_netlink.c
+++ b/net/bridge/br_netlink.c
@@ -34,6 +34,8 @@ static inline size_t br_port_info_size(void)
 		+ nla_total_size(1)	/* IFLA_BRPORT_FAST_LEAVE */
 		+ nla_total_size(1)	/* IFLA_BRPORT_LEARNING */
 		+ nla_total_size(1)	/* IFLA_BRPORT_UNICAST_FLOOD */
+		+ nla_total_size(1)     /* IFLA_BRPORT_LEARN_PRIO */
+		+ nla_total_size(1)     /* IFLA_BRPORT_LEARN_FILTER */
 		+ 0;
 }
 
@@ -58,6 +60,8 @@ static int br_port_fill_attrs(struct sk_buff *skb,
 	    nla_put_u16(skb, IFLA_BRPORT_PRIORITY, p->priority) ||
 	    nla_put_u32(skb, IFLA_BRPORT_COST, p->path_cost) ||
 	    nla_put_u8(skb, IFLA_BRPORT_MODE, mode) ||
+	    nla_put_u8(skb, IFLA_BRPORT_LEARN_PRIO, p->learn_prio) ||
+	    nla_put_u8(skb, IFLA_BRPORT_LEARN_FILTER, p->learn_filter) ||
 	    nla_put_u8(skb, IFLA_BRPORT_GUARD, !!(p->flags & BR_BPDU_GUARD)) ||
 	    nla_put_u8(skb, IFLA_BRPORT_PROTECT, !!(p->flags & BR_ROOT_BLOCK)) ||
 	    nla_put_u8(skb, IFLA_BRPORT_FAST_LEAVE, !!(p->flags & BR_MULTICAST_FAST_LEAVE)) ||
@@ -384,6 +388,8 @@ static const struct nla_policy ifla_brport_policy[IFLA_BRPORT_MAX + 1] = {
 	[IFLA_BRPORT_PROTECT]	= { .type = NLA_U8 },
 	[IFLA_BRPORT_LEARNING]	= { .type = NLA_U8 },
 	[IFLA_BRPORT_UNICAST_FLOOD] = { .type = NLA_U8 },
+	[IFLA_BRPORT_LEARN_PRIO] = { .type = NLA_U8 },
+	[IFLA_BRPORT_LEARN_FILTER] = { .type = NLA_U8 },
 };
 
 /* Change the state of the port and notify spanning tree */
@@ -418,6 +424,18 @@ static void br_set_port_flag(struct net_bridge_port *p, struct nlattr *tb[],
 	}
 }
 
+static int br_set_port_learn_prio(struct net_bridge_port *p, u8 prio)
+{
+	p->learn_prio = prio;
+	return 0;
+}
+
+static int br_set_port_learn_filter(struct net_bridge_port *p, u8 enable)
+{
+	p->learn_filter = enable;
+	return 0;
+}
+
 /* Process bridge protocol info on port */
 static int br_setport(struct net_bridge_port *p, struct nlattr *tb[])
 {
@@ -447,6 +465,18 @@ static int br_setport(struct net_bridge_port *p, struct nlattr *tb[])
 		if (err)
 			return err;
 	}
+
+	if (tb[IFLA_BRPORT_LEARN_PRIO]) {
+		err = br_set_port_learn_prio(p, nla_get_u8(tb[IFLA_BRPORT_LEARN_PRIO]));
+		if (err)
+			return err;
+	}
+
+	if (tb[IFLA_BRPORT_LEARN_FILTER]) {
+		err = br_set_port_learn_filter(p, nla_get_u8(tb[IFLA_BRPORT_LEARN_FILTER]));
+		if (err)
+			return err;
+	}
 	return 0;
 }
 
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index c80f94d..a0cc902 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -195,6 +195,8 @@ struct net_bridge_port
 #ifdef CONFIG_BRIDGE_VLAN_FILTERING
 	struct net_port_vlans __rcu	*vlan_info;
 #endif
+	u8				learn_prio;
+	u8				learn_filter;
 };
 
 #define br_port_exists(dev) (dev->priv_flags & IFF_BRIDGE_PORT)
