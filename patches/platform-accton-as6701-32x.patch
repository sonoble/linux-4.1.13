Platform Accton AS6701-32X patch

Support for the Accton AS6701-32X networking platform.

diff --git a/arch/powerpc/boot/dts/accton_as6701_32x.dts b/arch/powerpc/boot/dts/accton_as6701_32x.dts
new file mode 100644
index 0000000..2d21e97
--- /dev/null
+++ b/arch/powerpc/boot/dts/accton_as6701_32x.dts
@@ -0,0 +1,237 @@
+/*
+ * Accton Technology AS6701_32X Device Tree Source
+ *
+ * This program is free software; you can redistribute	it and/or modify it
+ * under  the terms of	the GNU General	 Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+/include/ "p2020si.dtsi"
+
+/ {
+	model = "accton,as6701_32x";
+	compatible = "accton,as6701_32x";
+
+	aliases {
+		ethernet0 = &enet1;
+		serial0 = &serial0;
+		pci2 = &pci2;
+	};
+	memory {
+		device_type = "memory";
+	};
+	bcm_dma {
+		compatible = "early-dma-alloc";
+		// 64MB DMA region, aligned to 1MB
+		region_size = <0x04000000>;
+		alignment   = <0x00100000>;
+	};
+	localbus@ffe05000 {
+		ranges = <0x0 0x0 0x0 0xec000000 0x04000000>;
+		flash@0,0 {
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			compatible = "cfi-flash";
+			reg = <0x0 0x0 0x04000000>;
+			bank-width = <0x2>;
+			device-width = <0x2>;
+			partition@0 {
+				reg = <0x00000000 0x00020000>;
+				label = "Reserved P0";
+			};
+			partition@1 {
+				reg = <0x00020000 0x00020000>;
+				label = "board_eeprom";
+			};
+			partition@2 {
+				reg = <0x00040000 0x00d00000>;
+				label = "onie";
+			};
+			partition@3 {
+				reg = <0x00d40000 0x02000000>;
+				label = "diag";
+			};
+			partition@4 {
+				reg = <0x02d40000 0x01200000>;
+				label = "open";
+			};
+			partition@5 {
+				reg = <0x03f40000 0x00020000>;
+				label = "Reserved P5";
+			};
+			partition@6 {
+				reg = <0x03f60000 0x00020000>;
+				label = "uboot-env";
+				env_size = <0x2000>;
+			};
+			partition@7 {
+				reg = <0x03f80000 0x00080000>;
+				label = "uboot";
+				read-only;
+			};
+		};
+	};
+
+	soc@ffe00000 {
+		i2c@3000 {
+			fsl,preserve-clocking;
+
+			mux@70 {
+			       compatible = "ti,pca9548";
+			       reg = <0x70>;
+			       #address-cells = <1>;
+			       #size-cells = <0>;
+
+			       i2c@0 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <0>;
+
+					rtc@51 {
+					       compatible = "epson,rtc8564";
+					       reg = <0x51>;
+					};
+			       };
+			       i2c@1 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <1>;
+
+					spd_eeprom@50 {
+					       compatible = "at,24c02";
+					       reg = <0x50>;
+					       read-only;
+					};
+			       };
+			       i2c@2 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <2>;
+					/* Not sure what the two addr per PSU are for */
+					/*
+					** The eeprom utilities look for a label that
+					** ends with "_eeprom".
+					*/
+					psu_eeprom@39 {
+						compatible = "at,24c02";
+						reg = <0x39>;
+						/* Haven't seen this one work yet */
+						label = "psu1_eeprom";
+						read-only;
+					};
+					psu_unknown@3d {
+						compatible = "at,24c02";
+						reg = <0x3d>;
+						/* Haven't seen this one work yet */
+						// label = "psu1_eeprom2";
+						read-only;
+					};
+					psu_eeprom@3a {
+						compatible = "at,24c02";
+						reg = <0x3a>;
+						/* This one contains valid data */
+						label = "psu2_eeprom";
+						read-only;
+					};
+					psu_unknown@3e {
+						compatible = "at,24c02";
+						reg = <0x3e>;
+						/* This one is unformatted */
+						// label = "psu2_eeprom2";
+						read-only;
+					};
+			       };
+			       i2c@3 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <3>;
+
+					temp@4d {
+						compatible = "maxim,max6581";
+						reg = <0x4d>;
+					};
+			       };
+			       i2c@4 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <4>;
+
+					// SMSC USB2513i - USB Hub.
+					// Handled by u-boot, leave blank here.
+					// addr 0x2C
+			       };
+		       };
+		};
+		i2c@3100 {
+			fsl,preserve-clocking;
+
+			/include/ "accton_as670x_baseboard_i2c.dtsi"
+		};
+		serial1: serial@4600 {
+		        status = "disabled";
+		};
+
+		usb@22000 {
+			status = "disabled";
+			phy_type = "ulpi";
+			dr_mode = "host";
+		};
+
+		mdio@24520 {
+			phy0: ethernet-phy@1 {
+				reg = <0x1>;
+				device_type = "ethernet-phy";
+			};
+		};
+
+		enet0: ethernet@24000 {
+		        status = "disabled";
+		};
+
+		enet1: ethernet@25000 {
+			phy-handle = <&phy0>;
+			tbi-handle = <&tbi0>;
+			phy-connection-type = "sgmii";
+		};
+
+		mdio@25520 {
+			tbi0: tbi-phy@11 {
+				reg = <0x11>;
+				device_type = "tbi-phy";
+			};
+		};
+
+		enet2: ethernet@26000 {
+		        status = "disabled";
+		};
+	};
+
+	pci0: pcie@ffe08000 {
+		status = "disabled";
+	};
+
+	pci1: pcie@ffe09000 {
+		status = "disabled";
+	};
+
+	pci2: pcie@ffe0a000 {
+		ranges = <0x2000000 0x0 0x80000000 0x0 0x80000000 0x0 0x20000000
+			  0x1000000 0x0 0x00000000 0x0 0xffc00000 0x0 0x00010000>;
+		interrupt-map-mask = <0xf800 0x0 0x0 0x7>;
+		interrupt-map = <
+			      /* IDSEL 0x0 */
+			      0x0 0x0 0x0 0x1 &mpic 0x0 0x1
+			      0x0 0x0 0x0 0x2 &mpic 0x1 0x1
+			      0x0 0x0 0x0 0x3 &mpic 0x2 0x1
+			      0x0 0x0 0x0 0x4 &mpic 0x3 0x1>;
+		pcie@0 {
+			reg = <0x0 0x0 0x0 0x0 0x0>;
+			#size-cells = <0x2>;
+			#address-cells = <0x3>;
+			device_type = "pci";
+			ranges = <0x2000000 0x0 0x80000000 0x2000000 0x0 0x80000000 0x0 0x20000000
+				  0x1000000 0x0 0x00000000 0x1000000 0x0 0x00000000 0x0 0x10000>;
+		};
+	};
+};
diff --git a/arch/powerpc/platforms/85xx/accton_as6701_32x.c b/arch/powerpc/platforms/85xx/accton_as6701_32x.c
new file mode 100644
index 0000000..aba43c3
--- /dev/null
+++ b/arch/powerpc/platforms/85xx/accton_as6701_32x.c
@@ -0,0 +1,183 @@
+/*
+ * Accton AS6701-32X setup and early boot code plus other random bits.
+ *
+ * This program is free software; you can redistribute	it and/or modify it
+ * under  the terms of	the GNU General	 Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+#include <linux/stddef.h>
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/kdev_t.h>
+#include <linux/delay.h>
+#include <linux/seq_file.h>
+#include <linux/interrupt.h>
+#include <linux/of_platform.h>
+#include <linux/early_dma_alloc.h>
+
+#include <asm/system.h>
+#include <asm/time.h>
+#include <asm/machdep.h>
+#include <asm/pci-bridge.h>
+#include <mm/mmu_decl.h>
+#include <asm/prom.h>
+#include <asm/udbg.h>
+#include <asm/mpic.h>
+
+#include <sysdev/fsl_soc.h>
+#include <sysdev/fsl_pci.h>
+
+// #undef DEBUG
+
+#ifdef DEBUG
+#define DBG(fmt, args...) printk(KERN_ERR "%s: " fmt, __func__, ## args)
+#else
+#define DBG(fmt, args...)
+#endif
+
+/*******************************************************************************
+ *
+ * Platform initialization functions
+ *
+ *******************************************************************************
+*/
+
+/*
+ * Initialize the interrupt controller
+ */
+static void __init as6701_32x_pic_init(void)
+{
+	struct mpic *mpic;
+	struct resource r;
+	struct device_node *np;
+
+	np = of_find_node_by_type(NULL, "open-pic");
+	if (np == NULL) {
+		printk(KERN_ERR "Could not find open-pic node\n");
+		return;
+	}
+
+	if (of_address_to_resource(np, 0, &r)) {
+		printk(KERN_ERR "Failed to map mpic register space\n");
+		of_node_put(np);
+		return;
+	}
+
+	mpic = mpic_alloc(np, r.start,
+		  MPIC_PRIMARY | MPIC_WANTS_RESET |
+		  MPIC_BIG_ENDIAN | MPIC_BROKEN_FRR_NIRQS |
+		  MPIC_SINGLE_DEST_CPU,
+		  0, 256, " OpenPIC  ");
+
+	BUG_ON(mpic == NULL);
+	of_node_put(np);
+
+	mpic_init(mpic);
+}
+
+/*
+ * Setup the architecture
+ */
+#ifdef CONFIG_SMP
+extern void __init mpc85xx_smp_init(void);
+#endif
+
+static void __init as6701_32x_setup_arch(void)
+{
+	struct device_node *cpu;
+	const unsigned int *fp;
+#ifdef CONFIG_PCI
+	struct device_node *np;
+#endif
+
+	cpu = of_find_node_by_type(NULL, "cpu");
+	if (cpu != 0) {
+	     fp = of_get_property(cpu, "clock-frequency", NULL);
+	     if (fp != 0)
+		  loops_per_jiffy = *fp / HZ;
+	     else
+		  loops_per_jiffy = 500000000 / HZ;
+	     of_node_put(cpu);
+	}
+
+#ifdef CONFIG_PCI
+	for_each_node_by_type(np, "pci") {
+		if (of_device_is_compatible(np, "fsl,mpc8548-pcie"))
+			fsl_add_bridge(np, 0);
+	}
+#endif
+	powersave_nap = 0;
+
+#ifdef CONFIG_SMP
+	mpc85xx_smp_init();
+#endif
+
+#ifdef CONFIG_EARLY_DMA_ALLOC
+	eda_init();
+#endif
+}
+
+static struct of_device_id __initdata as6701_32x_ids[] = {
+	{ .type = "soc", },
+	{ .compatible = "soc", },
+	{ .compatible = "simple-bus", },
+	{ .compatible = "gianfar", },
+	{},
+};
+
+static int __init as6701_32x_publish_devices(void)
+{
+	return of_platform_bus_probe(NULL, as6701_32x_ids, NULL);
+}
+machine_device_initcall(as6701_32x, as6701_32x_publish_devices);
+
+static void as6701_32x_show_cpuinfo(struct seq_file *m)
+{
+	uint pvid, svid, phid1;
+	uint memsize = total_memory;
+
+	pvid = mfspr(SPRN_PVR);
+	svid = mfspr(SPRN_SVR);
+
+	seq_printf(m, "Vendor\t\t: Freescale Semiconductor\n");
+	seq_printf(m, "PVR\t\t: 0x%x\n", pvid);
+	seq_printf(m, "SVR\t\t: 0x%x\n", svid);
+
+	/* Display cpu Pll setting */
+	phid1 = mfspr(SPRN_HID1);
+	seq_printf(m, "PLL setting\t: 0x%x\n", ((phid1 >> 24) & 0x3f));
+
+	/* Display the amount of memory */
+	seq_printf(m, "Memory\t\t: %d MB\n", memsize / (1024 * 1024));
+}
+
+/*
+ * Called very early, device-tree isn't unflattened
+ */
+static int __init as6701_32x_probe(void)
+{
+	unsigned long root = of_get_flat_dt_root();
+
+	if (of_flat_dt_is_compatible(root, "accton,as6701_32x"))
+		return 1;
+
+	return 0;
+}
+
+define_machine(as6701_32x) {
+	.name		= "Accton Technology Corporation AS6701-32X",
+	.probe		= as6701_32x_probe,
+	.setup_arch	= as6701_32x_setup_arch,
+	.init_IRQ	= as6701_32x_pic_init,
+	.show_cpuinfo	= as6701_32x_show_cpuinfo,
+#ifdef CONFIG_PCI
+	.pcibios_fixup_bus	= fsl_pcibios_fixup_bus,
+#endif
+	.get_irq	= mpic_get_irq,
+	.power_save	= e500_idle,
+	.restart	= fsl_rstcr_restart,
+	.calibrate_decr = generic_calibrate_decr,
+	.progress	= udbg_progress,
+};
