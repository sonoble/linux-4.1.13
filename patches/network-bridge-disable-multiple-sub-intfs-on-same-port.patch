This patch disallows multiple sub interfaces on the same
port in the same bridge

ie swp1 and swp1.100 in the same bridge will be rejected.

diff --git a/net/bridge/br_if.c b/net/bridge/br_if.c
index 780076b..afaec72 100644
--- a/net/bridge/br_if.c
+++ b/net/bridge/br_if.c
@@ -344,17 +344,47 @@ static bool bridge_has_multiple_vlans(struct net_bridge *br)
 	return false;
 }
 
+/*
+ * Returns true if we are adding more than
+ * one interface with the same real_dev
+ * example: eth0 and eth0.100
+ */
+static bool br_port_realdev_exists(struct net_bridge *br,
+								   struct net_device *dev)
+{
+	struct net_bridge_port *p;
+	struct net_device *real_dev;
+	struct net_device *in_dev;
+
+	if (is_vlan_dev(dev))
+        in_dev = vlan_dev_real_dev(dev);
+    else
+        in_dev = dev;
+
+	list_for_each_entry_rcu(p, &br->port_list, list) {
+        if (in_dev == p->dev)
+            return true;
+        if (!is_vlan_dev(p->dev))
+            continue;
+        real_dev = vlan_dev_real_dev(p->dev);
+        if (in_dev == real_dev)
+            return true;
+    }
+
+    return false;
+}
+
 static bool is_port_in_different_vlan(struct net_bridge *br,
 				      struct net_device *dev)
 {
 	struct net_bridge_port *p;
+	struct net_device *real_dev;
 	u16 vlan_id;
 
 	if (!is_vlan_dev(dev))
-		return false;
+        return false;
 
 	vlan_id = vlan_dev_vlan_id(dev);
-
 	list_for_each_entry_rcu(p, &br->port_list, list) {
 		if (!is_vlan_dev(p->dev))
 			continue;
@@ -389,9 +419,18 @@ int br_add_if(struct net_bridge *br, struct net_device *dev)
 	if (dev->priv_flags & IFF_DONT_BRIDGE)
 		return -EOPNOTSUPP;
 
+	if (br_port_realdev_exists(br, dev)) {
+		pr_info("%s: %s: cannot add port %s (realdev already exists)\n",
+				__func__, br->dev->name, dev->name);
+		return -EINVAL;
+	}
+
 	/* No bridgeing vlan devices that have different vlan id */
-	if (!br_allow_multiple_vlans && is_port_in_different_vlan(br, dev))
+	if (!br_allow_multiple_vlans && is_port_in_different_vlan(br, dev)) {
+		pr_info("%s: %s: cannot add port %s (multiple vlan check failed)\n",
+				__func__, br->dev->name, dev->name);
 		return -EINVAL;
+	}
 
 	p = new_nbp(br, dev);
 	if (IS_ERR(p))
