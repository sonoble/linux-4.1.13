Suppress the kernel bridging of frames that would have already been forwarded
in hardware.

diff --git a/net/bridge/br.c b/net/bridge/br.c
index f20c4fd..d3f57c1 100644
--- a/net/bridge/br.c
+++ b/net/bridge/br.c
@@ -22,6 +22,11 @@
 
 #include "br_private.h"
 
+int br_hw_fwding_enabled = 1;
+
+MODULE_PARM_DESC(hw_fwding, "Enable hw forwarding");
+module_param_named(hw_fwding, br_hw_fwding_enabled, int, 0644);
+
 static const struct stp_proto br_stp_proto = {
 	.rcv	= br_stp_rcv,
 };
diff --git a/net/bridge/br_forward.c b/net/bridge/br_forward.c
index e221f88..1c9ba1b 100644
--- a/net/bridge/br_forward.c
+++ b/net/bridge/br_forward.c
@@ -26,6 +26,8 @@ static int deliver_clone(const struct net_bridge_port *prev,
 			 void (*__packet_hook)(const struct net_bridge_port *p,
 					       struct sk_buff *skb));
 
+extern int br_hw_fwding_enabled;
+
 /* Don't forward packets to originating port or forwarding diasabled */
 static inline int should_deliver(const struct net_bridge_port *p,
 				 const struct sk_buff *skb)
@@ -61,6 +63,12 @@ int br_forward_finish(struct sk_buff *skb)
 
 }
 
+int br_hw_forward_finish(struct sk_buff *skb)
+{
+	kfree_skb(skb);
+	return 0;
+
+}
 static void __br_deliver(const struct net_bridge_port *to, struct sk_buff *skb)
 {
 	skb->dev = to->dev;
@@ -83,6 +91,12 @@ static void __br_forward(const struct net_bridge_port *to, struct sk_buff *skb)
 {
 	struct net_device *indev;
 
+	if (br_hw_fwding_enabled) {
+		NF_HOOK(NFPROTO_BRIDGE, NF_BR_FORWARD, skb, skb->dev, to->dev,
+			br_hw_forward_finish);
+		return;
+	}
+
 	if (skb_warn_if_lro(skb)) {
 		kfree_skb(skb);
 		return;
diff --git a/net/bridge/br_input.c b/net/bridge/br_input.c
index 5a31731..8e0ca31 100644
--- a/net/bridge/br_input.c
+++ b/net/bridge/br_input.c
@@ -26,6 +26,8 @@ const u8 br_group_address[ETH_ALEN] = { 0x01, 0x80, 0xc2, 0x00, 0x00, 0x00 };
 br_should_route_hook_t __rcu *br_should_route_hook __read_mostly;
 EXPORT_SYMBOL(br_should_route_hook);
 
+extern int br_hw_fwding_enabled;
+
 static int br_pass_frame_up(struct sk_buff *skb)
 {
 	struct net_device *indev, *brdev = BR_INPUT_SKB_CB(skb)->brdev;
@@ -59,7 +61,9 @@ int br_handle_frame_finish(struct sk_buff *skb)
 
 	/* insert into forwarding database after filtering to avoid spoofing */
 	br = p->br;
-	br_fdb_update(br, p, eth_hdr(skb)->h_source);
+
+	if (!br_hw_fwding_enabled)
+		br_fdb_update(br, p, eth_hdr(skb)->h_source);
 
 	if (!is_broadcast_ether_addr(dest) && is_multicast_ether_addr(dest) &&
 	    br_multicast_rcv(br, p, skb))
@@ -123,7 +127,9 @@ static int br_handle_local_finish(struct sk_buff *skb)
 {
 	struct net_bridge_port *p = br_port_get_rcu(skb->dev);
 
-	br_fdb_update(p->br, p, eth_hdr(skb)->h_source);
+	if (!br_hw_fwding_enabled)
+		br_fdb_update(p->br, p, eth_hdr(skb)->h_source);
+
 	return 0;	 /* process further */
 }
 
diff --git a/net/bridge/br_netfilter.c b/net/bridge/br_netfilter.c
index 7c1745d..fc08e8b 100644
--- a/net/bridge/br_netfilter.c
+++ b/net/bridge/br_netfilter.c
@@ -42,6 +42,8 @@
 #include <linux/sysctl.h>
 #endif
 
+extern int br_hw_fwding_enabled;
+
 #define skb_origaddr(skb)	 (((struct bridge_skb_cb *) \
 				 (skb->nf_bridge->data))->daddr.ipv4)
 #define store_orig_dstaddr(skb)	 (skb_origaddr(skb) = ip_hdr(skb)->daddr)
@@ -712,8 +714,13 @@ static int br_nf_forward_finish(struct sk_buff *skb)
 	}
 	nf_bridge_push_encap_header(skb);
 
-	NF_HOOK_THRESH(NFPROTO_BRIDGE, NF_BR_FORWARD, skb, in,
-		       skb->dev, br_forward_finish, 1);
+	if (br_hw_fwding_enabled) {
+		NF_HOOK_THRESH(NFPROTO_BRIDGE, NF_BR_FORWARD, skb, in,
+				skb->dev, br_hw_forward_finish, 1);
+	} else {
+		NF_HOOK_THRESH(NFPROTO_BRIDGE, NF_BR_FORWARD, skb, in,
+				skb->dev, br_forward_finish, 1);
+	}
 	return 0;
 }
 
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index b9bba8f..dc28e83 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -369,6 +369,8 @@ extern int br_dev_queue_push_xmit(struct sk_buff *skb);
 extern void br_forward(const struct net_bridge_port *to,
 		struct sk_buff *skb, struct sk_buff *skb0);
 extern int br_forward_finish(struct sk_buff *skb);
+extern int br_hw_forward_finish(struct sk_buff *skb);
+
 extern void br_flood_deliver(struct net_bridge *br, struct sk_buff *skb);
 extern void br_flood_forward(struct net_bridge *br, struct sk_buff *skb,
 			     struct sk_buff *skb2);
