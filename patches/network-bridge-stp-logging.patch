Added support for not logging STP state transitions if needed.

diff --git a/net/bridge/br.c b/net/bridge/br.c
index 2736e3d..effe3b7 100644
--- a/net/bridge/br.c
+++ b/net/bridge/br.c
@@ -53,7 +53,7 @@ static const struct stp_proto br_stp_proto = {
 #ifdef CONFIG_SYSCTL
 static struct ctl_table_header *brstp_sysctl_header;
 int brstp_user_space __read_mostly = 1;
-
+int brstp_stp_state_logging = 0;
 static
 int brstp_sysctl_call_tables(ctl_table * ctl, int write,
 			void __user * buffer, size_t * lenp, loff_t * ppos)
@@ -87,6 +87,13 @@ static ctl_table brstp_table[] = {
 		.mode           = 0644,
 		.proc_handler   = brstp_sysctl_call_tables,
 	},
+	{
+		.procname       = "bridge-stp-state-logging",
+		.data           = &brstp_stp_state_logging,
+		.maxlen         = sizeof(int),
+		.mode           = 0644,
+		.proc_handler   = brstp_sysctl_call_tables,
+	},
 	{ }
 };
 
@@ -97,6 +104,7 @@ static struct ctl_path brstp_path[] = {
 };
 #else
 #define brstp_user_space 1
+#define brstp_stp_state_logging 0
 #endif
 
 static int __init br_init(void)
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index c80f94d..21ea7e8 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -336,6 +336,8 @@ static inline int br_is_root_bridge(const struct net_bridge *br)
 	return !memcmp(&br->bridge_id, &br->designated_root, 8);
 }
 
+extern int brstp_stp_state_logging;
+
 /* br_device.c */
 void br_dev_setup(struct net_device *dev);
 void br_dev_delete(struct net_device *dev, struct list_head *list);
diff --git a/net/bridge/br_stp.c b/net/bridge/br_stp.c
index 4a36459..75f2d1e 100644
--- a/net/bridge/br_stp.c
+++ b/net/bridge/br_stp.c
@@ -31,6 +31,9 @@ static const char *const br_port_state_names[] = {
 
 void br_log_state(const struct net_bridge_port *p)
 {
+	if (!brstp_stp_state_logging)
+		return;
+
 	br_info(p->br, "port %u(%s) entered %s state\n",
 		(unsigned int) p->port_no, p->dev->name,
 		br_port_state_names[p->state]);
