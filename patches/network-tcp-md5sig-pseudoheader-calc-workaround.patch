network: tcp_v4_md5_hash_pseudoheader calculates wrong result

This is a workaround for what seems to be a bug in the powerpc architecture
SMP or page table code. The issue is caused by what seems to be an incorrect
page table mapping for a per-cpu structure `tcp_md5sig_pool` defined at
"net/ipv4/tcp.c" line 2888. Following the receive side of the ipv4 TCP stack.
What happens is the variable `bp` in `tcp_v4_md5_hash_pseudoheader()` is
assigned `&hp->md5_blk.ip4` where `hp` is assigned a per-cpu member of
the pool in `tcp_v4_md5_hash_skb()`.
The point is when `bp` is mapped to a scatterlist `sg` part of this process
is to figure out what memory page `bp` maps to and store this in sg->page_link.
When this scatterlist is sent down through the crypto API and eventually to the
MD5 code `md5_update()` ('crypto/md5.c') the kmap()'ped (page ->
virtual address) does not point to the original `bp` data. A trace using
the debug code demonstrates this.

NOTE: The scatter list uses the least significant nibble for flags
      so one needs to do the following math (addr & (~0xF))

---------
 tcp_v4_md5_hash_pseudoheader:1121 - pseudoheader - bp:
    ff6f4ddc: 0a 00 01 83 0a 00 01 55 00 06 00 2c              .......U...,
 tcp_v4_md5_hash_pseudoheader:1122 - sg on stack - struct scatterlist sg:
 	sg addr:       eff2fca0
 	sg->page_link: 00000000c0e2fe82
 	sg->offset:    0000000000000ddc
 	sg->length:    000000000000000c

... code trace trimmed - unimportant ...

 hash_walk_next:102 - AFTER kmap() - struct crypto_hash_walk *walk: (hexdump: true)
 	walk->data:      0xfffdfddc   /* <- this address is wrong - or the page we were given is */
 	walk->offset:    0x0000000000000ddc
 	walk->alignmask: 0x0000000000000000
 	walk->pg:        0xc0e2fe80   /* <- this was the page used to do the mapping */
 	walk->entrylen:  0
 	walk->total:     0
 	walk->sg:        0xeff2fca0
 	walk->flags:     0x0000000000000000
 __ahash_debug_walk:56 - walk->data::   /* vv this data doesn't look like what we passed in!! */
    fffdfddc: c6 9c 36 90 ae 94 91 1e 75 ae df ca              ..6.....u...
 crypto_shash_update:104 - before update:
    fffdfddc: c6 9c 36 90 ae 94 91 1e 75 ae df ca              ..6.....u...
 md5_update:77 - desc: efbfff00
 	data: fffdfddc
 	len: 12
 	mctx: efbfff08
 	sizeof(mctx->block): 0
 	mctx->byte_count: 64
 	avail: 17275807075376430556
 md5_update:78 - data:
    fffdfddc: c6 9c 36 90 ae 94 91 1e 75 ae df ca              ..6.....u...
 md5_update:79 - initial block:
    efbfff18: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    efbfff28: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    efbfff38: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    efbfff48: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
 md5_update:86 - avail > len block:
    efbfff18: c6 9c 36 90 ae 94 91 1e 75 ae df ca 00 00 00 00  ..6.....u.......
    efbfff28: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    efbfff38: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    efbfff48: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
---------

Using this per-cpu pool to store the structure is done so that a lock doesn't
have to be held while processing this packet, however, interrupts are disabled
on this CPU while the calculation takes place. It is unclear why the
pseudoheader was included in the pool, presumably to mitigate against
cache thrashing. The solution is to just use a psudoheader allocated on the
stack since this is able to be correctly mapped.

diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
index 92d7138..d5bad8a 100644
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -1078,11 +1078,10 @@ static int tcp_v4_parse_md5_keys(struct sock *sk, char __user *optval,
 static int tcp_v4_md5_hash_pseudoheader(struct tcp_md5sig_pool *hp,
 					__be32 daddr, __be32 saddr, int nbytes)
 {
-	struct tcp4_pseudohdr *bp;
+	struct tcp4_pseudohdr scratch;
+	struct tcp4_pseudohdr *bp = &scratch;
 	struct scatterlist sg;
 
-	bp = &hp->md5_blk.ip4;
-
 	/*
 	 * 1. the TCP pseudo-header (in the order: source IP address,
 	 * destination IP address, zero-padded protocol number, and
