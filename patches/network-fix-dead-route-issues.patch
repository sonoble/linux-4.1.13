net: fix issues with dead routes

Done:
- Fix an issue where a dead nexthop prevents a v4 route from being
  added.
- Rename sysctl 'delete_dead_routes' to 'kill_routes_on_linkdown'

To Do:
- Make v4 and v6 functionality identical.

diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index 2a75139..b7c8918 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -2283,7 +2283,7 @@ extern int		dev_forward_skb(struct net_device *dev,
 					struct sk_buff *skb);
 
 extern int		netdev_budget;
-extern int		delete_dead_routes;
+extern int		kill_routes_on_linkdown;
 
 /* Called by rtnetlink.c:rtnl_unlock() */
 extern void netdev_run_todo(void);
diff --git a/include/linux/sysctl.h b/include/linux/sysctl.h
index d0db95e..4154bd4 100644
--- a/include/linux/sysctl.h
+++ b/include/linux/sysctl.h
@@ -275,7 +275,7 @@ enum
 	NET_CORE_AEVENT_ETIME=20,
 	NET_CORE_AEVENT_RSEQTH=21,
 	NET_CORE_WARNINGS=22,
-	NET_CORE_DELETE_DEAD_ROUTES=23,
+	NET_CORE_KILL_ROUTES_ON_LINKDOWN=23,
 };
 
 /* /proc/sys/net/ethernet */
diff --git a/kernel/sysctl_binary.c b/kernel/sysctl_binary.c
index 12a46f7..513c406 100644
--- a/kernel/sysctl_binary.c
+++ b/kernel/sysctl_binary.c
@@ -195,7 +195,7 @@ static const struct bin_table bin_net_core_table[] = {
 	{ CTL_INT,	NET_CORE_AEVENT_ETIME,	"xfrm_aevent_etime" },
 	{ CTL_INT,	NET_CORE_AEVENT_RSEQTH,	"xfrm_aevent_rseqth" },
 	{ CTL_INT,	NET_CORE_WARNINGS,	"warnings" },
-	{ CTL_INT,	NET_CORE_DELETE_DEAD_ROUTES,	"delete_dead_routes" },
+	{ CTL_INT,	NET_CORE_KILL_ROUTES_ON_LINKDOWN,	"kill_routes_on_linkdown" },
 	{},
 };
 
diff --git a/net/core/dev.c b/net/core/dev.c
index 725ac59..99c51e7 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -2575,8 +2575,8 @@ int netdev_max_backlog __read_mostly = 1000;
 int netdev_tstamp_prequeue __read_mostly = 1;
 int netdev_budget __read_mostly = 300;
 int weight_p __read_mostly = 64;            /* old backlog weight */
-int delete_dead_routes = 0;
-EXPORT_SYMBOL(delete_dead_routes);
+int kill_routes_on_linkdown = 0;
+EXPORT_SYMBOL(kill_routes_on_linkdown);
 
 /* Called with irq disabled */
 static inline void ____napi_schedule(struct softnet_data *sd,
diff --git a/net/core/sysctl_net_core.c b/net/core/sysctl_net_core.c
index 9aa94d0..6665582 100644
--- a/net/core/sysctl_net_core.c
+++ b/net/core/sysctl_net_core.c
@@ -187,8 +187,8 @@ static struct ctl_table net_core_table[] = {
 		.proc_handler	= proc_dointvec
 	},
 	{
-		.procname	= "delete_dead_routes",
-		.data		= &delete_dead_routes,
+		.procname	= "kill_routes_on_linkdown",
+		.data		= &kill_routes_on_linkdown,
 		.maxlen		= sizeof(int),
 		.mode		= 0644,
 		.proc_handler	= proc_dointvec
diff --git a/net/ipv4/fib_frontend.c b/net/ipv4/fib_frontend.c
index 482dbea..4a30791 100644
--- a/net/ipv4/fib_frontend.c
+++ b/net/ipv4/fib_frontend.c
@@ -1016,14 +1016,16 @@ static int fib_netdev_event(struct notifier_block *this, unsigned long event, vo
 		rt_cache_flush(dev_net(dev), -1);
 		break;
 	case NETDEV_DOWN:
-		fib_disable_ip(dev, 0, 0);
+		fib_disable_ip(dev, 1, 0);
 		break;
 	case NETDEV_CHANGE:
-		flags = dev_get_flags(dev);
-		if (!(flags & IFF_RUNNING))
-			fib_sync_down_dev(dev, 0);
-		else if (flags & IFF_RUNNING)
-			fib_sync_up(dev);
+		if (kill_routes_on_linkdown) {
+			flags = dev_get_flags(dev);
+			if (flags & (IFF_RUNNING|IFF_LOWER_UP))
+				fib_sync_up(dev);
+			else
+				fib_sync_down_dev(dev, 0);
+		}
 	case NETDEV_CHANGEMTU:
 		rt_cache_flush(dev_net(dev), 0);
 		break;
diff --git a/net/ipv4/fib_semantics.c b/net/ipv4/fib_semantics.c
index 02fcc81..f305b9f 100644
--- a/net/ipv4/fib_semantics.c
+++ b/net/ipv4/fib_semantics.c
@@ -199,7 +199,7 @@ static inline int nh_comp(const struct fib_info *fi, const struct fib_info *ofi)
 #ifdef CONFIG_IP_ROUTE_CLASSID
 		    nh->nh_tclassid != onh->nh_tclassid ||
 #endif
-		    ((nh->nh_flags ^ onh->nh_flags) & ~RTNH_F_DEAD))
+		    ((nh->nh_flags ^ onh->nh_flags) & ~(RTNH_F_DEAD|RTNH_F_DEAD_LINKDOWN)))
 			return -1;
 		onh++;
 	} endfor_nexthops(fi);
@@ -251,7 +251,7 @@ static struct fib_info *fib_find_info(const struct fib_info *nfi)
 		    nfi->fib_priority == fi->fib_priority &&
 		    memcmp(nfi->fib_metrics, fi->fib_metrics,
 			   sizeof(u32) * RTAX_MAX) == 0 &&
-		    ((nfi->fib_flags ^ fi->fib_flags) & ~RTNH_F_DEAD) == 0 &&
+		    ((nfi->fib_flags ^ fi->fib_flags) & ~(RTNH_F_DEAD|RTNH_F_DEAD_LINKDOWN)) == 0 &&
 		    (nfi->fib_nhs == 0 || nh_comp(fi, nfi) == 0))
 			return fi;
 	}
@@ -552,7 +552,7 @@ static int fib_check_nh(struct fib_config *cfg, struct fib_info *fi,
 				return -ENODEV;
 			if (!(dev->flags & IFF_UP))
 				return -ENETDOWN;
-			if (!netif_carrier_ok(dev) && delete_dead_routes)
+			if (!netif_carrier_ok(dev) && kill_routes_on_linkdown)
 				nh->nh_flags |= RTNH_F_DEAD;
 			nh->nh_dev = dev;
 			dev_hold(dev);
@@ -585,7 +585,7 @@ static int fib_check_nh(struct fib_config *cfg, struct fib_info *fi,
 		if (!dev)
 			goto out;
 		dev_hold(dev);
-		if (!netif_carrier_ok(dev) && delete_dead_routes)
+		if (!netif_carrier_ok(dev) && kill_routes_on_linkdown)
 			nh->nh_flags |= RTNH_F_DEAD;
 		err = (dev->flags & IFF_UP) ? 0 : -ENETDOWN;
 	} else {
@@ -605,7 +605,7 @@ static int fib_check_nh(struct fib_config *cfg, struct fib_info *fi,
 		nh->nh_dev = in_dev->dev;
 		dev_hold(nh->nh_dev);
 		nh->nh_scope = RT_SCOPE_HOST;
-		if (!netif_carrier_ok(nh->nh_dev) && delete_dead_routes)
+		if (!netif_carrier_ok(nh->nh_dev) && kill_routes_on_linkdown)
 			nh->nh_flags |= RTNH_F_DEAD;
 		err = 0;
 	}
@@ -864,7 +864,7 @@ struct fib_info *fib_create_info(struct fib_config *cfg)
 			if (nexthop_nh->nh_flags & RTNH_F_DEAD)
 				dead++;
 		} endfor_nexthops(fi)
-		if ((dead == fi->fib_nhs) && delete_dead_routes) {
+		if ((dead == fi->fib_nhs)) {
 			fi->fib_flags |= RTNH_F_DEAD;
 			fi->fib_flags |= RTNH_F_DEAD_LINKDOWN;
 		}
@@ -1088,10 +1088,7 @@ int fib_sync_down_dev(struct net_device *dev, int force)
 		} endfor_nexthops(fi)
 		if (dead == fi->fib_nhs) {
 			fi->fib_flags |= RTNH_F_DEAD;
-			/*
-			 * force marks route down due to other reasons.
-			 * We honor that and don't set dead due to linkdown.
-			 */
+			/* force marks route down due to admin down and device removal. */
 			if (!force)
 				fi->fib_flags |= RTNH_F_DEAD_LINKDOWN;
 			else
@@ -1178,7 +1175,7 @@ int fib_sync_up(struct net_device *dev)
 	if (!(dev->flags & IFF_UP))
 		return 0;
 
-	link_up = netif_carrier_ok(dev) || !delete_dead_routes;
+	link_up = netif_carrier_ok(dev);
 	prev_fi = NULL;
 	hash = fib_devindex_hashfn(dev->ifindex);
 	head = &fib_info_devhash[hash];
@@ -1211,6 +1208,7 @@ int fib_sync_up(struct net_device *dev)
 				alive++;
 			} else
 				nexthop_nh->nh_flags |= RTNH_F_DEAD;
+
 			spin_lock_bh(&fib_multipath_lock);
 			nexthop_nh->nh_power = 0;
 			spin_unlock_bh(&fib_multipath_lock);
diff --git a/net/ipv4/fib_trie.c b/net/ipv4/fib_trie.c
index 9384158..17bd9ce 100644
--- a/net/ipv4/fib_trie.c
+++ b/net/ipv4/fib_trie.c
@@ -1386,13 +1386,17 @@ static int check_leaf(struct fib_table *tb, struct trie *t, struct leaf *l,
 #endif
 				return err;
 			}
-			if (fi->fib_flags & RTNH_F_DEAD)
+			/* allow routes to be added if link is down */
+			if ((fi->fib_flags & RTNH_F_DEAD) && !(fi->fib_flags & RTNH_F_DEAD_LINKDOWN))
 				continue;
+
 			for (nhsel = 0; nhsel < fi->fib_nhs; nhsel++) {
 				const struct fib_nh *nh = &fi->fib_nh[nhsel];
 
-				if (nh->nh_flags & RTNH_F_DEAD)
+				/* allow next-hop to be added if link is down */
+				if ((nh->nh_flags & RTNH_F_DEAD) && !(fi->fib_flags & RTNH_F_DEAD_LINKDOWN))
 					continue;
+
 				if (flp->flowi4_oif && flp->flowi4_oif != nh->nh_oif)
 					continue;
 
@@ -1728,10 +1732,10 @@ static int trie_flush_list(struct fib_table *tb, struct leaf *l,
 
 	list_for_each_entry_safe(fa, fa_node, &li->falh, fa_list) {
 		struct fib_info *fi = fa->fa_info;
+		bool ok_to_flush = !(fi->fib_flags & RTNH_F_DEAD_LINKDOWN);
 
 		/* Do not flush route if marked dead and link is down */
-		if (fi && (fi->fib_flags & RTNH_F_DEAD) &&
-		    !(fi->fib_flags & RTNH_F_DEAD_LINKDOWN) && delete_dead_routes) {
+		if (fi && (fi->fib_flags & RTNH_F_DEAD) && ok_to_flush) {
 			struct nl_info nlinfo = { .nl_net = fi->fib_net, };
 
 			rtmsg_fib(RTM_DELROUTE, htonl(l->key), fa, li->plen,
diff --git a/net/ipv6/route.c b/net/ipv6/route.c
index b688e41..e9309c5 100644
--- a/net/ipv6/route.c
+++ b/net/ipv6/route.c
@@ -406,7 +406,7 @@ static inline struct rt6_info *rt6_device_match(struct net *net,
 	for (sprt = rt; sprt; sprt = sprt->dst.rt6_next) {
 		struct net_device *dev = sprt->rt6i_dev;
 
-		if (!netif_carrier_ok(dev) && delete_dead_routes)
+		if (!netif_carrier_ok(dev))
 			continue;
 
 		if (oif) {
@@ -574,11 +574,11 @@ static struct rt6_info *find_rr_leaf(struct fib6_node *fn,
 	match = NULL;
 	for (rt = rr_head; rt && rt->rt6i_metric == metric;
 	     rt = rt->dst.rt6_next)
-		if (netif_carrier_ok(rt->rt6i_dev) || !delete_dead_routes)
+		if (netif_carrier_ok(rt->rt6i_dev))
 			match = find_match(rt, oif, strict, &mpri, match);
 	for (rt = fn->leaf; rt && rt != rr_head && rt->rt6i_metric == metric;
 	     rt = rt->dst.rt6_next)
-		if (netif_carrier_ok(rt->rt6i_dev) || !delete_dead_routes)
+		if (netif_carrier_ok(rt->rt6i_dev))
 			match = find_match(rt, oif, strict, &mpri, match);
 
 	return match;
@@ -2595,7 +2595,7 @@ static int rt6_fill_node(struct net *net,
 	if (rt->rt6i_flags&RTF_CACHE)
 		rtm->rtm_flags |= RTM_F_CLONED;
 
-	if (rt->rt6i_dev && !netif_carrier_ok(rt->rt6i_dev) && delete_dead_routes)
+	if (rt->rt6i_dev && !netif_carrier_ok(rt->rt6i_dev))
 		rtm->rtm_flags |= RTNH_F_DEAD;
 	if (dst) {
 		NLA_PUT(skb, RTA_DST, 16, dst);
