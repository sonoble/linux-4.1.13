quanta-i2cmux: Driver for Quanta i2c mux

 drivers/i2c/muxes/Kconfig      |    6 +
 drivers/i2c/muxes/Makefile     |    1
 drivers/i2c/muxes/quanta-i2cmux.c |  216 ++++++++++++++++++++++++++++++++++++++++
 include/linux/i2c/quanta-i2cmux.h |   17 +++
 4 files changed, 240 insertions(+), 0 deletions(-)
 create mode 100644 drivers/i2c/muxes/quanta-i2cmux.c
 create mode 100644 include/linux/i2c/quanta-i2cmux.h

diff --git a/drivers/i2c/muxes/Kconfig b/drivers/i2c/muxes/Kconfig
index 2ee0386..73ed997 100644
--- a/drivers/i2c/muxes/Kconfig
+++ b/drivers/i2c/muxes/Kconfig
@@ -43,4 +43,10 @@ config I2C_MUX_DNI_6448
 	help
 	  If you say yes here you get support for the DNI 6448 I2C Mux devices
 
+config I2C_MUX_QUANTA
+	tristate "CumulusNetworks QUANTA I2C Mux"
+	depends on EXPERIMENTAL
+	help
+	  If you say yes here you get support for the QUANTA I2C Mux devices
+
 endmenu
diff --git a/drivers/i2c/muxes/Makefile b/drivers/i2c/muxes/Makefile
index e5bb944..7fbdd2f 100644
--- a/drivers/i2c/muxes/Makefile
+++ b/drivers/i2c/muxes/Makefile
@@ -5,5 +5,6 @@ obj-$(CONFIG_I2C_MUX_GPIO)	+= gpio-i2cmux.o
 obj-$(CONFIG_I2C_MUX_PCA9541)	+= pca9541.o
 obj-$(CONFIG_I2C_MUX_PCA954x)	+= pca954x.o
 obj-$(CONFIG_I2C_MUX_DNI_6448)	+= dni_6448_i2c_mux.o
+obj-$(CONFIG_I2C_MUX_QUANTA)	+= quanta-i2cmux.o
 
 ccflags-$(CONFIG_I2C_DEBUG_BUS) := -DDEBUG
diff --git a/drivers/i2c/muxes/quanta-i2cmux.c b/drivers/i2c/muxes/quanta-i2cmux.c
new file mode 100644
index 0000000..498f6e7
--- /dev/null
+++ b/drivers/i2c/muxes/quanta-i2cmux.c
@@ -0,0 +1,238 @@
+/*
+ * I2C multiplexer for the quanta CPLD chips
+ *
+ *
+ * Copyright 2014 Cumulus Networks, inc  all rights reserved
+ */
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/device.h>
+#include <linux/i2c.h>
+#include <linux/i2c-mux.h>
+#include <linux/i2c/quanta-i2cmux.h>
+
+#define QUANTA_I2CMUX_MAX_NCHANS 32
+
+static const unsigned short quanta_sfp_address_list[] = {
+        0x50,  0x51, I2C_CLIENT_END };
+
+enum quanta_i2cmux_type {
+        quanta_i2cmux_16,
+        quanta_i2cmux_32,
+};
+
+struct quanta_i2cmux {
+	enum quanta_i2cmux_type type;
+	struct i2c_adapter *virt_adaps[QUANTA_I2CMUX_MAX_NCHANS];
+	u8 last_chan;	/* last register value */
+};
+
+/* Struct to hold private data for muxes */
+struct chip_desc {
+	u8 nchans;
+};
+
+static const struct chip_desc chips[] = {
+	[quanta_i2cmux_16] = {
+		.nchans = 16,
+	},
+	[quanta_i2cmux_32] = {
+		.nchans = 32,
+	},
+};
+
+static const struct i2c_device_id quanta_i2cmux_id[] = {
+	{ "quanta-i2cmux-16", quanta_i2cmux_16 },
+	{ "quanta-i2cmux-32", quanta_i2cmux_32 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, quanta_i2cmux_id);
+
+static int quanta_i2cmux_reg_write(struct i2c_adapter *adap,
+			        struct i2c_client *client, u8 command, u8 val)
+{
+	int ret = -ENODEV;
+
+	if (adap->algo->master_xfer) {
+		struct i2c_msg msg;
+		char buf[2];
+
+		msg.addr = client->addr;
+		msg.flags = 0;
+		msg.len = 2;
+		buf[0] = command;
+		buf[1] = val;
+		msg.buf = buf;
+		ret = adap->algo->master_xfer(adap, &msg, 1);
+
+	} else {
+		union i2c_smbus_data data;
+
+		data.byte = val;
+		ret = adap->algo->smbus_xfer(adap, client->addr,
+					     client->flags,
+					     I2C_SMBUS_WRITE,
+					     command, I2C_SMBUS_BYTE_DATA, &data);
+	}
+
+	return ret;
+}
+
+static int quanta_i2cmux_select_chan(struct i2c_adapter *adap,
+				  void *client, u32 chan)
+{
+	struct quanta_i2cmux *data = i2c_get_clientdata(client);
+	const struct chip_desc *chip = &chips[data->type];
+	u8 regval;
+	int ret = 0;
+
+	/**
+	 *  The channel select register is 1-based, but our API to the
+	 *  world is 0-based.
+	 */
+	regval = chan + 1;
+
+	/* Only select the channel if its different from the last channel */
+	if (data->last_chan != regval) {
+		ret = quanta_i2cmux_reg_write(adap, client,
+					   QUANTA_I2CMUX_CHANNEL_SELECT, regval);
+		data->last_chan = regval;
+	}
+
+	return ret;
+}
+
+static int quanta_i2cmux_deselect_mux(struct i2c_adapter *adap,
+				   void *client, u32 chan)
+{
+	struct quanta_i2cmux *data = i2c_get_clientdata(client);
+
+	/* Deselect active channel */
+	data->last_chan = 0;
+	return quanta_i2cmux_reg_write(adap, client, QUANTA_I2CMUX_CHANNEL_SELECT,
+				    data->last_chan);
+}
+
+static int quanta_i2cmux_client_detect(struct i2c_client *client,
+				    struct i2c_board_info *info)
+{
+	struct i2c_adapter *adap = client->adapter;
+	struct i2c_board_info tmp_info = {
+                I2C_BOARD_INFO("24c08", 0x50),
+        };
+	union i2c_smbus_data dummy;
+	int err;
+
+	err = i2c_smbus_xfer(adap, client->addr, 0, I2C_SMBUS_READ, 0,
+			     I2C_SMBUS_BYTE, &dummy);
+
+	memcpy(info->type, tmp_info.type, I2C_NAME_SIZE);
+
+	return err;
+}
+
+static int quanta_i2cmux_probe(struct i2c_client *client,
+			    const struct i2c_device_id *id)
+{
+	struct i2c_adapter *adap = to_i2c_adapter(client->dev.parent);
+	struct quanta_i2cmux *data;
+	int num;
+	int ret = -ENODEV;
+
+	if (!i2c_check_functionality(adap, I2C_FUNC_SMBUS_BYTE))
+		goto err;
+
+	data = kzalloc(sizeof(struct quanta_i2cmux), GFP_KERNEL);
+	if (!data) {
+		ret = -ENOMEM;
+		goto err;
+	}
+
+	i2c_set_clientdata(client, data);
+
+	if (i2c_smbus_write_byte(client, 0) < 0) {
+		dev_warn(&client->dev, "probe failed\n");
+		goto exit_free;
+	}
+
+	data->type = id->driver_data;
+	data->last_chan = 0;		   /* force the first selection */
+
+	/* Now create an adapter for each channel */
+	for (num = 0; num < chips[data->type].nchans; num++) {
+		data->virt_adaps[num] =
+			i2c_add_mux_adapter(adap, &client->dev, client,
+					    0, num,
+					    quanta_i2cmux_select_chan,
+					    quanta_i2cmux_deselect_mux);
+
+		if (data->virt_adaps[num] == NULL) {
+			ret = -ENODEV;
+			dev_err(&client->dev,
+				"failed to register multiplexed adapter"
+				" %d\n", num);
+			goto virt_reg_failed;
+		}
+	}
+
+	dev_info(&client->dev,
+		 "registered %d multiplexed busses for I2C mux %s\n",
+		 num, client->name);
+
+	return 0;
+
+virt_reg_failed:
+	for (num--; num >= 0; num--)
+		i2c_del_mux_adapter(data->virt_adaps[num]);
+exit_free:
+	kfree(data);
+err:
+	return ret;
+}
+
+static int quanta_i2cmux_remove(struct i2c_client *client)
+{
+	struct quanta_i2cmux *data = i2c_get_clientdata(client);
+	int i, err;
+
+	for (i = 0; i < chips[data->type].nchans; ++i)
+		if (data->virt_adaps[i]) {
+			err = i2c_del_mux_adapter(data->virt_adaps[i]);
+			if (err)
+				return err;
+			data->virt_adaps[i] = NULL;
+		}
+
+	kfree(data);
+	return 0;
+}
+
+static struct i2c_driver quanta_i2cmux_driver = {
+	.driver		= {
+		.name	= "quanta-i2cmux",
+		.owner	= THIS_MODULE,
+	},
+	.probe		= quanta_i2cmux_probe,
+	.remove		= quanta_i2cmux_remove,
+	.id_table	= quanta_i2cmux_id,
+	.address_list	= quanta_sfp_address_list,
+	.detect		= quanta_i2cmux_client_detect,
+};
+
+static int __init quanta_i2cmux_init(void)
+{
+	return i2c_add_driver(&quanta_i2cmux_driver);
+}
+
+static void __exit quanta_i2cmux_exit(void)
+{
+	i2c_del_driver(&quanta_i2cmux_driver);
+}
+
+module_init(quanta_i2cmux_init);
+module_exit(quanta_i2cmux_exit);
+
+MODULE_AUTHOR("Roopa Prabhu <roopa@cumulusnetworks.com>");
+MODULE_DESCRIPTION("quanta I2C mux driver");
+MODULE_LICENSE("GPL v2");
diff --git a/include/linux/i2c/quanta-i2cmux.h b/include/linux/i2c/quanta-i2cmux.h
new file mode 100644
index 0000000..042dcd2
--- /dev/null
+++ b/include/linux/i2c/quanta-i2cmux.h
@@ -0,0 +1,17 @@
+/*
+ *
+ * quanta-i2cmux.h - I2C multiplexer support
+ *
+ */
+
+
+#ifndef _LINUX_QUANTA_I2CMUX_H
+#define _LINUX_QUANTA_I2CMUX_H
+
+
+/* Registers */
+#define QUANTA_I2CMUX_INPUT_PRESENT 0x00
+#define QUANTA_I2CMUX_OUTPUT_RESET 0x01
+#define QUANTA_I2CMUX_CHANNEL_SELECT 0x02
+
+#endif /* _LINUX_QUANTA_I2CMUX_H */
