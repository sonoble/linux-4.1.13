Add slave membership notification via generic netlink.
Add /sys/class/net/bondX/bonding/ad_active_slaves node.

diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c
index 5af2a8f..173cdbc 100644
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@ -78,6 +78,8 @@
 #include <net/net_namespace.h>
 #include <net/netns/generic.h>
 #include <net/pkt_sched.h>
+#include <net/netlink.h>
+#include <net/genetlink.h>
 #include "bonding.h"
 #include "bond_3ad.h"
 #include "bond_alb.h"
@@ -271,6 +273,160 @@ const char *bond_mode_name(int mode)
 	return names[mode];
 }
 
+/*---------------------------- genl/bond -----------------------------*/
+
+enum {
+	BOND_GENL_ATTR_UNSPEC,
+	BOND_GENL_ATTR_BOND,
+	BOND_GENL_ATTR_SLAVE,
+	__BOND_GENL_ATTR_MAX,
+};
+#define BOND_GENL_ATTR_MAX (__BOND_GENL_ATTR_MAX - 1)
+
+enum {
+	BOND_GENL_CMD_UNSPEC,
+	BOND_GENL_CMD_GET,
+	BOND_GENL_CMD_ACTIVATE_EVENT,
+	BOND_GENL_CMD_DEACTIVATE_EVENT,
+	__BOND_GENL_CMD_MAX,
+};
+
+static struct genl_family bond_event_genl_family = {
+	.id = GENL_ID_GENERATE,
+	.name = "bond_event",
+	.version = 1,
+	.maxattr = BOND_GENL_ATTR_MAX,
+};
+
+static int fill_genlmsg(struct sk_buff *skb, u32 pid, u32 seq,
+	int flags, u8 cmd, struct bonding *bond, struct slave *slave)
+{
+	void *hdr;
+
+	hdr = genlmsg_put(skb, pid, seq, &bond_event_genl_family,
+		flags, cmd);
+	if (hdr == NULL)
+		return -EMSGSIZE;
+
+	if (bond)
+		NLA_PUT_U32(skb, BOND_GENL_ATTR_BOND, bond->dev->ifindex);
+	else
+		NLA_PUT_U32(skb, BOND_GENL_ATTR_BOND, 0);
+	NLA_PUT_U32(skb, BOND_GENL_ATTR_SLAVE, slave->dev->ifindex);
+
+	return genlmsg_end(skb, hdr);
+
+nla_put_failure:
+	genlmsg_cancel(skb, hdr);
+	return -EMSGSIZE;
+}
+
+static int bond_event_genl_dump(struct sk_buff *skb,
+	struct netlink_callback *cb)
+{
+	struct bond_net *bn = net_generic(&init_net, bond_net_id);
+	struct slave *slave;
+	struct bonding *bond;
+	u32 pid = NETLINK_CB(cb->skb).pid;
+	u32 seq = cb->nlh->nlmsg_seq;
+	int bond_idx = 0, bond_start_idx = cb->args[0];
+	int slave_idx = 0, slave_start_idx = cb->args[1];
+	int i;
+
+	rtnl_lock();
+
+	list_for_each_entry(bond, &bn->dev_list, bond_list) {
+
+		if (bond_idx > bond_start_idx)
+			slave_start_idx = 0;
+		if (bond_idx++ < bond_start_idx)
+			continue;
+
+		slave_idx = 0;
+
+		read_lock(&bond->lock);
+		bond_for_each_slave(bond, slave, i) {
+			u8 cmd = bond_is_active_slave(slave) ?
+				BOND_GENL_CMD_ACTIVATE_EVENT :
+				BOND_GENL_CMD_DEACTIVATE_EVENT;
+			if (slave_idx++ < slave_start_idx)
+				continue;
+			if (fill_genlmsg(skb, pid, seq, NLM_F_MULTI,
+				cmd, bond, slave) < 0) {
+				read_unlock(&bond->lock);
+				goto out;
+			}
+		}
+		read_unlock(&bond->lock);
+	}
+
+out:
+	rtnl_unlock();
+
+	cb->args[0] = bond_idx;
+	cb->args[1] = slave_idx;
+
+	return skb->len;
+}
+
+static struct genl_ops bond_event_get_ops = {
+	.cmd = BOND_GENL_CMD_GET,
+	.dumpit = bond_event_genl_dump,
+};
+
+static struct genl_multicast_group bond_event_mcgrp = {
+	.name = "bond_event_mc",
+};
+
+static int bond_netlink_event(struct bonding *bond,
+			      struct slave *slave,
+			      u8 cmd)
+{
+	static atomic_t seq;
+	struct sk_buff *skb;
+	int msg_size = 2 * nla_total_size(sizeof(u32));
+
+	skb = genlmsg_new(msg_size, GFP_ATOMIC);
+	if (!skb)
+		return -ENOMEM;
+
+	if (fill_genlmsg(skb, 0, atomic_add_return(1, &seq),
+		0, cmd, bond, slave) < 0)
+		goto err_out;
+
+	genlmsg_multicast(skb, 0, bond_event_mcgrp.id, GFP_ATOMIC);
+
+	return 0;
+
+err_out:
+	nlmsg_free(skb);
+	return -ENOMEM;
+}
+
+static int bond_genl_init(void)
+{
+	int res;
+
+	res = genl_register_family(&bond_event_genl_family);
+	if (res)
+		return res;
+
+	res = genl_register_ops(&bond_event_genl_family,
+		&bond_event_get_ops);
+	if (res)
+		goto err;
+
+	res = genl_register_mc_group(&bond_event_genl_family,
+		&bond_event_mcgrp);
+	if (res)
+		goto err;
+
+	return res;
+err:
+	genl_unregister_family(&bond_event_genl_family);
+	return res;
+}
+
 /*---------------------------------- VLAN -----------------------------------*/
 
 /**
@@ -2080,6 +2236,11 @@ int bond_release(struct net_device *bond_dev, struct net_device *slave_dev)
 
 	slave_dev->priv_flags &= ~IFF_BONDING;
 
+	/* deactivate slave in bond cache.  bond ifindex for cache
+	 * entry will be 0 (slave no longer in bond).
+	 */
+	bond_netlink_event(NULL, slave, BOND_GENL_CMD_DEACTIVATE_EVENT);
+
 	kfree(slave);
 
 	return 0;  /* deletion OK */
@@ -4882,6 +5043,18 @@ static struct pernet_operations bond_net_ops = {
 	.size = sizeof(struct bond_net),
 };
 
+void bond_set_active_slave(struct slave *slave)
+{
+	slave->backup = 0;
+	bond_netlink_event(slave->bond, slave, BOND_GENL_CMD_ACTIVATE_EVENT);
+}
+
+void bond_set_backup_slave(struct slave *slave)
+{
+	slave->backup = 1;
+	bond_netlink_event(slave->bond, slave, BOND_GENL_CMD_DEACTIVATE_EVENT);
+}
+
 static int __init bonding_init(void)
 {
 	int i;
@@ -4901,6 +5074,10 @@ static int __init bonding_init(void)
 	if (res)
 		goto err_link;
 
+        res = bond_genl_init();
+	if (res)
+		goto err_genl;
+
 	bond_create_debugfs();
 
 	for (i = 0; i < max_bonds; i++) {
@@ -4914,6 +5091,8 @@ static int __init bonding_init(void)
 out:
 	return res;
 err:
+	genl_unregister_family(&bond_event_genl_family);
+err_genl:
 	bond_destroy_debugfs();
 	rtnl_link_unregister(&bond_link_ops);
 err_link:
@@ -4929,6 +5108,7 @@ static void __exit bonding_exit(void)
 
 	bond_destroy_debugfs();
 
+	genl_unregister_family(&bond_event_genl_family);
 	rtnl_link_unregister(&bond_link_ops);
 	unregister_pernet_subsys(&bond_net_ops);
 
diff --git a/drivers/net/bonding/bond_sysfs.c b/drivers/net/bonding/bond_sysfs.c
index cf95bd8..e894f2d 100644
--- a/drivers/net/bonding/bond_sysfs.c
+++ b/drivers/net/bonding/bond_sysfs.c
@@ -1428,6 +1428,46 @@ static ssize_t bonding_show_ad_partner_mac(struct device *d,
 static DEVICE_ATTR(ad_partner_mac, S_IRUGO, bonding_show_ad_partner_mac, NULL);
 
 /*
+ * Show the current 802.3ad active slaves.
+ */
+static ssize_t bonding_show_ad_active_slaves(struct device *d,
+                                    struct device_attribute *attr,
+                                    char *buf)
+{
+	struct slave *slave;
+	int i, count = 0;
+	struct bonding *bond = to_bond(d);
+
+	if (bond->params.mode != BOND_MODE_8023AD)
+		return count;
+
+	if (!rtnl_trylock())
+		return restart_syscall();
+
+	read_lock(&bond->lock);
+	bond_for_each_slave(bond, slave, i) {
+                int active;
+		if (count > (PAGE_SIZE - IFNAMSIZ - 6)) {
+			/* not enough space for another interface_name:status pair */
+			if ((PAGE_SIZE - count) > 10)
+				count = PAGE_SIZE - 10;
+			count += sprintf(buf + count, "++more++ ");
+			break;
+		}
+		active = bond_is_active_slave(slave) ? 1 : 0;
+		count += sprintf(buf + count, "%s:%d ",
+			slave->dev->name, active);
+	}
+	read_unlock(&bond->lock);
+	if (count)
+		buf[count-1] = '\n'; /* eat the leftover space */
+	rtnl_unlock();
+
+	return count;
+}
+static DEVICE_ATTR(ad_active_slaves, S_IRUGO, bonding_show_ad_active_slaves, NULL);
+
+/*
  * Show the queue_ids of the slaves in the current bond.
  */
 static ssize_t bonding_show_queue_id(struct device *d,
@@ -1665,6 +1705,7 @@ static struct attribute *per_bond_attrs[] = {
 	&dev_attr_ad_actor_key.attr,
 	&dev_attr_ad_partner_key.attr,
 	&dev_attr_ad_partner_mac.attr,
+	&dev_attr_ad_active_slaves.attr,
 	&dev_attr_queue_id.attr,
 	&dev_attr_all_slaves_active.attr,
 	&dev_attr_resend_igmp.attr,
diff --git a/drivers/net/bonding/bonding.h b/drivers/net/bonding/bonding.h
index 1aecc37..387f9f6 100644
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@ -293,15 +293,8 @@ static inline bool bond_is_lb(const struct bonding *bond)
 		bond->params.mode == BOND_MODE_ALB);
 }
 
-static inline void bond_set_active_slave(struct slave *slave)
-{
-	slave->backup = 0;
-}
-
-static inline void bond_set_backup_slave(struct slave *slave)
-{
-	slave->backup = 1;
-}
+void bond_set_active_slave(struct slave *slave);
+void bond_set_backup_slave(struct slave *slave);
 
 static inline int bond_slave_state(struct slave *slave)
 {
