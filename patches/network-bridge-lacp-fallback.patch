This patch adds LACP fall back support for bonds.  Fall back is enabled
on a per bond basis and applicable only to bonds configured in 802.3ad
mode. When fall back is enabled on a bond, a slave of a bond will attempt
to run LACP, and if there is no LACP partner upon expiry, it will be made
active and the bond will be brought logical up.  A grace period is started
for the fall back and upon expiry, the slave will be made inactive and the
bond will be brought logical down.  In case an LACP partner is discovered
before the expiry of the grace period, the bond slave will exit fall back
state and proceed to continue LACP exchange. In case there are multiple
slaves in a bond, only one slave is allowed to be in fall back state and
a priority scheme is used to determine which one.

diff --git a/drivers/net/bonding/bond_3ad.c b/drivers/net/bonding/bond_3ad.c
index 0b3ce2d..c5ab398 100644
--- a/drivers/net/bonding/bond_3ad.c
+++ b/drivers/net/bonding/bond_3ad.c
@@ -70,6 +70,7 @@
 #define AD_PORT_STANDBY         0x80
 #define AD_PORT_SELECTED        0x100
 #define AD_PORT_MOVED           0x200
+#define AD_PORT_FALLBACK        0x400
 
 // Port Key definitions
 // key is determined according to the link speed, duplex and
@@ -223,6 +224,7 @@ static inline int __agg_has_partner(struct aggregator *agg)
  */
 static inline void __disable_port(struct port *port)
 {
+	pr_debug("Disable port %s\n", port->slave->dev->name);
 	bond_set_slave_inactive_flags(port->slave);
 	bond_3ad_set_carrier(port->slave->bond);
 }
@@ -237,6 +239,7 @@ static inline void __enable_port(struct port *port)
 	struct slave *slave = port->slave;
 
 	if ((slave->link == BOND_LINK_UP) && IS_UP(slave->dev)) {
+		pr_debug("Enable port %s\n", slave->dev->name);
 		bond_set_slave_active_flags(slave);
 		bond_3ad_set_carrier(slave->bond);
 	}
@@ -391,6 +394,113 @@ static u8 __get_duplex(struct port *port)
 }
 
 /**
+ * is_lacp_fallback_eligible - is bond eligible to go into lacp fallback mode
+ * @bond: the bond we're looking at
+ *
+ * Return true if it is, false otherwise
+ */
+static bool is_lacp_fallback_eligible(struct bonding *bond)
+{
+	return (bond->params.lacp_fallback_allow &&
+		bond->params.lacp_fallback_active);
+}
+
+/**
+ * is_better_fallback_slave - compare between two slaves of the same bond
+ *                            and see which one is better for lacp fall back
+ * @slave1
+ * @slave2
+ *
+ * Return: true if slave1 is better, false otherwise
+ */
+static bool is_better_fallback_slave(struct slave *slave1, struct slave *slave2)
+{
+	if (!slave1)
+		return false;
+
+	if (!slave2)
+		return true;
+
+	if (slave1->bond != slave2->bond)
+		return false;
+
+	if (slave1->lacp_fallback_priority > slave2->lacp_fallback_priority)
+		return true;
+
+	if (slave2->lacp_fallback_priority > slave1->lacp_fallback_priority)
+		return false;
+
+	return (strcmp(slave1->dev->name, slave2->dev->name) <= 0);
+}
+
+/**
+ * __get_best_fallback_slave_in_bond - get the best slave when bond is in fallback mode
+ * @bond: the bond we're looking at
+ * Return the slave in the bond which is best for lacp fall back
+ */
+static struct slave *__get_best_fallback_slave_in_bond(struct bonding *bond)
+{
+	struct slave *slave, *best_slave = NULL;
+	int i;
+
+	if (!is_lacp_fallback_eligible(bond))
+		return NULL;
+
+	bond_for_each_slave(bond, slave, i) {
+		if (IS_UP(slave->dev)) {
+			if (!best_slave)
+				best_slave = slave;
+			else if (is_better_fallback_slave(slave, best_slave))
+				best_slave = slave;
+		}
+	}
+	return best_slave;
+}
+
+static struct slave *__get_best_fallback_slave_in_agg(struct aggregator *agg)
+{
+	struct slave *best_slave = NULL;
+	struct port *port;
+
+	if (!is_lacp_fallback_eligible(agg->slave->bond))
+		return NULL;
+
+	for (port = agg->lag_ports;
+	     port;
+	     port = port->next_port_in_aggregator) {
+
+		if (IS_UP(port->slave->dev)) {
+			if (!best_slave)
+				best_slave = port->slave;
+			else if (is_better_fallback_slave(port->slave, best_slave))
+				best_slave = port->slave;
+		}
+	}
+	return best_slave;
+}
+
+/**
+ * is_best_fallback_slave - is the given slave the best for lacp fallback
+ * @slave: the slave we're looking at
+ * Return true if it is, false otherwise
+ */
+static bool is_best_fallback_slave(struct slave *slave)
+{
+	return (slave == __get_best_fallback_slave_in_bond(slave->bond));
+}
+
+static bool is_agg_in_fallback(struct aggregator *agg)
+{
+	struct slave *slave;
+
+	if (!agg)
+		return false;
+
+	slave = __get_best_fallback_slave_in_agg(agg);
+	return (slave && (SLAVE_AD_INFO(slave).port.sm_vars & AD_PORT_FALLBACK));
+}
+
+/**
  * __initialize_port_locks - initialize a port's STATE machine spinlock
  * @port: the port we're looking at
  *
@@ -1040,15 +1150,45 @@ static void ad_rx_machine(struct lacpdu *lacpdu, struct port *port)
 		/* next state */
 		port->sm_rx_state = AD_RX_PORT_DISABLED;
 	// check if new lacpdu arrived
-	else if (lacpdu && ((port->sm_rx_state == AD_RX_EXPIRED) || (port->sm_rx_state == AD_RX_DEFAULTED) || (port->sm_rx_state == AD_RX_CURRENT))) {
+	else if (lacpdu && ((port->sm_rx_state == AD_RX_EXPIRED) || (port->sm_rx_state == AD_RX_DEFAULTED) || (port->sm_rx_state == AD_RX_CURRENT) || (port->sm_rx_state == AD_RX_FALLBACK_EXPIRED))) {
 		port->sm_rx_timer_counter = 0; // zero timer
 		port->sm_rx_state = AD_RX_CURRENT;
+	} else if (port->sm_rx_state == AD_RX_FALLBACK) {
+		if (lacpdu) {
+			pr_debug("Fallback (%s): lacpdu received, disabling fallback\n",
+				 port->slave->dev->name);
+
+			port->sm_rx_fb_timer_counter = 0;
+			port->sm_rx_state = AD_RX_CURRENT;
+			__disable_port(port); // bring down the bond, let lacp runs its course
+		} else if (!is_best_fallback_slave(port->slave) ||
+			   !(port->sm_vars & AD_PORT_FALLBACK)) {
+			pr_debug("(%s) fallback allow %d active %d or no longer best\n",
+				 port->slave->dev->name,
+				 port->slave->bond->params.lacp_fallback_allow,
+				 port->slave->bond->params.lacp_fallback_active);
+			port->sm_rx_fb_timer_counter = 0;
+			if (is_lacp_fallback_eligible(port->slave->bond))
+				port->sm_rx_state = AD_RX_FALLBACK_EXPIRED;
+			else
+				port->sm_rx_state = AD_RX_DEFAULTED;
+			__disable_port(port);
+		} else if (port->sm_rx_fb_timer_counter && !(--port->sm_rx_fb_timer_counter)) {
+			pr_debug("(%s) Fallback grace period expired (%d)\n", port->slave->dev->name,
+				 port->slave->inactive);
+
+			port->sm_rx_state = AD_RX_FALLBACK_EXPIRED;            // next state
+			__disable_port(port);
+		}
 	} else {
 		// if timer is on, and if it is expired
 		if (port->sm_rx_timer_counter && !(--port->sm_rx_timer_counter)) {
 			switch (port->sm_rx_state) {
 			case AD_RX_EXPIRED:
-				port->sm_rx_state = AD_RX_DEFAULTED;		// next state
+				if (is_best_fallback_slave(port->slave))
+					port->sm_rx_state = AD_RX_FALLBACK;		// next state
+				else
+					port->sm_rx_state = AD_RX_DEFAULTED;		// next state
 				break;
 			case AD_RX_CURRENT:
 				port->sm_rx_state = AD_RX_EXPIRED;	    // next state
@@ -1058,6 +1198,7 @@ static void ad_rx_machine(struct lacpdu *lacpdu, struct port *port)
 			}
 		} else {
 			// if no lacpdu arrived and no timer is on
+			//pr_debug("rx_machine: state %d\n", port->sm_rx_state);
 			switch (port->sm_rx_state) {
 			case AD_RX_PORT_DISABLED:
 				if (port->sm_vars & AD_PORT_MOVED)
@@ -1071,6 +1212,10 @@ static void ad_rx_machine(struct lacpdu *lacpdu, struct port *port)
 					      & AD_PORT_LACP_ENABLED) == 0))
 					port->sm_rx_state = AD_RX_LACP_DISABLED;    // next state
 				break;
+			case AD_RX_DEFAULTED:
+				if (is_best_fallback_slave(port->slave))
+					port->sm_rx_state = AD_RX_FALLBACK;	// next state
+				break;
 			default:    //to silence the compiler
 				break;
 
@@ -1099,9 +1244,13 @@ static void ad_rx_machine(struct lacpdu *lacpdu, struct port *port)
 
 		case AD_RX_PORT_DISABLED:
 			port->sm_vars &= ~AD_PORT_MATCHED;
+			port->sm_vars &= ~AD_PORT_FALLBACK;
+			port->sm_rx_fb_timer_counter = 0;
 			break;
 		case AD_RX_LACP_DISABLED:
 			port->sm_vars &= ~AD_PORT_SELECTED;
+			port->sm_vars &= ~AD_PORT_FALLBACK;
+			port->sm_rx_fb_timer_counter = 0;
 			__record_default(port);
 			port->partner_oper.port_state &= ~AD_STATE_AGGREGATION;
 			port->sm_vars |= AD_PORT_MATCHED;
@@ -1113,6 +1262,8 @@ static void ad_rx_machine(struct lacpdu *lacpdu, struct port *port)
 			//mux machine in case of EXPIRED even if LINK_DOWN didn't arrive for the port.
 			port->partner_oper.port_state &= ~AD_STATE_SYNCHRONIZATION;
 			port->sm_vars &= ~AD_PORT_MATCHED;
+			port->sm_vars &= ~AD_PORT_FALLBACK;
+			port->sm_rx_fb_timer_counter = 0;
 			port->partner_oper.port_state |=
 				AD_STATE_LACP_ACTIVITY;
 			port->sm_rx_timer_counter = __ad_timer_to_ticks(AD_CURRENT_WHILE_TIMER, (u16)(AD_SHORT_TIMEOUT));
@@ -1122,6 +1273,8 @@ static void ad_rx_machine(struct lacpdu *lacpdu, struct port *port)
 			__update_default_selected(port);
 			__record_default(port);
 			port->sm_vars |= AD_PORT_MATCHED;
+			port->sm_vars &= ~AD_PORT_FALLBACK;
+			port->sm_rx_fb_timer_counter = 0;
 			port->actor_oper_port_state &= ~AD_STATE_EXPIRED;
 			break;
 		case AD_RX_CURRENT:
@@ -1138,6 +1291,21 @@ static void ad_rx_machine(struct lacpdu *lacpdu, struct port *port)
 			__record_pdu(lacpdu, port);
 			port->sm_rx_timer_counter = __ad_timer_to_ticks(AD_CURRENT_WHILE_TIMER, (u16)(port->actor_oper_port_state & AD_STATE_LACP_TIMEOUT));
 			port->actor_oper_port_state &= ~AD_STATE_EXPIRED;
+			port->sm_vars &= ~AD_PORT_FALLBACK;
+			break;
+		case AD_RX_FALLBACK:
+			pr_debug("rx_machine: %s in fallback state (%d)\n",
+				 port->slave->dev->name, port->sm_rx_fb_timer_counter);
+
+			port->sm_rx_fb_timer_counter =
+				port->slave->bond->params.lacp_fallback_period *
+				ad_ticks_per_sec;
+			port->sm_vars &= ~AD_PORT_SELECTED;
+			port->sm_vars |= AD_PORT_FALLBACK;
+			break;
+		case AD_RX_FALLBACK_EXPIRED:
+			port->sm_vars &= ~AD_PORT_FALLBACK;
+			port->sm_rx_fb_timer_counter = 0;
 			break;
 		default:    //to silence the compiler
 			break;
@@ -1279,7 +1447,7 @@ static void ad_port_selection_logic(struct port *port)
 	// if the port is already Selected, do nothing
 	if (port->sm_vars & AD_PORT_SELECTED)
 		return;
-
+	pr_debug("Running port selection (%s)\n", port->slave->dev->name);
 	// if the port is connected to other aggregator, detach it
 	if (port->aggregator) {
 		// detach the port from its former aggregator
@@ -1431,13 +1599,25 @@ static struct aggregator *ad_agg_selection_test(struct aggregator *best,
 	 *     did reply, keep best.
 	 *
 	 * 4.  Therefore, current and best both have partner replies or
-	 *     both do not, so perform selection policy:
+	 *     both do not, so:
+	 *
+	 * 4a. If both have no partner and bond is fallback eligible and if
+	 *     current agg is a better fallback slave, select current.
+	 *
+	 * 4b. If both have no partner and bond is fallback eligible and if
+	 *     best agg is a better fallback, keep best.
+	 *
+	 * 5.  Therefore, current and best both have partner replies or
+	 *     both do not and bond is not fallback eligible, perform
+	 *     selection policy:
 	 *
 	 * BOND_AD_COUNT: Select by count of ports.  If count is equal,
 	 *     select by bandwidth.
 	 *
 	 * BOND_AD_STABLE, BOND_AD_BANDWIDTH: Select by bandwidth.
 	 */
+	struct slave *s1, *s2;
+
 	if (!best)
 		return curr;
 
@@ -1453,6 +1633,19 @@ static struct aggregator *ad_agg_selection_test(struct aggregator *best,
 	if (!__agg_has_partner(curr) && __agg_has_partner(best))
 		return best;
 
+	if (is_lacp_fallback_eligible(curr->slave->bond) &&
+	    !__agg_has_partner(curr) && !__agg_has_partner(best)) {
+
+		s1 = __get_best_fallback_slave_in_agg(curr);
+		s2 = __get_best_fallback_slave_in_agg(best);
+
+		if (is_better_fallback_slave(s1, s2))
+			return curr;
+
+		if (is_better_fallback_slave(s2, s1))
+			return best;
+	}
+
 	switch (__get_agg_selection_mode(curr->lag_ports)) {
 	case BOND_AD_COUNT:
 		if (curr->num_of_ports > best->num_of_ports)
@@ -1517,6 +1710,7 @@ static void ad_agg_selection_logic(struct aggregator *agg)
 {
 	struct aggregator *best, *active, *origin;
 	struct port *port;
+	bool best_is_in_fallback = false;
 
 	origin = agg;
 	active = __get_active_agg(agg);
@@ -1530,7 +1724,9 @@ static void ad_agg_selection_logic(struct aggregator *agg)
 
 	} while ((agg = __get_next_agg(agg)));
 
-	if (best &&
+	best_is_in_fallback = is_agg_in_fallback(best);
+
+	if (best && !best_is_in_fallback &&
 	    __get_agg_selection_mode(best->lag_ports) == BOND_AD_STABLE) {
 		/*
 		 * For the STABLE policy, don't replace the old active
@@ -1596,6 +1792,7 @@ static void ad_agg_selection_logic(struct aggregator *agg)
 			for (port = active->lag_ports; port;
 			     port = port->next_port_in_aggregator) {
 				__disable_port(port);
+				port->sm_vars &= ~AD_PORT_FALLBACK;
 			}
 		}
 	}
@@ -1608,9 +1805,14 @@ static void ad_agg_selection_logic(struct aggregator *agg)
 
 	if (active) {
 		if (!__agg_has_partner(active)) {
+			bool is_fallback_eligible = is_lacp_fallback_eligible(active->slave->bond);
 			for (port = active->lag_ports; port;
 			     port = port->next_port_in_aggregator) {
-				__enable_port(port);
+				if (!is_fallback_eligible ||
+				    (is_best_fallback_slave(port->slave))) {
+					pr_debug("(%s) agg active and no partner\n", port->slave->dev->name);
+					__enable_port(port);
+				}
 			}
 		}
 	}
@@ -1725,6 +1927,9 @@ static void ad_initialize_port(struct port *port, int lacp_fast)
 		port->next_port_in_aggregator = NULL;
 		port->transaction_id = 0;
 
+		// fallback
+		port->sm_rx_fb_timer_counter = 0;
+
 		memcpy(&port->lacpdu, &lacpdu, sizeof(lacpdu));
 	}
 }
@@ -2355,21 +2560,28 @@ int bond_3ad_set_carrier(struct bonding *bond)
 	struct aggregator *active;
 	struct slave *slave;
 	int active_slaves = 0, i;
+	bool fallback = false;
 
 	bond_for_each_slave(bond, slave, i)
 		if (bond_is_active_slave(slave))
 			active_slaves++;
 
 	active = __get_active_agg(&(SLAVE_AD_INFO(bond->first_slave).aggregator));
-	if (active && __agg_has_partner(active)) {
+	fallback = is_agg_in_fallback(active);
+	pr_debug("%s %s active id: %d #actives: %d fallback: %d\n", __FUNCTION__,
+		 bond->dev->name, active ? active->aggregator_identifier : 0,
+		 active_slaves, fallback);
+	if (active && (fallback || __agg_has_partner(active))) {
 		/* are enough slaves available to consider link up? */
 		if (active_slaves < bond->params.min_links) {
 			if (netif_carrier_ok(bond->dev)) {
 				netif_carrier_off(bond->dev);
+				pr_debug("Setting bond %s off\n", bond->dev->name);
 				return 1;
 			}
 		} else if (!netif_carrier_ok(bond->dev)) {
 			netif_carrier_on(bond->dev);
+			pr_debug("Setting bond %s on\n", bond->dev->name);
 			return 1;
 		}
 		return 0;
diff --git a/drivers/net/bonding/bond_3ad.h b/drivers/net/bonding/bond_3ad.h
index 677c108..bd844cc 100644
--- a/drivers/net/bonding/bond_3ad.h
+++ b/drivers/net/bonding/bond_3ad.h
@@ -55,7 +55,9 @@ typedef enum {
 	AD_RX_LACP_DISABLED,  // rx Machine
 	AD_RX_EXPIRED,	      // rx Machine
 	AD_RX_DEFAULTED,      // rx Machine
-	AD_RX_CURRENT	      // rx Machine
+	AD_RX_CURRENT,	      // rx Machine
+	AD_RX_FALLBACK,       // rx Machine
+	AD_RX_FALLBACK_EXPIRED // rx Machine
 } rx_states_t;
 
 // periodic machine states(43.4.12 in the 802.3ad standard)
@@ -100,7 +102,8 @@ typedef enum {
 	AD_ACTOR_CHURN_TIMER,
 	AD_PERIODIC_TIMER,
 	AD_PARTNER_CHURN_TIMER,
-	AD_WAIT_WHILE_TIMER
+	AD_WAIT_WHILE_TIMER,
+	AD_FALLBACK_TIMER,
 } ad_timers_t;
 
 #pragma pack(1)
@@ -223,6 +226,7 @@ typedef struct port {
 	u16 sm_vars;	      // all state machines variables for this port
 	rx_states_t sm_rx_state;	// state machine rx state
 	u16 sm_rx_timer_counter;    // state machine rx timer counter
+	u16 sm_rx_fb_timer_counter;    // state machine rx fallback timer counter
 	periodic_states_t sm_periodic_state;// state machine periodic state
 	u16 sm_periodic_timer_counter;	// state machine periodic timer counter
 	mux_states_t sm_mux_state;	// state machine mux state
diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c
index 342e647..c75b3ef 100644
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@ -89,6 +89,8 @@
 /* monitor all links that often (in milliseconds). <=0 disables monitoring */
 #define BOND_LINK_MON_INTERV	0
 #define BOND_LINK_ARP_INTERV	0
+#define BOND_LACP_FALLBACK_PERIOD 0
+#define BOND_LACP_FALLBACK_ACTIVE_DEFAULT 1
 
 static int max_bonds	= BOND_DEFAULT_MAX_BONDS;
 static int tx_queues	= BOND_DEFAULT_TX_QUEUES;
@@ -1164,13 +1166,13 @@ static bool bond_should_notify_peers(struct bonding *bond)
 {
 	struct slave *slave = bond->curr_active_slave;
 
-	pr_debug("bond_should_notify_peers: bond %s slave %s\n",
-		 bond->dev->name, slave ? slave->dev->name : "NULL");
-
 	if (!slave || !bond->send_peer_notif ||
 	    test_bit(__LINK_STATE_LINKWATCH_PENDING, &slave->dev->state))
 		return false;
 
+	pr_debug("bond_should_notify_peers: bond %s slave %s\n",
+		 bond->dev->name, slave ? slave->dev->name : "NULL");
+
 	bond->send_peer_notif--;
 	return true;
 }
@@ -2004,6 +2006,12 @@ int bond_enslave(struct net_device *bond_dev, struct net_device *slave_dev)
 		goto err_dest_symlinks;
 	}
 
+	res = bond_sysfs_slave_add(new_slave);
+	if (res) {
+		pr_debug("Error %d calling bond_sysfs_slave_add\n", res);
+		goto err_detach;
+	}
+
 	pr_info("%s: enslaving %s as a%s interface with a%s link.\n",
 		bond_dev->name, slave_dev->name,
 		bond_is_active_slave(new_slave) ? "n active" : " backup",
@@ -2126,6 +2134,7 @@ int bond_release(struct net_device *bond_dev, struct net_device *slave_dev)
 	bond->current_arp_slave = NULL;
 
 	/* release the slave from its bond */
+	bond_sysfs_slave_del(slave);
 	bond_detach_slave(bond, slave);
 
 	if (bond->primary_slave == slave)
@@ -2316,6 +2325,7 @@ static int bond_release_all(struct net_device *bond_dev)
 			bond_alb_deinit_slave(bond, slave);
 		}
 
+		bond_sysfs_slave_del(slave);
 		bond_destroy_slave_symlinks(bond_dev, slave_dev);
 		bond_del_vlans_from_slave(bond, slave_dev);
 
@@ -4916,6 +4926,8 @@ static int bond_check_params(struct bond_params *params)
 	params->all_slaves_active = all_slaves_active;
 	params->resend_igmp = resend_igmp;
 	params->min_links = min_links;
+	params->lacp_fallback_period = BOND_LACP_FALLBACK_PERIOD;
+	params->lacp_fallback_active = BOND_LACP_FALLBACK_ACTIVE_DEFAULT;
 
 	if (primary) {
 		strncpy(params->primary, primary, IFNAMSIZ);
diff --git a/drivers/net/bonding/bond_procfs.c b/drivers/net/bonding/bond_procfs.c
index 4fa1b95..13217bf 100644
--- a/drivers/net/bonding/bond_procfs.c
+++ b/drivers/net/bonding/bond_procfs.c
@@ -150,6 +150,12 @@ static void bond_info_show_master(struct seq_file *seq)
 			seq_printf(seq, "\tPartner Mac Address: %pM\n",
 				   ad_info.partner_system);
 		}
+
+		seq_printf(seq, "Fall back Info:\n");
+		seq_printf(seq, "\tAllowed: %d\n",
+			   bond->params.lacp_fallback_allow);
+		seq_printf(seq, "\tTimeout: %d\n",
+			   bond->params.lacp_fallback_period);
 	}
 }
 
@@ -185,6 +191,12 @@ static void bond_info_show_slave(struct seq_file *seq,
 				   agg->aggregator_identifier);
 		else
 			seq_puts(seq, "Aggregator ID: N/A\n");
+		seq_printf(seq, "Lacp fall back priority: %d\n",
+			   slave->lacp_fallback_priority);
+		if (SLAVE_AD_INFO(slave).port.sm_rx_state == AD_RX_FALLBACK)
+			seq_printf(seq, "LACP fall back: on\n");
+		if (SLAVE_AD_INFO(slave).port.sm_rx_state == AD_RX_FALLBACK_EXPIRED)
+			seq_printf(seq, "LACP fall back: expired\n");
 	}
 	seq_printf(seq, "Slave queue ID: %d\n", slave->queue_id);
 }
diff --git a/drivers/net/bonding/bond_sysfs.c b/drivers/net/bonding/bond_sysfs.c
index b897b7b..6d7ea50 100644
--- a/drivers/net/bonding/bond_sysfs.c
+++ b/drivers/net/bonding/bond_sysfs.c
@@ -47,6 +47,78 @@
 #define to_dev(obj)	container_of(obj, struct device, kobj)
 #define to_bond(cd)	((struct bonding *)(netdev_priv(to_net_dev(cd))))
 
+struct slave_attribute {
+	struct attribute attr;
+	ssize_t (*show)(struct slave *, char *);
+	int (*store)(struct slave *, unsigned long);
+};
+
+static ssize_t show_lacp_fallback_priority(struct slave *slave, char *buf)
+{
+	return sprintf(buf, "%d\n", slave->lacp_fallback_priority);
+}
+
+static int store_lacp_fallback_priority(struct slave *slave, unsigned long val)
+{
+	slave->lacp_fallback_priority = val;
+	return 0;
+}
+
+static const struct slave_attribute slave_lacp_fallback_priority = {
+        .attr = {
+                .name = "lacp_fallback_priority",
+                .mode = S_IWUSR | S_IRUGO,
+        },
+        .show = show_lacp_fallback_priority,
+        .store = store_lacp_fallback_priority,
+};
+
+static const struct slave_attribute *slave_attrs[] = {
+	&slave_lacp_fallback_priority,
+	NULL
+};
+
+#define to_slave_attr(_at) container_of(_at, struct slave_attribute, attr)
+#define to_slave(obj) container_of(obj, struct slave, kobj)
+
+static ssize_t slave_show(struct kobject *kobj,
+			  struct attribute *attr, char *buf)
+{
+	struct slave_attribute *slave_attr = to_slave_attr(attr);
+	struct slave *slave = to_slave(kobj);
+
+	return slave_attr->show(slave, buf);
+}
+
+static ssize_t slave_store(struct kobject *kobj,
+			   struct attribute *attr,
+			   const char *buf, size_t count)
+{
+	struct slave_attribute *slave_attr = to_slave_attr(attr);
+	struct slave *slave = to_slave(kobj);
+	ssize_t ret = -EINVAL;
+	char *endp;
+	unsigned long val;
+
+	val = simple_strtoul(buf, &endp, 0);
+	if (endp != buf) {
+		if (!rtnl_trylock())
+			return restart_syscall();
+
+		ret = slave_attr->store(slave, val);
+		if (ret == 0)
+			ret = count;
+
+		rtnl_unlock();
+	}
+	return ret;
+}
+
+const struct sysfs_ops slave_sysfs_ops = {
+	.show = slave_show,
+	.store = slave_store,
+};
+
 /*
  * "show" function for the bond_masters attribute.
  * The class parameter is ignored.
@@ -880,6 +952,104 @@ static ssize_t bonding_store_min_links(struct device *d,
 static DEVICE_ATTR(min_links, S_IRUGO | S_IWUSR,
 		   bonding_show_min_links, bonding_store_min_links);
 
+static ssize_t bonding_show_lacp_fallback_allow(struct device *d,
+						struct device_attribute *attr,
+						char *buf)
+{
+	struct bonding *bond = to_bond(d);
+
+	return sprintf(buf, "%d\n", bond->params.lacp_fallback_allow);
+}
+
+static ssize_t bonding_store_lacp_fallback_allow(struct device *d,
+						 struct device_attribute *attr,
+						 const char *buf, size_t count)
+{
+	struct bonding *bond = to_bond(d);
+	int ret;
+	unsigned int new_value;
+
+	ret = kstrtouint(buf, 0, &new_value);
+	if (ret < 0) {
+                pr_err("%s: Ignoring invalid lacp_fallback_allow value %s.\n",
+                       bond->dev->name, buf);
+                return ret;
+	}
+
+	pr_debug("%s: Setting lacp_fallback_allow to %u\n",
+                 bond->dev->name, new_value);
+	bond->params.lacp_fallback_allow = new_value;
+	return count;
+}
+static DEVICE_ATTR(lacp_fallback_allow, S_IRUGO | S_IWUSR,
+		   bonding_show_lacp_fallback_allow, bonding_store_lacp_fallback_allow);
+
+static ssize_t bonding_show_lacp_fallback_period(struct device *d,
+						 struct device_attribute *attr,
+						 char *buf)
+{
+	struct bonding *bond = to_bond(d);
+
+	return sprintf(buf, "%d\n", bond->params.lacp_fallback_period);
+}
+
+static ssize_t bonding_store_lacp_fallback_period(struct device *d,
+						  struct device_attribute *attr,
+						  const char *buf, size_t count)
+{
+	struct bonding *bond = to_bond(d);
+	int ret;
+	unsigned int new_value;
+
+	ret = kstrtouint(buf, 0, &new_value);
+	if (ret < 0) {
+		pr_err("%s: Ignoring invalid lacp_fallback_period value %s.\n",
+			bond->dev->name, buf);
+		return ret;
+	}
+
+	pr_debug("%s: Setting lacp_fallback period to %u\n",
+		 bond->dev->name, new_value);
+	bond->params.lacp_fallback_period = new_value;
+	return count;
+}
+static DEVICE_ATTR(lacp_fallback_period, S_IRUGO | S_IWUSR,
+                   bonding_show_lacp_fallback_period,
+		   bonding_store_lacp_fallback_period);
+
+static ssize_t bonding_show_lacp_fallback_active(struct device *d,
+						 struct device_attribute *attr,
+						 char *buf)
+{
+	struct bonding *bond = to_bond(d);
+
+	return sprintf(buf, "%d\n", bond->params.lacp_fallback_active);
+}
+
+static ssize_t bonding_store_lacp_fallback_active(struct device *d,
+						  struct device_attribute *attr,
+						  const char *buf, size_t count)
+{
+	struct bonding *bond = to_bond(d);
+	int ret;
+	unsigned int new_value;
+
+	ret = kstrtouint(buf, 0, &new_value);
+	if (ret < 0) {
+		pr_err("%s: Ignoring invalid lacp_fallback_active value %s.\n",
+			bond->dev->name, buf);
+		return ret;
+	}
+
+	pr_debug("%s: Setting lacp_fallback active to %u\n",
+		 bond->dev->name, new_value);
+	bond->params.lacp_fallback_active = new_value;
+	return count;
+}
+static DEVICE_ATTR(lacp_fallback_active, S_IRUGO | S_IWUSR,
+                   bonding_show_lacp_fallback_active,
+                   bonding_store_lacp_fallback_active);
+
 static ssize_t bonding_show_ad_select(struct device *d,
 				      struct device_attribute *attr,
 				      char *buf)
@@ -1824,6 +1994,9 @@ static struct attribute *per_bond_attrs[] = {
 	&dev_attr_all_slaves_active.attr,
 	&dev_attr_resend_igmp.attr,
 	&dev_attr_min_links.attr,
+	&dev_attr_lacp_fallback_allow.attr,
+	&dev_attr_lacp_fallback_active.attr,
+	&dev_attr_lacp_fallback_period.attr,
 	NULL,
 };
 
@@ -1885,3 +2058,39 @@ void bond_prepare_sysfs_group(struct bonding *bond)
 	bond->dev->sysfs_groups[0] = &bonding_group;
 }
 
+static struct kobj_type slave_ktype = {
+#ifdef CONFIG_SYSFS
+	.sysfs_ops = &slave_sysfs_ops,
+#endif
+};
+
+int bond_sysfs_slave_add(struct slave *slave)
+{
+	const struct slave_attribute **a;
+	int err;
+
+	err = kobject_init_and_add(&slave->kobj, &slave_ktype,
+				   &(slave->dev->dev.kobj), "bonding_slave");
+	if (err)
+		return err;
+
+	for (a = slave_attrs; *a; ++a) {
+		err = sysfs_create_file(&slave->kobj, &((*a)->attr));
+		if (err) {
+			kobject_del(&slave->kobj);
+			return err;
+		}
+	}
+
+	return 0;
+}
+
+void bond_sysfs_slave_del(struct slave *slave)
+{
+	const struct slave_attribute **a;
+
+	for (a = slave_attrs; *a; ++a)
+		sysfs_remove_file(&slave->kobj, &((*a)->attr));
+
+	kobject_del(&slave->kobj);
+}
diff --git a/drivers/net/bonding/bonding.h b/drivers/net/bonding/bonding.h
index 553f3ce..382947a 100644
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@ -157,6 +157,9 @@ struct bond_params {
 	int tx_queues;
 	int all_slaves_active;
 	int resend_igmp;
+	int lacp_fallback_allow;
+	int lacp_fallback_active;
+	u32 lacp_fallback_period;
 };
 
 struct bond_parm_tbl {
@@ -191,11 +194,13 @@ struct slave {
 	u32    speed;
 	u16    queue_id;
 	u8     perm_hwaddr[ETH_ALEN];
+	int    lacp_fallback_priority;
 	struct ad_slave_info ad_info; /* HUGE - better to dynamically alloc */
 	struct tlb_slave_info tlb_info;
 #ifdef CONFIG_NET_POLL_CONTROLLER
 	struct netpoll *np;
 #endif
+	struct kobject kobj;
 };
 
 /*
@@ -381,6 +386,8 @@ int bond_create(struct net *net, const char *name);
 int bond_create_sysfs(struct bond_net *net);
 void bond_destroy_sysfs(struct bond_net *net);
 void bond_prepare_sysfs_group(struct bonding *bond);
+int bond_sysfs_slave_add(struct slave *slave);
+void bond_sysfs_slave_del(struct slave *slave);
 int bond_create_slave_symlinks(struct net_device *master, struct net_device *slave);
 void bond_destroy_slave_symlinks(struct net_device *master, struct net_device *slave);
 int bond_enslave(struct net_device *bond_dev, struct net_device *slave_dev);
