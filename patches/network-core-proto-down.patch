This patch introduces the proto_down (errDisabled) state -

1. proto_down is a bitmap and bits are tyically set/unset by applications.
Setting it is intended to oper-down and carrier-down the device independent
of admin-down/IFF_UP.
2. oper-down handing is done by netdev core (in a dev-type agnostic fashion);
carrier-down handling is done by drivers interested in handling that state
(currently switchd and virtio).
3. Currently the only application that uses proto_down is MLAG
(IF_LINK_PROTO_DOWN_MLAG). In later releases STP and PTM also have use for
this state (IF_LINK_PROTO_DOWN_STP and IF_LINK_PROTO_DOWN_PTM can be introduced
 at that time). Also see iproute2 patch for ip link see interface.
2. clagd will set the proto_down (IF_LINK_PROTO_DOWN_MLAG bit) via rtnl
attribute IFLA_LINKPROTODOWN. This attribute allow individual proto_down bits
to be set or unset (also see libnl patch for proto_down).
3. Setting of proto_down is handled by netdev core via the state flag
IFF_PROTO_DOWN. IFF_PROTO_DOWN is used to hold down the operstate of a device
(use case is MLAG-VxLAN where a virtual device would need to be held oper-down).
4. Whenever IFF_PROTO_DOWN is set or cleared a linkwatch event is fired as the
operstate of the device may need to be re-evaluated. In addition a
NETDEV_CHANGE notification and rtnl _NEWLINK update is also sent.
5. The NETDEV_CHANGE notification is currently used by the virtio driver to
hold back the carrier (this way the softnode and hard node function in the same
fashion).
6. The rtnl update is used by switchd to "bcm port down" the device (which
will result in the expected carrier down)

diff --git a/include/linux/if.h b/include/linux/if.h
index db20bd4..1d7525f 100644
--- a/include/linux/if.h
+++ b/include/linux/if.h
@@ -52,9 +52,11 @@
 #define IFF_DORMANT	0x20000		/* driver signals dormant	*/
 
 #define IFF_ECHO	0x40000		/* echo sent packets		*/
+#define IFF_PROTO_DOWN	0x1000000	/* protocol is down on the interface */
 
 #define IFF_VOLATILE	(IFF_LOOPBACK|IFF_POINTOPOINT|IFF_BROADCAST|IFF_ECHO|\
-		IFF_MASTER|IFF_SLAVE|IFF_RUNNING|IFF_LOWER_UP|IFF_DORMANT)
+		IFF_MASTER|IFF_SLAVE|IFF_RUNNING|IFF_LOWER_UP|IFF_DORMANT|\
+		IFF_PROTO_DOWN)
 
 /* Private (from user) interface flags (netdevice->priv_flags). */
 #define IFF_802_1Q_VLAN 0x1             /* 802.1Q VLAN device.          */
@@ -124,6 +126,9 @@ enum {
 	IF_LINK_MODE_DORMANT,	/* limit upward transition to dormant */
 };
 
+/* list of protocols that want to hold the device in a proto_down state */
+#define IF_LINK_PROTO_DOWN_MLAG 0x1
+
 /*
  *	Device mapping structure. I'd just gone off and designed a 
  *	beautiful scheme using only loadable modules with arguments
diff --git a/include/linux/if_link.h b/include/linux/if_link.h
index 45736db..b4c35ee 100644
--- a/include/linux/if_link.h
+++ b/include/linux/if_link.h
@@ -80,6 +80,13 @@ struct rtnl_link_ifmap {
 	__u8	port;
 };
 
+/* link protodown */
+struct rtnl_link_protodown {
+	__u32	proto_down; /* Bit mask of protocols that want to hold the
+						 * device down */
+	__u32	proto_down_change; /* Change mask for proto_down */
+};
+
 /*
  * IFLA_AF_SPEC
  *   Contains nested attributes for address family specific attributes.
@@ -140,6 +147,8 @@ enum {
 #ifndef __GENKSYMS__
 	IFLA_EXT_MASK,		/* Extended info mask, VFs, etc */
 #endif
+	IFLA_LINKPROTODOWN = 200,	/* Bit mask of protocols that want to
+						 * hold the device down */
 	__IFLA_MAX
 };
 
diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index b7c8918..70f43fb 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -1380,6 +1380,7 @@ struct net_device {
 
 	/* group the device belongs to */
 	int group;
+	unsigned int proto_down; /* protocol bits to hold down the operstate */
 };
 #define to_net_dev(d) container_of(d, struct net_device, dev)
 
@@ -2281,6 +2282,9 @@ extern int		dev_hard_start_xmit(struct sk_buff *skb,
 					    struct netdev_queue *txq);
 extern int		dev_forward_skb(struct net_device *dev,
 					struct sk_buff *skb);
+extern void		dev_set_proto_down(struct net_device *dev,
+					unsigned int proto_down,
+					unsigned int proto_down_change);
 
 extern int		netdev_budget;
 extern int		kill_routes_on_linkdown;
diff --git a/net/8021q/vlan_dev.c b/net/8021q/vlan_dev.c
index 91c9248..fc1739a 100644
--- a/net/8021q/vlan_dev.c
+++ b/net/8021q/vlan_dev.c
@@ -568,7 +568,7 @@ static int vlan_dev_init(struct net_device *dev)
 
 	/* IFF_BROADCAST|IFF_MULTICAST; ??? */
 	dev->flags  = real_dev->flags & ~(IFF_UP | IFF_PROMISC | IFF_ALLMULTI |
-					  IFF_MASTER | IFF_SLAVE);
+				IFF_MASTER | IFF_SLAVE | IFF_PROTO_DOWN);
 	dev->iflink = real_dev->ifindex;
 	dev->state  = (real_dev->state & ((1<<__LINK_STATE_NOCARRIER) |
 					  (1<<__LINK_STATE_DORMANT))) |
diff --git a/net/core/dev.c b/net/core/dev.c
index 3073f84..4e67c83 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -4827,6 +4827,43 @@ int dev_change_flags(struct net_device *dev, unsigned flags)
 EXPORT_SYMBOL(dev_change_flags);
 
 /**
+ *	dev_set_proto_down - Set the link protocol state
+ *	@dev: device
+ *	@proto_down: bitmap of protocols that want to hold the link down
+ *	@proto_down_change: bitmap of protocols that need to be changed
+ *
+ */
+void dev_set_proto_down(struct net_device *dev, unsigned int proto_down,
+				unsigned int proto_down_change)
+{
+	int err;
+	int old_flags;
+
+	proto_down = (proto_down & proto_down_change) |
+				(dev->proto_down & ~proto_down_change);
+	if (proto_down == dev->proto_down)
+		return 0;
+
+	old_flags = dev->flags & IFF_PROTO_DOWN;
+	write_lock_bh(&dev_base_lock);
+	dev->proto_down = proto_down;
+	if (dev->proto_down)
+		dev->flags |= IFF_PROTO_DOWN;
+	else
+		dev->flags &= ~IFF_PROTO_DOWN;
+	write_unlock_bh(&dev_base_lock);
+
+	if (old_flags != (dev->flags & IFF_PROTO_DOWN)) {
+		rtmsg_ifinfo(RTM_NEWLINK, dev, IFF_PROTO_DOWN);
+		call_netdevice_notifiers(NETDEV_CHANGE, dev);
+
+		/* the operstate may need to be re-evaluated */
+		linkwatch_fire_event(dev);
+	}
+}
+EXPORT_SYMBOL(dev_set_proto_down);
+
+/**
  *	dev_set_mtu - Change maximum transfer unit
  *	@dev: device
  *	@new_mtu: new transfer unit
diff --git a/net/core/link_watch.c b/net/core/link_watch.c
index c3519c6..818a003 100644
--- a/net/core/link_watch.c
+++ b/net/core/link_watch.c
@@ -39,7 +39,7 @@ static DEFINE_SPINLOCK(lweventlist_lock);
 
 static unsigned char default_operstate(const struct net_device *dev)
 {
-	if (!netif_carrier_ok(dev))
+	if (!netif_carrier_ok(dev) || (dev->flags & IFF_PROTO_DOWN))
 		return (dev->ifindex != dev->iflink ?
 			IF_OPER_LOWERLAYERDOWN : IF_OPER_DOWN);
 
diff --git a/net/core/net-sysfs.c b/net/core/net-sysfs.c
index 474a665..c783418 100644
--- a/net/core/net-sysfs.c
+++ b/net/core/net-sysfs.c
@@ -104,6 +104,7 @@ NETDEVICE_SHOW(iflink, fmt_dec);
 NETDEVICE_SHOW(ifindex, fmt_dec);
 NETDEVICE_SHOW(type, fmt_dec);
 NETDEVICE_SHOW(link_mode, fmt_dec);
+NETDEVICE_SHOW(proto_down, fmt_dec);
 
 /* use same locking rules as GIFHWADDR ioctl's */
 static ssize_t show_address(struct device *dev, struct device_attribute *attr,
@@ -327,6 +328,7 @@ static struct device_attribute net_class_attributes[] = {
 	__ATTR(tx_queue_len, S_IRUGO | S_IWUSR, show_tx_queue_len,
 	       store_tx_queue_len),
 	__ATTR(netdev_group, S_IRUGO | S_IWUSR, show_group, store_group),
+	__ATTR(proto_down, S_IRUGO, show_proto_down, NULL),
 	{}
 };
 
diff --git a/net/core/rtnetlink.c b/net/core/rtnetlink.c
index 0ac7a53..61a2c93 100644
--- a/net/core/rtnetlink.c
+++ b/net/core/rtnetlink.c
@@ -873,6 +873,7 @@ static noinline size_t if_nlmsg_size(const struct net_device *dev,
 	       + nla_total_size(4) /* IFLA_MASTER */
 	       + nla_total_size(1) /* IFLA_OPERSTATE */
 	       + nla_total_size(1) /* IFLA_LINKMODE */
+	       + nla_total_size(sizeof(struct rtnl_link_protodown))
 	       + nla_total_size(ext_filter_mask
 			        & RTEXT_FILTER_VF ? 4 : 0) /* IFLA_NUM_VF */
 	       + rtnl_vfinfo_size(dev, ext_filter_mask) /* IFLA_VFINFO_LIST */
@@ -990,6 +991,13 @@ static int rtnl_fill_ifinfo(struct sk_buff *skb, struct net_device *dev,
 	NLA_PUT_U32(skb, IFLA_MTU, dev->mtu);
 	NLA_PUT_U32(skb, IFLA_GROUP, dev->group);
 
+	struct rtnl_link_protodown link_proto_down = {
+		.proto_down	= dev->proto_down,
+		.proto_down_change	= ~0,
+	};
+	NLA_PUT(skb, IFLA_LINKPROTODOWN, sizeof(link_proto_down),
+				&link_proto_down);
+
 	if (dev->ifindex != dev->iflink)
 		NLA_PUT_U32(skb, IFLA_LINK, dev->iflink);
 
@@ -1214,6 +1222,7 @@ const struct nla_policy ifla_policy[IFLA_MAX+1] = {
 #ifndef __GENKSYMS__
 	[IFLA_EXT_MASK]		= { .type = NLA_U32 },
 #endif
+	[IFLA_LINKPROTODOWN]	= { .len = sizeof(struct rtnl_link_protodown) },
 };
 EXPORT_SYMBOL(ifla_policy);
 
@@ -1538,6 +1547,13 @@ static int do_setlink(struct net_device *dev, struct ifinfomsg *ifm,
 		write_unlock_bh(&dev_base_lock);
 	}
 
+	if (tb[IFLA_LINKPROTODOWN]) {
+		struct rtnl_link_protodown *link_proto_down;
+		link_proto_down = nla_data(tb[IFLA_LINKPROTODOWN]);
+		dev_set_proto_down(dev, link_proto_down->proto_down,
+			link_proto_down->proto_down_change);
+	}
+
 	if (tb[IFLA_VFINFO_LIST]) {
 		struct nlattr *attr;
 		int rem;
@@ -1772,6 +1788,8 @@ struct net_device *rtnl_create_link(struct net *src_net, struct net *net,
 		dev->link_mode = nla_get_u8(tb[IFLA_LINKMODE]);
 	if (tb[IFLA_GROUP])
 		dev_set_group(dev, nla_get_u32(tb[IFLA_GROUP]));
+	if (tb[IFLA_LINKPROTODOWN])
+		dev->proto_down = nla_get_u32(tb[IFLA_LINKPROTODOWN]);
 
 	return dev;
 
