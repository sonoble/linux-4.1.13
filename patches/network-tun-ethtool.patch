Enable tun ethtool using new port library

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index f895245..adc6269 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -54,6 +54,7 @@
 #include <linux/etherdevice.h>
 #include <linux/miscdevice.h>
 #include <linux/ethtool.h>
+#include <linux/port.h>
 #include <linux/rtnetlink.h>
 #include <linux/compat.h>
 #include <linux/if.h>
@@ -491,6 +492,52 @@ static void tun_poll_controller(struct net_device *dev)
 	return;
 }
 #endif
+
+struct rtnl_link_stats64* tun_net_get_stats64(struct net_device        *dev,
+					      struct rtnl_link_stats64 *stats)
+{
+	struct tun_struct *tun = netdev_priv(dev);
+	struct rtnl_link_stats64 tun_stats;
+	struct ethtool_stats estats = { 0, };
+	unsigned int start;
+	int count;
+	u64 *hw_stats;
+
+	do {
+		start = u64_stats_fetch_begin(&tun->stat_sync);
+		memcpy(&tun_stats, &tun->stats, sizeof(struct rtnl_link_stats64));
+	} while (u64_stats_fetch_retry(&tun->stat_sync, start));
+
+
+	count = port_get_sset_count(dev, ETH_SS_STATS);
+	if (count <= 0)
+		goto err_out;
+
+	hw_stats = kmalloc(count * sizeof(u64), GFP_ATOMIC);
+	if (!hw_stats)
+		goto err_out;
+
+	estats.n_stats = count;
+	port_get_ethtool_stats(dev, &estats, hw_stats);
+
+	stats->rx_packets = hw_stats[1] + hw_stats[2] + hw_stats[3];
+	stats->rx_bytes = hw_stats[0];
+	stats->multicast = hw_stats[3];
+	stats->rx_errors = hw_stats[12] + hw_stats[13];
+	stats->rx_dropped = hw_stats[8] + tun_stats.rx_dropped;
+	stats->rx_frame_errors = tun_stats.rx_frame_errors;
+
+	stats->tx_packets = hw_stats[5] + hw_stats[6] + hw_stats[7];
+	stats->tx_bytes = hw_stats[4];
+	stats->tx_errors = hw_stats[18] + tun_stats.tx_fifo_errors;
+	stats->tx_dropped = hw_stats[17] + tun_stats.tx_dropped;
+
+	kfree(hw_stats);
+
+err_out:
+	return stats;
+}
+
 static const struct net_device_ops tun_netdev_ops = {
 	.ndo_uninit		= tun_net_uninit,
 	.ndo_open		= tun_net_open,
@@ -501,6 +548,7 @@ static const struct net_device_ops tun_netdev_ops = {
 #ifdef CONFIG_NET_POLL_CONTROLLER
 	.ndo_poll_controller	= tun_poll_controller,
 #endif
+	.ndo_get_stats64        = tun_net_get_stats64,
 };
 
 static const struct net_device_ops tap_netdev_ops = {
@@ -516,6 +564,7 @@ static const struct net_device_ops tap_netdev_ops = {
 #ifdef CONFIG_NET_POLL_CONTROLLER
 	.ndo_poll_controller	= tun_poll_controller,
 #endif
+	.ndo_get_stats64        = tun_net_get_stats64,
 };
 
 /* Initialize net device. */
@@ -1584,21 +1633,6 @@ static struct miscdevice tun_miscdev = {
 
 /* ethtool interface */
 
-static int tun_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
-{
-	cmd->supported		= 0;
-	cmd->advertising	= 0;
-	ethtool_cmd_speed_set(cmd, SPEED_10);
-	cmd->duplex		= DUPLEX_FULL;
-	cmd->port		= PORT_TP;
-	cmd->phy_address	= 0;
-	cmd->transceiver	= XCVR_INTERNAL;
-	cmd->autoneg		= AUTONEG_DISABLE;
-	cmd->maxtxpkt		= 0;
-	cmd->maxrxpkt		= 0;
-	return 0;
-}
-
 static void tun_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
 {
 	struct tun_struct *tun = netdev_priv(dev);
@@ -1623,7 +1657,7 @@ static u32 tun_get_msglevel(struct net_device *dev)
 	struct tun_struct *tun = netdev_priv(dev);
 	return tun->debug;
 #else
-	return -EOPNOTSUPP;
+	return 0;
 #endif
 }
 
@@ -1635,12 +1669,48 @@ static void tun_set_msglevel(struct net_device *dev, u32 value)
 #endif
 }
 
+static void tun_get_ethtool_stats(struct net_device *dev,
+				  struct ethtool_stats *stats,
+				  u64 *data)
+{
+	struct tun_struct *tun = netdev_priv(dev);
+
+	port_get_ethtool_stats(dev, stats, data);
+}
+
+static void tun_get_ethtool_stats_clear(struct net_device *dev,
+					struct ethtool_stats *stats,
+					u64 *data)
+{
+	struct tun_struct *tun = netdev_priv(dev);
+
+	port_get_ethtool_stats_clear(dev, stats, data);
+
+	spin_lock_bh(&tun->stat_lock);
+	u64_stats_update_begin(&tun->stat_sync);
+	tun->stats.rx_dropped = 0;
+	tun->stats.rx_frame_errors = 0;
+	tun->stats.tx_fifo_errors = 0;
+	tun->stats.tx_dropped = 0;
+	u64_stats_update_end(&tun->stat_sync);
+	spin_unlock_bh(&tun->stat_lock);
+	atomic_long_set(&dev->rx_dropped, 0);
+}
+
 static const struct ethtool_ops tun_ethtool_ops = {
-	.get_settings	= tun_get_settings,
-	.get_drvinfo	= tun_get_drvinfo,
-	.get_msglevel	= tun_get_msglevel,
-	.set_msglevel	= tun_set_msglevel,
-	.get_link	= ethtool_op_get_link,
+	.get_settings	         = port_get_settings,
+	.set_settings	         = port_set_settings,
+	.get_drvinfo	         = tun_get_drvinfo,
+	.get_msglevel	         = tun_get_msglevel,
+	.set_msglevel	         = tun_set_msglevel,
+	.get_link	         = ethtool_op_get_link,
+	.get_strings             = port_get_strings,
+	.get_ethtool_stats	 = tun_get_ethtool_stats,
+	.get_ethtool_stats_clear = tun_get_ethtool_stats_clear,
+	.get_sset_count		 = port_get_sset_count,
+	.set_phys_id		 = port_set_phys_id,
+	.get_module_info	 = port_get_module_info,
+	.get_module_eeprom	 = port_get_module_eeprom,
 };
 
 
diff --git a/include/linux/ethtool.h b/include/linux/ethtool.h
index 02d9a42..6d2ad9e 100644
--- a/include/linux/ethtool.h
+++ b/include/linux/ethtool.h
@@ -355,19 +355,9 @@ struct ethtool_test {
 	__u64	data[0];
 };
 
-/**
- * enum ethtool_stats_flags - flags definition of ethtool_stats
- * @ETH_STATS_FL_CLEAR: if set clear device stats after read
- */
-
-enum ethtool_stats_flags {
-	ETH_STATS_FL_CLEAR	= (1 << 0),
-};
-
 /* for dumping NIC-specific statistics */
 struct ethtool_stats {
 	__u32	cmd;		/* ETHTOOL_GSTATS */
-	__u32	flags;		/* ETH_STATS_FL_xxx */
 	__u32	n_stats;	/* number of u64's being returned */
 	__u64	data[0];
 };
@@ -957,6 +947,8 @@ struct ethtool_ops {
 	int	(*set_phys_id)(struct net_device *, enum ethtool_phys_id_state);
 	void	(*get_ethtool_stats)(struct net_device *,
 				     struct ethtool_stats *, u64 *);
+	void	(*get_ethtool_stats_clear)(struct net_device *,
+					   struct ethtool_stats *, u64 *);
 	int	(*begin)(struct net_device *);
 	void	(*complete)(struct net_device *);
 	u32	(*get_ufo)(struct net_device *);
@@ -1064,6 +1056,8 @@ struct ethtool_ops {
 #define ETHTOOL_GMODULEINFO	0x00000042 /* Get plug-in module information */
 #define ETHTOOL_GMODULEEEPROM	0x00000043 /* Get plug-in module eeprom */
 
+#define ETHTOOL_GSTATS_CLEAR	0x1000001d /* get NIC-specific statistics and clear */
+
 /* compatibility with older code */
 #define SPARC_ETH_GSET		ETHTOOL_GSET
 #define SPARC_ETH_SSET		ETHTOOL_SSET
diff --git a/net/core/ethtool.c b/net/core/ethtool.c
index a12af77..904bf1e 100644
--- a/net/core/ethtool.c
+++ b/net/core/ethtool.c
@@ -1447,7 +1447,8 @@ static int ethtool_phys_id(struct net_device *dev, void __user *useraddr)
 	return rc;
 }
 
-static int ethtool_get_stats(struct net_device *dev, void __user *useraddr)
+static int ethtool_get_stats(struct net_device *dev, void __user *useraddr,
+			     int clear)
 {
 	struct ethtool_stats stats;
 	const struct ethtool_ops *ops = dev->ethtool_ops;
@@ -1470,7 +1471,10 @@ static int ethtool_get_stats(struct net_device *dev, void __user *useraddr)
 	if (!data)
 		return -ENOMEM;
 
-	ops->get_ethtool_stats(dev, &stats, data);
+	if (clear && ops->get_ethtool_stats_clear)
+		ops->get_ethtool_stats_clear(dev, &stats, data);
+	else
+		ops->get_ethtool_stats(dev, &stats, data);
 
 	ret = -EFAULT;
 	if (copy_to_user(useraddr, &stats, sizeof(stats)))
@@ -1818,7 +1822,10 @@ int dev_ethtool(struct net *net, struct ifreq *ifr)
 		rc = ethtool_phys_id(dev, useraddr);
 		break;
 	case ETHTOOL_GSTATS:
-		rc = ethtool_get_stats(dev, useraddr);
+		rc = ethtool_get_stats(dev, useraddr, 0);
+		break;
+	case ETHTOOL_GSTATS_CLEAR:
+		rc = ethtool_get_stats(dev, useraddr, 1);
 		break;
 	case ETHTOOL_GPERMADDR:
 		rc = ethtool_get_perm_addr(dev, useraddr);
