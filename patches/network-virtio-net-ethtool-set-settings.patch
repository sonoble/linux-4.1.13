Add support for ethtool set settings in virtio-net driver.

Details in the bug:
https://tickets.cumulusnetworks.com/browse/CA-268

XXX: This is a hack and temporary arrangement. The upstream driver
does not support set settings. We have to do this to make
VM's in our sim environment work with 1G and 10G hardnodes.

More details on the ssim problem:
"In clag test where a vci node (A) has a bond with 2 slaves, one slave
connected to a 1G hard node (B), and one slave connected to another vci
node (C), node A will see different peer port speeds as reported by LACP
exchange with B and C. This mismatch causes the bond on A to never be
able to have both slaves in active state.

In normal bond test, multiple ports connect the same two nodes, so all LACP
sessions between them report consistent port speeds, and all slaves can join
the same aggregator and be active.

Also, currently automation tests only support 1 hard node. This limits
the clag tests to 10G boxes."


Open Issue: The default speed settings is being changed by one of our internal
patches. The right thing to do is to keep the default as SPEED_10 (upstream default)
and make the sim change it to 10G and 1G as required. But that is going to
break existing sim tests. So, moving that to later.

diff --git a/drivers/net/virtio_net.c b/drivers/net/virtio_net.c
index 689ce1c..9238fac 100644
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -77,6 +77,11 @@ struct virtnet_info {
 	/* fragments + linear part + virtio header */
 	struct scatterlist rx_sg[MAX_SKB_FRAGS + 2];
 	struct scatterlist tx_sg[MAX_SKB_FRAGS + 2];
+
+	/* ethtool settings */
+	__u32   speed;
+	__u8    duplex;
+	__u8    autoneg;
 };
 
 struct skb_vnet_hdr {
@@ -881,8 +886,27 @@ static void virtnet_vlan_rx_kill_vid(struct net_device *dev, u16 vid)
 static int virtnet_get_settings(struct net_device *dev,
 	struct ethtool_cmd *ecmd)
 {
-	ethtool_cmd_speed_set(ecmd, SPEED_10000);
-	ecmd->duplex = DUPLEX_FULL;
+	struct virtnet_info *vi = netdev_priv(dev);
+
+	ethtool_cmd_speed_set(ecmd, vi->speed);
+	ecmd->duplex = vi->duplex;
+	ecmd->autoneg = vi->autoneg;
+
+	return 0;
+}
+
+static int virtnet_set_settings(struct net_device *dev,
+	struct ethtool_cmd *ecmd)
+{
+	struct virtnet_info *vi = netdev_priv(dev);
+	int speed = ethtool_cmd_speed(ecmd);
+
+	if (speed < SPEED_10 || speed > SPEED_10000)
+		return -EINVAL;
+
+	vi->speed = speed;
+	vi->duplex = ecmd->duplex;
+	vi->autoneg = ecmd->autoneg;
 
 	return 0;
 }
@@ -899,8 +923,19 @@ static void virtnet_get_ringparam(struct net_device *dev,
 
 }
 
+static void virtnet_init_settings(struct net_device *dev)
+{
+	struct virtnet_info *vi = netdev_priv(dev);
+
+	/* XXX: Set init speed to SPEED_10 the default virtio net speed; */
+	vi->speed = SPEED_10000;
+	vi->duplex = DUPLEX_FULL;
+	vi->autoneg = 0;
+}
+
 static const struct ethtool_ops virtnet_ethtool_ops = {
 	.get_settings = virtnet_get_settings,
+	.set_settings = virtnet_set_settings,
 	.get_link = ethtool_op_get_link,
 	.get_ringparam = virtnet_get_ringparam,
 };
@@ -1064,6 +1099,8 @@ static int virtnet_probe(struct virtio_device *vdev)
 			dev->features |= NETIF_F_HW_VLAN_FILTER;
 	}
 
+	virtnet_init_settings(dev);
+
 	err = register_netdev(dev);
 	if (err) {
 		pr_debug("virtio_net: registering device failed\n");
