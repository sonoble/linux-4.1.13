Add a new port genl command PORT_CMD_GET_CACHED_SETTINGS
for userspace to pull cached ethtool settings from kernel.

It echo's back a reponse with the required settings data.

diff --git a/include/linux/port.h b/include/linux/port.h
index fb01a28..6389048 100644
--- a/include/linux/port.h
+++ b/include/linux/port.h
@@ -47,6 +47,7 @@ enum {
 	PORT_CMD_GET_SSET_COUNT,
 	PORT_CMD_SET_CARRIER,
 	PORT_CMD_SET_PHYS_ID_STATE,
+	PORT_CMD_GET_CACHED_SETTINGS,
 	__PORT_CMD_MAX,
 };
 
diff --git a/net/core/port.c b/net/core/port.c
index b829228..0fa33bd 100644
--- a/net/core/port.c
+++ b/net/core/port.c
@@ -302,15 +302,16 @@ static int port_cache_get_settings(int ifindex, struct ethtool_cmd *cmd)
 {
 	struct port_node *port;
 	int valid = 0;
+    unsigned long flags;
 
-	rcu_read_lock();
+	spin_lock_irqsave(&port_cache_lock, flags);
 	port = __port_cache_get(ifindex);
 	if (port) {
 		valid = port->settings_valid;
 		if (valid)
 			memcpy(cmd, &port->settings, sizeof(*cmd));
 	}
-	rcu_read_unlock();
+	spin_unlock_irqrestore(&port_cache_lock, flags);
 
 	return valid ? 0 : -ENODATA;
 }
@@ -642,6 +643,25 @@ static int port_set_carrier(struct sk_buff *skb, struct genl_info *info)
 	return 0;
 }
 
+static int port_send_cached_settings(int, struct genl_info *,
+									 struct ethtool_cmd *, int);
+static int port_cache_settings_pull(struct sk_buff *skb, struct genl_info *info)
+{
+	struct nlattr **attrs = info->attrs;
+	struct ethtool_cmd cmd = { 0, };
+	int err = 0, ifindex = 0;
+
+	if (attrs[PORT_ATTR_IFINDEX])
+		ifindex = nla_get_u32(attrs[PORT_ATTR_IFINDEX]);
+
+	if (ifindex <= 0)
+		return -ENOTSUPP;
+
+	err = port_cache_get_settings(ifindex, &cmd);
+
+	return port_send_cached_settings(ifindex, info, &cmd, err);
+}
+
 static struct genl_ops port_ops[] = {
 	{
 		.cmd = PORT_CMD_REPLY,
@@ -663,6 +683,11 @@ static struct genl_ops port_ops[] = {
 		.policy = port_policy,
 		.doit = port_set_carrier,
 	},
+	{
+		.cmd = PORT_CMD_GET_CACHED_SETTINGS,
+		.policy = port_policy,
+		.doit = port_cache_settings_pull,
+	},
 };
 
 static int encode_struct(struct sk_buff *skb, int attrtype,
@@ -706,7 +731,7 @@ int port_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
 	}
 
 	err = port_cache_get_settings(dev->ifindex, cmd);
-        if (!err)
+	if (!err)
 		return 0;
 
 	err = port_send(dev, PORT_CMD_GET_SETTINGS, size, wait,
@@ -724,6 +749,7 @@ int port_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
 {
 	int size = nla_total_size(sizeof(struct ethtool_cmd));
 	int wait = 20;
+	int err = 0;
 
 	int encode(struct sk_buff *skb, void *arg1, void *arg2)
 	{
@@ -731,10 +757,14 @@ int port_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
 				     sizeof(struct ethtool_cmd), arg1);
 	}
 
-	port_cache_clear_settings(dev->ifindex);
-
-	return port_send(dev, PORT_CMD_SET_SETTINGS, size, wait,
+	err = port_send(dev, PORT_CMD_SET_SETTINGS, size, wait,
 			 encode, NULL, cmd, NULL);
+	if (err < 0)
+		return err;
+
+	port_cache_set_settings(dev->ifindex, cmd);
+
+	return err;
 }
 EXPORT_SYMBOL_GPL(port_set_settings);
 
@@ -936,6 +966,57 @@ int port_get_module_eeprom(struct net_device *dev,
 }
 EXPORT_SYMBOL_GPL(port_get_module_eeprom);
 
+static int port_send_cached_settings(int ifindex,
+                                     struct genl_info *info,
+                                     struct ethtool_cmd *cmd,
+                                     int status)
+{
+	struct sk_buff *skb;
+	int err, size = 0;
+	void *hdr;
+
+	/* Uses unicast reply to requester. This function can be
+	 * generalized
+	 */
+	size += nla_total_size(sizeof(u32)) +
+			nla_total_size(sizeof(u32)) +
+			nla_total_size(sizeof(struct ethtool_cmd));
+
+	skb = genlmsg_new(size, GFP_KERNEL);
+	if (!skb)
+		return -ENOMEM;
+
+	hdr = genlmsg_put(skb, info->snd_pid, info->snd_seq, &port_family, 0,
+					  PORT_CMD_GET_CACHED_SETTINGS);
+	if (!hdr)
+		goto err_out;
+
+	NLA_PUT_U32(skb, PORT_ATTR_IFINDEX, ifindex);
+	NLA_PUT_U32(skb, PORT_ATTR_STATUS, status);
+
+	err = encode_struct(skb, PORT_ATTR_SETTINGS, sizeof(struct ethtool_cmd),
+						cmd);
+	if (err < 0) {
+nla_put_failure:
+		genlmsg_cancel(skb, hdr);
+		goto err_out;
+	}
+
+	genlmsg_end(skb, hdr);
+
+	err = genlmsg_reply(skb, info);
+	if (err < 0)
+		goto err_out_sent;
+
+	return err;
+
+err_out:
+	nlmsg_free(skb);
+
+err_out_sent:
+	return err;
+}
+
 static int __init port_init(void)
 {
 	int err;
