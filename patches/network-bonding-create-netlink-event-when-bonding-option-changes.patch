From 7faa104a7f66e35a8c9538ae8cd3a7a0ce5e5291 Mon Sep 17 00:00:00 2001
Subject: [PATCH 3/4] bonding: create netlink event when bonding option is
 changed

Userspace needs to be notified if one changes some option.

Signed-off-by: Jiri Pirko <jiri@resnulli.us>
Acked-by: Veaceslav Falico <vfalico@gmail.com>
Acked-by: Andy Gospodarek <gospo@cumulusnetworks.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d4261e5650004d6d51137553ea5433d5828562dc)

Conflicts:
	drivers/net/bonding/bond_options.c
	include/linux/netdevice.h

To prevent a deadlock (due to a nested lock) made sure all called to
call_netdevice_notifiers was outside a rw_lock critical section, this
because bond_fill_info also has a rw_lock critical section.

Signed-off-by: Jonathan Toppins <jtoppins@cumulusnetworks.com>

diff --git a/drivers/net/bonding/bond_sysfs.c b/drivers/net/bonding/bond_sysfs.c
index 6d7ea50..6103587 100644
--- a/drivers/net/bonding/bond_sysfs.c
+++ b/drivers/net/bonding/bond_sysfs.c
@@ -108,6 +108,7 @@ static ssize_t slave_store(struct kobject *kobj,
 		ret = slave_attr->store(slave, val);
 		if (ret == 0)
 			ret = count;
+		call_netdevice_notifiers(NETDEV_CHANGEINFODATA, slave->bond->dev);
 
 		rtnl_unlock();
 	}
@@ -419,11 +420,15 @@ static ssize_t bonding_store_mode(struct device *d,
 		goto out;
 	}
 
+	if (!rtnl_trylock())
+		return restart_syscall();
 	bond->params.mode = new_value;
 	bond_set_mode_ops(bond, bond->params.mode);
 	pr_info("%s: setting mode to %s (%d).\n",
 		bond->dev->name, bond_mode_tbl[new_value].modename,
 		new_value);
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
+	rtnl_unlock();
 out:
 	return ret;
 }
@@ -466,13 +471,17 @@ static ssize_t bonding_store_xmit_hash(struct device *d,
 		       (int)strlen(buf) - 1, buf);
 		ret = -EINVAL;
 		goto out;
-	} else {
-		bond->params.xmit_policy = new_value;
-		bond_set_mode_ops(bond, bond->params.mode);
-		pr_info("%s: setting xmit hash policy to %s (%d).\n",
+	}
+
+	if (!rtnl_trylock())
+		return restart_syscall();
+	bond->params.xmit_policy = new_value;
+	bond_set_mode_ops(bond, bond->params.mode);
+	pr_info("%s: setting xmit hash policy to %s (%d).\n",
 			bond->dev->name,
 			xmit_hashtype_tbl[new_value].modename, new_value);
-	}
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
+	rtnl_unlock();
 out:
 	return ret;
 }
@@ -515,7 +524,11 @@ static ssize_t bonding_store_arp_validate(struct device *d,
 		bond->dev->name, arp_validate_tbl[new_value].modename,
 		new_value);
 
+	if (!rtnl_trylock())
+		return restart_syscall();
 	bond->params.arp_validate = new_value;
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
+	rtnl_unlock();
 
 	return count;
 }
@@ -558,10 +571,14 @@ static ssize_t bonding_store_fail_over_mac(struct device *d,
 		return -EINVAL;
 	}
 
+	if (!rtnl_trylock())
+		return restart_syscall();
 	bond->params.fail_over_mac = new_value;
 	pr_info("%s: Setting fail_over_mac to %s (%d).\n",
 		bond->dev->name, fail_over_mac_tbl[new_value].modename,
 		new_value);
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
+	rtnl_unlock();
 
 	return count;
 }
@@ -639,6 +656,7 @@ static ssize_t bonding_store_arp_interval(struct device *d,
 			queue_delayed_work(bond->wq, &bond->arp_work, 0);
 		}
 	}
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
 out:
 	rtnl_unlock();
 	return ret;
@@ -675,6 +693,8 @@ static ssize_t bonding_store_arp_targets(struct device *d,
 	struct bonding *bond = to_bond(d);
 	__be32 *targets;
 
+	if (!rtnl_trylock())
+		return restart_syscall();
 	targets = bond->params.arp_targets;
 	newtarget = in_aton(buf + 1);
 	/* look for adds */
@@ -739,8 +759,10 @@ static ssize_t bonding_store_arp_targets(struct device *d,
 		ret = -EPERM;
 		goto out;
 	}
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
 
 out:
+	rtnl_unlock();
 	return ret;
 }
 static DEVICE_ATTR(arp_ip_target, S_IRUGO | S_IWUSR , bonding_show_arp_targets, bonding_store_arp_targets);
@@ -799,6 +821,7 @@ static ssize_t bonding_store_downdelay(struct device *d,
 			bond->params.downdelay * bond->params.miimon);
 
 	}
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
 
 out:
 	rtnl_unlock();
@@ -857,6 +880,7 @@ static ssize_t bonding_store_updelay(struct device *d,
 			bond->dev->name,
 			bond->params.updelay * bond->params.miimon);
 	}
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
 
 out:
 	rtnl_unlock();
@@ -904,11 +928,15 @@ static ssize_t bonding_store_lacp(struct device *d,
 	new_value = bond_parse_parm(buf, bond_lacp_tbl);
 
 	if ((new_value == 1) || (new_value == 0)) {
+		if (!rtnl_trylock())
+			return restart_syscall();
 		bond->params.lacp_fast = new_value;
 		bond_3ad_update_lacp_rate(bond);
 		pr_info("%s: Setting LACP rate to %s (%d).\n",
 			bond->dev->name, bond_lacp_tbl[new_value].modename,
 			new_value);
+		call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
+		rtnl_unlock();
 	} else {
 		pr_err("%s: Ignoring invalid LACP rate value %.*s.\n",
 		       bond->dev->name, (int)strlen(buf) - 1, buf);
@@ -944,9 +972,13 @@ static ssize_t bonding_store_min_links(struct device *d,
 		return ret;
 	}
 
+	if (!rtnl_trylock())
+		return restart_syscall();
 	pr_info("%s: Setting min links value to %u\n",
 		bond->dev->name, new_value);
 	bond->params.min_links = new_value;
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
+	rtnl_unlock();
 	return count;
 }
 static DEVICE_ATTR(min_links, S_IRUGO | S_IWUSR,
@@ -976,9 +1008,13 @@ static ssize_t bonding_store_lacp_fallback_allow(struct device *d,
                 return ret;
 	}
 
+	if (!rtnl_trylock())
+		return restart_syscall();
 	pr_debug("%s: Setting lacp_fallback_allow to %u\n",
                  bond->dev->name, new_value);
 	bond->params.lacp_fallback_allow = new_value;
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
+	rtnl_unlock();
 	return count;
 }
 static DEVICE_ATTR(lacp_fallback_allow, S_IRUGO | S_IWUSR,
@@ -1008,9 +1044,13 @@ static ssize_t bonding_store_lacp_fallback_period(struct device *d,
 		return ret;
 	}
 
+	if (!rtnl_trylock())
+		return restart_syscall();
 	pr_debug("%s: Setting lacp_fallback period to %u\n",
 		 bond->dev->name, new_value);
 	bond->params.lacp_fallback_period = new_value;
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
+	rtnl_unlock();
 	return count;
 }
 static DEVICE_ATTR(lacp_fallback_period, S_IRUGO | S_IWUSR,
@@ -1041,9 +1081,13 @@ static ssize_t bonding_store_lacp_fallback_active(struct device *d,
 		return ret;
 	}
 
+	if (!rtnl_trylock())
+		return restart_syscall();
 	pr_debug("%s: Setting lacp_fallback active to %u\n",
 		 bond->dev->name, new_value);
 	bond->params.lacp_fallback_active = new_value;
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
+	rtnl_unlock();
 	return count;
 }
 static DEVICE_ATTR(lacp_fallback_active, S_IRUGO | S_IWUSR,
@@ -1079,10 +1123,14 @@ static ssize_t bonding_store_ad_select(struct device *d,
 	new_value = bond_parse_parm(buf, ad_select_tbl);
 
 	if (new_value != -1) {
+		if (!rtnl_trylock())
+			return restart_syscall();
 		bond->params.ad_select = new_value;
 		pr_info("%s: Setting ad_select to %s (%d).\n",
 			bond->dev->name, ad_select_tbl[new_value].modename,
 			new_value);
+		call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
+		rtnl_unlock();
 	} else {
 		pr_err("%s: Ignoring invalid ad_select value %.*s.\n",
 		       bond->dev->name, (int)strlen(buf) - 1, buf);
@@ -1110,8 +1158,19 @@ static ssize_t bonding_store_num_peer_notif(struct device *d,
 					    const char *buf, size_t count)
 {
 	struct bonding *bond = to_bond(d);
-	int err = kstrtou8(buf, 10, &bond->params.num_peer_notif);
-	return err ? err : count;
+	int err;
+
+	if (!rtnl_trylock())
+		return restart_syscall();
+
+	err = kstrtou8(buf, 10, &bond->params.num_peer_notif);
+	if (err)
+		goto out;
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
+	err = count;
+out:
+	rtnl_unlock();
+	return err;
 }
 static DEVICE_ATTR(num_grat_arp, S_IRUGO | S_IWUSR,
 		   bonding_show_num_peer_notif, bonding_store_num_peer_notif);
@@ -1185,6 +1244,7 @@ static ssize_t bonding_store_miimon(struct device *d,
 			queue_delayed_work(bond->wq, &bond->mii_work, 0);
 		}
 	}
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
 out:
 	rtnl_unlock();
 	return ret;
@@ -1261,6 +1321,7 @@ out:
 	write_unlock_bh(&bond->curr_slave_lock);
 	read_unlock(&bond->lock);
 	unblock_netpoll_tx();
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
 	rtnl_unlock();
 
 	return count;
@@ -1313,6 +1374,7 @@ static ssize_t bonding_store_primary_reselect(struct device *d,
 	write_unlock_bh(&bond->curr_slave_lock);
 	read_unlock(&bond->lock);
 	unblock_netpoll_tx();
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
 out:
 	rtnl_unlock();
 	return ret;
@@ -1348,9 +1410,13 @@ static ssize_t bonding_store_carrier(struct device *d,
 		goto out;
 	}
 	if ((new_value == 0) || (new_value == 1)) {
+		if (!rtnl_trylock())
+			return restart_syscall();
 		bond->params.use_carrier = new_value;
 		pr_info("%s: Setting use_carrier to %d.\n",
 			bond->dev->name, new_value);
+		call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
+		rtnl_unlock();
 	} else {
 		pr_info("%s: Ignoring invalid use_carrier value %d.\n",
 			bond->dev->name, new_value);
@@ -1460,7 +1526,7 @@ static ssize_t bonding_store_active_slave(struct device *d,
 	write_unlock_bh(&bond->curr_slave_lock);
 	read_unlock(&bond->lock);
 	unblock_netpoll_tx();
-
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
 	rtnl_unlock();
 
 	return count;
@@ -1684,6 +1750,7 @@ static ssize_t bonding_store_ad_sys_priority(struct device *d,
 		bond->dev->name, new_value);
 	bond->params.sys_priority = new_value;
 	bond_3ad_update_sys_priority(bond);
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
 
 out_unlock:
 	rtnl_unlock();
@@ -1739,6 +1806,7 @@ static ssize_t bonding_store_ad_sys_mac_addr(struct device *d,
 		bond->dev->name, new_mac);
 	memcpy(&(bond->params.sys_mac_addr), new_mac, ETH_ALEN);
 	bond_3ad_update_sys_mac_addr(bond);
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
 
 out_unlock:
 	rtnl_unlock();
@@ -1845,8 +1913,8 @@ static ssize_t bonding_store_queue_id(struct device *d,
 
 	/* Actually set the qids for the slave */
 	update_slave->queue_id = qid;
-
 	read_unlock(&bond->lock);
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
 out:
 	rtnl_unlock();
 	return ret;
@@ -1884,6 +1952,9 @@ static ssize_t bonding_store_slaves_active(struct device *d,
 	struct bonding *bond = to_bond(d);
 	struct slave *slave;
 
+	if (!rtnl_trylock())
+		return restart_syscall();
+
 	if (sscanf(buf, "%d", &new_value) != 1) {
 		pr_err("%s: no all_slaves_active value specified.\n",
 		       bond->dev->name);
@@ -1913,7 +1984,9 @@ static ssize_t bonding_store_slaves_active(struct device *d,
 		}
 	}
 	read_unlock(&bond->lock);
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
 out:
+	rtnl_unlock();
 	return ret;
 }
 static DEVICE_ATTR(all_slaves_active, S_IRUGO | S_IWUSR,
@@ -1952,9 +2025,13 @@ static ssize_t bonding_store_resend_igmp(struct device *d,
 		goto out;
 	}
 
+	if (!rtnl_trylock())
+		return restart_syscall();
 	pr_info("%s: Setting resend_igmp to %d.\n",
 		bond->dev->name, new_value);
 	bond->params.resend_igmp = new_value;
+	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
+	rtnl_unlock();
 out:
 	return ret;
 }
diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index ec21a37..7e9cae6 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -1641,6 +1641,7 @@ struct pcpu_sw_netstats {
 #define NETDEV_CHANGEUPPER      0x0015
 #define NETDEV_RESEND_IGMP      0x0016
 #define NETDEV_PRECHANGEMTU     0x0017 /* notify before mtu change happened */
+#define NETDEV_CHANGEINFODATA	0x0018
 
 extern int register_netdevice_notifier(struct notifier_block *nb);
 extern int unregister_netdevice_notifier(struct notifier_block *nb);
