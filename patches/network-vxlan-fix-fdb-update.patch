VXLAN driver should enforce the fdb state correctly when deciding
to add or update an existing fdb.  Static fdb should not be replaced
by dynamic fdb.

diff --git a/drivers/net/vxlan.c b/drivers/net/vxlan.c
index 1c55aec..fc1b0d9 100644
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@ -265,6 +265,13 @@ static struct vxlan_fdb *vxlan_find_mac(struct vxlan_dev *vxlan,
 	return NULL;
 }
 
+/* Replace destination of unicast mac */
+static int vxlan_fdb_replace(struct vxlan_fdb *f, __be32 ip)
+{
+	f->remote_ip = ip;
+	return 1;
+}
+
 /* Add new entry to forwarding table -- assumes lock held */
 static int vxlan_fdb_create(struct vxlan_dev *vxlan,
 			    const u8 *mac, __be32 ip,
@@ -281,10 +288,26 @@ static int vxlan_fdb_create(struct vxlan_dev *vxlan,
 			return -EEXIST;
 		}
 		if (f->state != state) {
+			if ((f->state & NUD_PERMANENT) &&
+			    !(state & NUD_PERMANENT))
+				return -EINVAL;
+
 			f->state = state;
 			f->updated = jiffies;
 			notify = 1;
 		}
+		if ((flags & NLM_F_REPLACE)) {
+			/* Only change unicasts */
+			if (!(is_multicast_ether_addr(f->eth_addr) ||
+			   is_zero_ether_addr(f->eth_addr))) {
+				int rc = vxlan_fdb_replace(f, ip);
+
+				if (rc < 0)
+					return rc;
+				notify |= rc;
+			} else
+				return -EOPNOTSUPP;
+		}
 	} else {
 		if (!(flags & NLM_F_CREATE))
 			return -ENOENT;
