diff -rupN a/arch/powerpc/boot/dts/powerpc-quanta-lb9-r0.dts b/arch/powerpc/boot/dts/powerpc-quanta-lb9-r0.dts
--- a/arch/powerpc/boot/dts/powerpc-quanta-lb9-r0.dts	1969-12-31 16:00:00.000000000 -0800
+++ b/arch/powerpc/boot/dts/powerpc-quanta-lb9-r0.dts	2015-06-02 12:53:56.475579023 -0700
@@ -0,0 +1,509 @@
+/*
+ * <bsn.cl fy=2013 v=gpl>
+ * 
+ *        Copyright 2013, 2014 BigSwitch Networks, Inc.        
+ * 
+ * This program is free software; you can redistribute it
+ * and/or modify it under  the terms ofthe GNU General Public License as
+ * published by the Free Software Foundation;  either version 2 of the  License,
+ * or (at your option) any later version.
+ * 
+ * 
+ * </bsn.cl>
+ *
+ *
+ * Device tree for the Quanta LB9
+ *
+ */
+
+
+/dts-v1/;
+
+/ {
+	model = "powerpc-quanta-lb9-r0";
+	compatible = "quanta,lb9";
+	reset-gpio = <&cpm_pio_a 24 1>;
+	#address-cells = <1>;
+	#size-cells = <1>;
+
+	aliases {
+		ethernet0 = &enet0;
+		serial0 = &serial0;
+		pci0 = &pci0;
+	};
+
+	cpus {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		PowerPC,8541@0 {
+			device_type = "cpu";
+			reg = <0x0>;
+			d-cache-line-size = <32>;	// 32 bytes
+			i-cache-line-size = <32>;	// 32 bytes
+			d-cache-size = <0x8000>;	// L1, 32K
+			i-cache-size = <0x8000>;	// L1, 32K
+			timebase-frequency = <0>;	// 33 MHz
+			bus-frequency = <0>;	// 166 MHz
+			clock-frequency = <0>;	// 825 MHz
+			next-level-cache = <&L2>;
+		};
+	};
+
+	memory {
+		device_type = "memory";
+		reg = <0x0 0x20000000>;	// 512M at 0x0
+	};
+
+	soc8541@e0000000 {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		device_type = "soc";
+		compatible = "simple-bus";
+		ranges = <0x0 0xe0000000 0x100000>;
+		reg = <0xe0000000 0x1000>;	// CCSRBAR 1M
+		bus-frequency = <0>;
+
+		ecm-law@0 {
+			compatible = "fsl,ecm-law";
+			reg = <0x0 0x1000>;
+			fsl,num-laws = <8>;
+		};
+
+		ecm@1000 {
+			compatible = "fsl,mpc8541-ecm", "fsl,ecm";
+			reg = <0x1000 0x1000>;
+			interrupts = <17 2>;
+			interrupt-parent = <&mpic>;
+		};
+
+		memory-controller@2000 {
+			compatible = "fsl,8541-memory-controller";
+			reg = <0x2000 0x1000>;
+			interrupt-parent = <&mpic>;
+			interrupts = <18 2>;
+		};
+
+		L2: l2-cache-controller@20000 {
+			compatible = "fsl,8541-l2-cache-controller";
+			reg = <0x20000 0x1000>;
+			cache-line-size = <32>;	// 32 bytes
+			cache-size = <0x40000>;	// L2, 256K
+			interrupt-parent = <&mpic>;
+			interrupts = <16 2>;
+		};
+
+		i2c@3000 {
+			#address-cells = <1>;
+			#size-cells = <0>;
+			cell-index = <0>;
+			compatible = "fsl-i2c";
+			reg = <0x3000 0x100>;
+			interrupts = <43 2>;
+			interrupt-parent = <&mpic>;
+			dfsrr;
+
+			gpio-phy@20 {
+				compatible = "nxp,pca9555";
+				reg = <0x20>;
+				#gpio-cells = <2>;
+				gpio-controller;
+			};
+
+			gpio-psu-1@24 {
+				compatible = "nxp,pca9555";
+				reg = <0x24>;
+				#gpio-cells = <2>;
+				gpio-controller;
+			};
+
+			gpio-psu-2@25 {
+				compatible = "nxp,pca9555";
+				reg = <0x25>;
+				#gpio-cells = <2>;
+				gpio-controller;
+			};
+
+			eeprom-mb@53 {
+				compatible = "at,24c02";
+				reg = <0x53>;
+				read-only;
+			};
+
+			dimm@57 {
+				compatible = "at,spd";
+				reg = <0x57>;
+				read-only;
+			};
+
+			rtc@68 {
+				compatible = "dallas,ds1338";
+				reg = <0x68>;
+			};
+
+			mux@70 {
+				compatible = "nxp,pca9548";
+				reg = <0x70>;
+				#address-cells = <1>;
+				#size-cells = <0>;
+
+				i2c@0 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <0>;
+
+					eeprom-sfp-1@50 {
+						compatible = "at,24c02";
+						reg = <0x50>;
+						read-only;
+					};
+					eeprom-sfp-1@51 {
+						compatible = "at,24c02";
+						reg = <0x51>;
+						read-only;
+					};
+				};
+
+				i2c@1 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <1>;
+
+					eeprom-sfp-2@50 {
+						compatible = "at,24c02";
+						reg = <0x50>;
+						read-only;
+					};
+					eeprom-sfp-2@51 {
+						compatible = "at,24c02";
+						reg = <0x51>;
+						read-only;
+					};
+				};
+
+				i2c@2 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <2>;
+
+					eeprom-sfp-3@50 {
+						compatible = "at,24c02";
+						reg = <0x50>;
+						read-only;
+					};
+					eeprom-sfp-3@51 {
+						compatible = "at,24c02";
+						reg = <0x51>;
+						read-only;
+					};
+				};
+
+				i2c@3 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <3>;
+
+					eeprom-sfp-4@50 {
+						compatible = "at,24c02";
+						reg = <0x50>;
+						read-only;
+					};
+					eeprom-sfp-4@51 {
+						compatible = "at,24c02";
+						reg = <0x51>;
+						read-only;
+					};
+				};
+
+				i2c@4 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <4>;
+
+					temp-fan-1@2c {
+						compatible = "adi,adt7470";
+						reg = <0x2c>;
+					};
+				};
+
+				i2c@5 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <5>;
+
+					temp-fan-2@2f {
+						compatible = "adi,adt7470";
+						reg = <0x2f>;
+					};
+				};
+
+				i2c@6 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <6>;
+
+					psu-1@58 {
+						compatible = "pmbus";
+						reg = <0x58>;
+					};
+				};
+
+				i2c@7 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <7>;
+
+					psu-2@59 {
+						compatible = "pmbus";
+						reg = <0x59>;
+					};
+				};
+			};
+		};
+
+		dma@21300 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			compatible = "fsl,mpc8541-dma", "fsl,eloplus-dma";
+			reg = <0x21300 0x4>;
+			ranges = <0x0 0x21100 0x200>;
+			cell-index = <0>;
+			dma-channel@0 {
+				compatible = "fsl,mpc8541-dma-channel",
+						"fsl,eloplus-dma-channel";
+				reg = <0x0 0x80>;
+				cell-index = <0>;
+				interrupt-parent = <&mpic>;
+				interrupts = <20 2>;
+			};
+			dma-channel@80 {
+				compatible = "fsl,mpc8541-dma-channel",
+						"fsl,eloplus-dma-channel";
+				reg = <0x80 0x80>;
+				cell-index = <1>;
+				interrupt-parent = <&mpic>;
+				interrupts = <21 2>;
+			};
+			dma-channel@100 {
+				compatible = "fsl,mpc8541-dma-channel",
+						"fsl,eloplus-dma-channel";
+				reg = <0x100 0x80>;
+				cell-index = <2>;
+				interrupt-parent = <&mpic>;
+				interrupts = <22 2>;
+			};
+			dma-channel@180 {
+				compatible = "fsl,mpc8541-dma-channel",
+						"fsl,eloplus-dma-channel";
+				reg = <0x180 0x80>;
+				cell-index = <3>;
+				interrupt-parent = <&mpic>;
+				interrupts = <23 2>;
+			};
+		};
+
+		enet0: ethernet@24000 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			cell-index = <0>;
+			device_type = "network";
+			model = "TSEC";
+			compatible = "gianfar";
+			reg = <0x24000 0x1000>;
+			ranges = <0x0 0x24000 0x1000>;
+			local-mac-address = [ 00 00 00 00 00 00 ];
+			interrupts = <29 2 30 2 34 2>;
+			interrupt-parent = <&mpic>;
+			phy-handle = <&phy0>;
+
+			mdio@520 {
+				#address-cells = <1>;
+				#size-cells = <0>;
+				compatible = "fsl,gianfar-mdio";
+				reg = <0x520 0x20>;
+
+				phy0: ethernet-phy@0 {
+					interrupt-parent = <&mpic>;
+					reg = <0x0>;
+					device_type = "ethernet-phy";
+				};
+			};
+		};
+
+		serial0: serial@4500 {
+			cell-index = <0>;
+			device_type = "serial";
+			compatible = "fsl,ns16550", "ns16550";
+			reg = <0x4500 0x100>; 	// reg base, size
+			clock-frequency = <0>;
+			interrupts = <42 2>;
+			interrupt-parent = <&mpic>;
+		};
+
+		mpic: pic@40000 {
+			interrupt-controller;
+			#address-cells = <0>;
+			#interrupt-cells = <2>;
+			reg = <0x40000 0x40000>;
+			compatible = "chrp,open-pic";
+			device_type = "open-pic";
+		};
+
+		cpm@919c0 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			compatible = "fsl,mpc8541-cpm", "fsl,cpm2";
+			reg = <0x919c0 0x30>;
+			ranges;
+
+			muram@80000 {
+				#address-cells = <1>;
+				#size-cells = <1>;
+				ranges = <0x0 0x80000 0x10000>;
+
+				data@0 {
+					compatible = "fsl,cpm-muram-data";
+					reg = <0x0 0x2000 0x9000 0x1000>;
+				};
+			};
+
+			brg@919f0 {
+				compatible = "fsl,mpc8541-brg",
+						"fsl,cpm2-brg",
+						"fsl,cpm-brg";
+				reg = <0x919f0 0x10 0x915f0 0x10>;
+			};
+
+			cpmpic: pic@90c00 {
+				interrupt-controller;
+				#address-cells = <0>;
+				#interrupt-cells = <2>;
+				interrupts = <46 2>;
+				interrupt-parent = <&mpic>;
+				reg = <0x90c00 0x80>;
+				compatible = "fsl,mpc8541-cpm-pic", "fsl,cpm2-pic";
+			};
+		};
+
+		cpm_pio_a: gpio-controller@90d00 {
+			#gpio-cells = <2>;
+			compatible = "fsl,cpm2-pario-bank";
+			reg = <0x90d00 0x14>;
+			gpio-controller;
+		};
+
+		cpm_pio_b: gpio-controller@90d20 {
+			#gpio-cells = <2>;
+			compatible = "fsl,cpm2-pario-bank";
+			reg = <0x90d20 0x14>;
+			gpio-controller;
+		};
+
+		cpm_pio_c: gpio-controller@90d40 {
+			#gpio-cells = <2>;
+			compatible = "fsl,cpm2-pario-bank";
+			reg = <0x90d40 0x14>;
+			gpio-controller;
+		};
+
+		cpm_pio_d: gpio-controller@90d60 {
+			#gpio-cells = <2>;
+			compatible = "fsl,cpm2-pario-bank";
+			reg = <0x90d60 0x14>;
+			gpio-controller;
+		};
+	};
+
+	leds {
+		compatible = "gpio-leds";
+		system-status {
+			gpios = <&cpm_pio_a 22 1>;
+			linux,default-trigger = "default-on";
+		};
+	};
+
+	pci0: pci@e0008000 {
+		cell-index = <0>;
+		interrupt-map-mask = <0x1f800 0x0 0x0 0x7>;
+		interrupt-map = <
+
+			/* IDSEL 0x12 (Slot 1) */
+			0x9000 0x0 0x0 0x1 &mpic 0x3 0x1
+		>;
+
+		interrupt-parent = <&mpic>;
+		interrupts = <24 2>;
+		bus-range = <0 0>;
+		ranges = <0x2000000 0x0 0x80000000 0x80000000 0x0 0x20000000
+			  0x1000000 0x0 0x0 0xe2000000 0x0 0x100000>;
+		clock-frequency = <66666666>;
+		#interrupt-cells = <1>;
+		#size-cells = <2>;
+		#address-cells = <3>;
+		reg = <0xe0008000 0x1000>;
+		compatible = "fsl,mpc8540-pci";
+		device_type = "pci";
+
+	};
+
+	localbus@f0010100 {
+		#address-cells = <2>;
+		#size-cells = <1>;
+		compatible = "fsl,mpc8541-localbus",
+			     "fsl,pq2-localbus",
+			     "simple-bus";
+		reg = <0xf0010100 0x40>;
+		interrupt-parent = <&mpic>;
+		interrupts = <19 2>;
+		ranges = <0x0 0x0 0xfe000000 0x2000000
+			  0x1 0x0 0xf0000000 0x10000
+			  0x2 0x0 0xf0010000 0x10000>;
+
+		flash@0 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			compatible = "cfi-flash";
+			reg = <0x0 0x0 0x2000000>;
+			bank-width = <2>;
+			device-width = <1>;
+
+			/* partition names must be sorted alphanumerically */
+			/* otherwise kexec/Linux may reorder mtd devices */
+
+			flash-00@00000000 {
+				label = "onl-loader";
+				reg = <0x00000000 0x00800000>;
+			};
+
+			flash-01@00800000 {
+				label = "mnt-flash";
+				reg = <0x00800000 0x01360000>;
+			};
+
+			flash-02@01b60000 {
+				label = "onie";
+				reg = <0x01b60000 0x00400000>;
+				read-only;
+			};
+
+			flash-03@01f60000 {
+				label = "uboot-env";
+				reg = <0x01f60000 0x00020000>;
+			};
+
+			flash-04@01f80000 {
+				label = "uboot";
+				reg = <0x01f80000 0x00080000>;
+				read-only;
+			};
+		};
+
+		pata@3,0 {
+			compatible = "quanta-lb-ata";
+			reg = <0x1 0x0 0x10000 0x2 0x0 0x10000>;
+			#interrupt-cells = <1>;
+			interrupts = <2 2>;
+			interrupt-parent = <&mpic>;
+		};
+	};
+};
diff -rupN a/drivers/ata/Kconfig b/drivers/ata/Kconfig
--- a/drivers/ata/Kconfig	2014-12-14 08:24:02.000000000 -0800
+++ b/drivers/ata/Kconfig	2015-05-20 17:39:45.202136101 -0700
@@ -870,6 +870,13 @@ config PATA_WINBOND_VLB
 	  Support for the Winbond W83759A controller on Vesa Local Bus
 	  systems.
 
+config PATA_QUANTA_LB
+        bool "Quanta LB platform ATA support"
+        depends on PATA_PLATFORM && OF
+        help
+          This driver adds support for IDE/ATA drives on the Quanta LB
+          platform.
+
 comment "Generic fallback / legacy drivers"
 
 config PATA_ACPI
diff -rupN a/drivers/ata/Makefile b/drivers/ata/Makefile
--- a/drivers/ata/Makefile	2014-12-14 08:24:02.000000000 -0800
+++ b/drivers/ata/Makefile	2015-05-20 17:39:13.602132473 -0700
@@ -91,6 +91,7 @@ obj-$(CONFIG_PATA_OF_PLATFORM)	+= pata_o
 obj-$(CONFIG_PATA_RB532)	+= pata_rb532_cf.o
 obj-$(CONFIG_PATA_RZ1000)	+= pata_rz1000.o
 obj-$(CONFIG_PATA_SAMSUNG_CF)	+= pata_samsung_cf.o
+obj-$(CONFIG_PATA_QUANTA_LB)    += pata_quanta_lb.o
 
 obj-$(CONFIG_PATA_PXA)		+= pata_pxa.o
 
diff -rupN a/drivers/ata/pata_quanta_lb.c b/drivers/ata/pata_quanta_lb.c
--- a/drivers/ata/pata_quanta_lb.c	1969-12-31 16:00:00.000000000 -0800
+++ b/drivers/ata/pata_quanta_lb.c	2015-05-20 17:40:21.562121047 -0700
@@ -0,0 +1,177 @@
+/*
+ * <bsn.cl fy=2013 v=gpl>
+ * 
+ *        Copyright 2013, 2014 BigSwitch Networks, Inc.        
+ * 
+ * This program is free software; you can redistribute it
+ * and/or modify it under  the terms ofthe GNU General Public License as
+ * published by the Free Software Foundation;  either version 2 of the  License,
+ * or (at your option) any later version.
+ * 
+ * 
+ * </bsn.cl>
+ *
+ *
+ * Quanta LBx platform PATA driver
+ */
+#include <linux/module.h>
+#include <linux/libata.h>
+#include <linux/of_platform.h>
+
+#define DRV_NAME "quanta-lb-ata"
+
+static unsigned int
+quanta_lb_ata_data_xfer(struct ata_device *dev, unsigned char *buf,
+		unsigned int buflen, int rw)
+{
+	unsigned long irq_flags;
+	void __iomem *data_addr = dev->link->ap->ioaddr.data_addr;
+	unsigned short *ptr = (unsigned short *) buf;
+	unsigned int count = (buflen + 1) / 2;
+
+	local_irq_save(irq_flags);
+
+	if (rw == READ) {
+		while (count--) {
+			*ptr++ = cpu_to_le16(__raw_readw(data_addr));
+		}
+	}
+	else {
+		while (count--) {
+			__raw_writew(le16_to_cpu(*ptr), data_addr);
+			ptr++;
+		}
+	}
+
+	local_irq_restore(irq_flags);
+
+	return buflen;
+}
+
+static int
+quanta_lb_ata_set_mode(struct ata_link *link, struct ata_device **unused)
+{
+	struct ata_device *dev;
+
+	ata_for_each_dev(dev, link, ENABLED) {
+		/* We don't really care */
+		dev->pio_mode = dev->xfer_mode = XFER_PIO_0;
+		dev->xfer_shift = ATA_SHIFT_PIO;
+		dev->flags |= ATA_DFLAG_PIO;
+		ata_dev_info(dev, "configured for PIO\n");
+	}
+	return 0;
+}
+
+static struct scsi_host_template quanta_lb_ata_sht = {
+	ATA_PIO_SHT(DRV_NAME),
+};
+
+static struct ata_port_operations quanta_lb_ata_port_ops = {
+	.inherits		= &ata_sff_port_ops,
+	.sff_data_xfer		= quanta_lb_ata_data_xfer,
+	.cable_detect		= ata_cable_unknown,
+	.set_mode		= quanta_lb_ata_set_mode,
+};
+
+static int
+quanta_lb_ata_probe(struct platform_device *op)
+{
+	int rv;
+	struct resource io_res, ctl_res, *irq_res;
+	int irq = 0;
+	void __iomem *io_mem, *ctl_mem;
+	struct ata_host *host;
+	struct ata_port *ap;
+
+	rv = of_address_to_resource(op->dev.of_node, 0, &io_res);
+	if (rv) {
+		dev_err(&op->dev, "could not determine io base\n");
+		return rv;
+	}
+	io_mem = devm_ioremap(&op->dev, io_res.start, resource_size(&io_res));
+	if (!io_mem) {
+		dev_err(&op->dev, "could not map io base\n");
+		return -ENOMEM;
+	}
+
+	rv = of_address_to_resource(op->dev.of_node, 1, &ctl_res);
+	if (rv) {
+		dev_err(&op->dev, "could not determine ctl base\n");
+		return rv;
+	}
+	ctl_mem = devm_ioremap(&op->dev, ctl_res.start, resource_size(&ctl_res));
+	if (!ctl_mem) {
+		dev_err(&op->dev, "could not map ctl base\n");
+		return -ENOMEM;
+	}
+
+	irq_res = platform_get_resource(op, IORESOURCE_IRQ, 0);
+	if (irq_res)
+		irq = irq_res->start;
+
+	host = ata_host_alloc(&op->dev, 1);
+	if (!host)
+		return -ENOMEM;
+	ap = host->ports[0];
+
+	ap->ops = &quanta_lb_ata_port_ops;
+	ap->pio_mask = ATA_PIO6;
+	ap->flags |= ATA_FLAG_SLAVE_POSS;
+
+	if (!irq) {
+		ap->flags |= ATA_FLAG_PIO_POLLING;
+		ata_port_desc(ap, "no IRQ, using PIO polling");
+	}
+
+	ap->ioaddr.cmd_addr = io_mem;
+	ap->ioaddr.data_addr = io_mem + 0x02;
+	ap->ioaddr.error_addr = io_mem + 0x07;
+	ap->ioaddr.feature_addr = io_mem + 0x07;
+	ap->ioaddr.nsect_addr = io_mem + 0x0b;
+	ap->ioaddr.lbal_addr = io_mem + 0x0f;
+	ap->ioaddr.lbam_addr = io_mem + 0x13;
+	ap->ioaddr.lbah_addr = io_mem + 0x17;
+	ap->ioaddr.device_addr = io_mem + 0x1b;
+	ap->ioaddr.status_addr = io_mem + 0x1f;
+	ap->ioaddr.command_addr = io_mem + 0x1f;
+	ap->ioaddr.altstatus_addr = ctl_mem + 0x1b;
+	ap->ioaddr.ctl_addr = ctl_mem + 0x1b;
+
+	ata_port_desc(ap, "mmio cmd 0x%llx ctl 0x%llx",
+		      (unsigned long long) io_res.start,
+		      (unsigned long long) ctl_res.start);
+
+	return ata_host_activate(host, irq, irq ? ata_sff_interrupt : NULL,
+				 0, &quanta_lb_ata_sht);
+}
+
+static int __exit
+quanta_lb_ata_remove(struct platform_device *op)
+{
+	struct ata_host *host = dev_get_drvdata(&op->dev);
+	ata_host_detach(host);
+	return 0;
+}
+
+static struct of_device_id quanta_lb_ata_of_match[] = {
+	{ .compatible = "quanta-lb-ata", },
+	{},
+};
+
+static struct platform_driver quanta_lb_ata_of_platform_driver = {
+	.probe		= quanta_lb_ata_probe,
+	.remove		= __exit_p(quanta_lb_ata_remove),
+	.driver		= {
+		.name	= DRV_NAME,
+		.owner	= THIS_MODULE,
+		.of_match_table = quanta_lb_ata_of_match,
+	},
+};
+
+module_platform_driver(quanta_lb_ata_of_platform_driver);
+
+MODULE_AUTHOR("Big Switch Networks <support@bigswitch.com>");
+MODULE_DESCRIPTION("Quanta LBx platform PATA driver");
+MODULE_LICENSE("GPL");
+MODULE_DEVICE_TABLE(of, quanta_lb_ata_of_match);
