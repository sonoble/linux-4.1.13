temp

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index adc6269..078c36c 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -350,6 +350,8 @@ static void tun_net_uninit(struct net_device *dev)
 	struct tun_struct *tun = netdev_priv(dev);
 	struct tun_file *tfile = tun->tfile;
 
+	port_uninit_ethtool_stats(dev);
+
 	/* Inform the methods they need to stop using the dev.
 	 */
 	if (tfile) {
@@ -473,6 +475,8 @@ static u32 tun_net_fix_features(struct net_device *dev, u32 features)
 {
 	struct tun_struct *tun = netdev_priv(dev);
 
+	port_init_ethtool_stats(dev);
+
 	return (features & tun->set_features) | (features & ~TUN_USER_FEATURES);
 }
 #ifdef CONFIG_NET_POLL_CONTROLLER
diff --git a/drivers/net/vxlan.c b/drivers/net/vxlan.c
index d4ce65e..0b7c26f 100644
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@ -38,6 +38,7 @@
 #include <net/inet_ecn.h>
 #include <net/net_namespace.h>
 #include <net/netns/generic.h>
+#include <linux/port.h>
 
 #define VXLAN_VERSION	"0.1"
 
@@ -963,6 +964,11 @@ static int vxlan_init(struct net_device *dev)
 	return 0;
 }
 
+static int vxlan_uninit(struct net_device *dev)
+{
+	port_uninit_ethtool_stats(dev);
+}
+
 /* Start ageing timer and join group when device is brought up */
 static int vxlan_open(struct net_device *dev)
 {
@@ -1013,6 +1019,26 @@ static int vxlan_stop(struct net_device *dev)
 	return 0;
 }
 
+static void vxlan_dev_get_hw_stats64(struct net_device *dev,
+	struct rtnl_link_stats64 *stats, int count)
+{
+	u64 *hw_stats;
+	struct ethtool_stats estats = { 0, };
+
+	hw_stats = kmalloc(count * sizeof(u64), GFP_ATOMIC);
+	if (!hw_stats)
+		return;
+
+	estats.n_stats = count;
+	port_get_ethtool_stats(dev, &estats, hw_stats);
+
+	stats->rx_bytes = hw_stats[0];
+	stats->rx_packets = hw_stats[1];
+	stats->tx_bytes = hw_stats[2];
+	stats->tx_packets = hw_stats[3];
+	kfree(hw_stats);
+}
+
 /* Merge per-cpu statistics */
 static struct rtnl_link_stats64 *vxlan_stats64(struct net_device *dev,
 					       struct rtnl_link_stats64 *stats)
@@ -1020,6 +1046,11 @@ static struct rtnl_link_stats64 *vxlan_stats64(struct net_device *dev,
 	struct vxlan_dev *vxlan = netdev_priv(dev);
 	struct vxlan_stats tmp, sum = { 0 };
 	unsigned int cpu;
+	int count;
+
+	count = port_get_sset_count(dev, ETH_SS_STATS);
+	if (count > 0)
+		vxlan_dev_get_hw_stats64(dev, stats, count);
 
 	for_each_possible_cpu(cpu) {
 		unsigned int start;
@@ -1033,14 +1064,10 @@ static struct rtnl_link_stats64 *vxlan_stats64(struct net_device *dev,
 
 		sum.tx_bytes   += tmp.tx_bytes;
 		sum.tx_packets += tmp.tx_packets;
-		sum.rx_bytes   += tmp.rx_bytes;
-		sum.rx_packets += tmp.rx_packets;
 	}
 
-	stats->tx_bytes   = sum.tx_bytes;
-	stats->tx_packets = sum.tx_packets;
-	stats->rx_bytes   = sum.rx_bytes;
-	stats->rx_packets = sum.rx_packets;
+	stats->tx_bytes   += sum.tx_bytes;
+	stats->tx_packets += sum.tx_packets;
 
 	stats->multicast = dev->stats.multicast;
 	stats->rx_length_errors = dev->stats.rx_length_errors;
@@ -1063,6 +1090,7 @@ static void vxlan_set_multicast_list(struct net_device *dev)
 
 static const struct net_device_ops vxlan_netdev_ops = {
 	.ndo_init		= vxlan_init,
+	.ndo_uninit		= vxlan_uninit,
 	.ndo_open		= vxlan_open,
 	.ndo_stop		= vxlan_stop,
 	.ndo_start_xmit		= vxlan_xmit,
@@ -1267,8 +1295,10 @@ static int vxlan_newlink(struct net *net, struct net_device *dev,
 		vxlan->repl_type = VXLAN_REPLICATION_NONE;
 
 	err = register_netdevice(dev);
-	if (!err)
+	if (!err) {
 		hlist_add_head_rcu(&vxlan->hlist, vni_head(net, vxlan->vni));
+		port_init_ethtool_stats(dev);
+	}
 
 	return err;
 }
diff --git a/include/linux/port.h b/include/linux/port.h
index 4e1c783..fb01a28 100644
--- a/include/linux/port.h
+++ b/include/linux/port.h
@@ -54,6 +54,8 @@ enum {
 
 #define PORT_ATTR_FLAG_STAT_RESTART (1 << 0)
 
+void port_init_ethtool_stats(struct net_device *dev);
+void port_uninit_ethtool_stats(struct net_device *dev);
 int port_get_settings(struct net_device *dev, struct ethtool_cmd *cmd);
 int port_set_settings(struct net_device *dev, struct ethtool_cmd *cmd);
 void port_get_pauseparam(struct net_device *dev,
diff --git a/net/8021q/vlan_dev.c b/net/8021q/vlan_dev.c
index 8bb4aa3..91c9248 100644
--- a/net/8021q/vlan_dev.c
+++ b/net/8021q/vlan_dev.c
@@ -34,6 +34,7 @@
 #include "vlanproc.h"
 #include <linux/if_vlan.h>
 #include <linux/netpoll.h>
+#include <linux/port.h>
 
 /*
  *	Rebuild the Ethernet MAC header. This is called after an ARP
@@ -632,6 +633,8 @@ static void vlan_dev_uninit(struct net_device *dev)
 	struct vlan_dev_priv *vlan = vlan_dev_priv(dev);
 	int i;
 
+	port_uninit_ethtool_stats(dev);
+
 	free_percpu(vlan->vlan_pcpu_stats);
 	vlan->vlan_pcpu_stats = NULL;
 	for (i = 0; i < ARRAY_SIZE(vlan->egress_priority_map); i++) {
@@ -648,6 +651,8 @@ static netdev_features_t vlan_dev_fix_features(struct net_device *dev,
 	struct net_device *real_dev = vlan_dev_priv(dev)->real_dev;
 	netdev_features_t old_features = features;
 
+	port_init_ethtool_stats(dev);
+
 	features &= real_dev->vlan_features;
 	features |= NETIF_F_RXCSUM;
 	features &= real_dev->features;
@@ -674,8 +679,33 @@ static void vlan_ethtool_get_drvinfo(struct net_device *dev,
 	strlcpy(info->fw_version, "N/A", sizeof(info->fw_version));
 }
 
+static void vlan_dev_get_hw_stats64(struct net_device *dev,
+	struct rtnl_link_stats64 *stats, int count)
+{
+	u64 *hw_stats;
+	struct ethtool_stats estats = { 0, };
+
+	hw_stats = kmalloc(count * sizeof(u64), GFP_ATOMIC);
+	if (!hw_stats)
+		return;
+
+	estats.n_stats = count;
+	port_get_ethtool_stats(dev, &estats, hw_stats);
+
+	stats->rx_bytes = hw_stats[0];
+	stats->rx_packets = hw_stats[1];
+	stats->tx_bytes = hw_stats[2];
+	stats->tx_packets = hw_stats[3];
+	kfree(hw_stats);
+}
+
 static struct rtnl_link_stats64 *vlan_dev_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 {
+	int count;
+
+	count = port_get_sset_count(dev, ETH_SS_STATS);
+	if (count > 0)
+		vlan_dev_get_hw_stats64(dev, stats, count);
 
 	if (vlan_dev_priv(dev)->vlan_pcpu_stats) {
 		struct vlan_pcpu_stats *p;
@@ -683,22 +713,16 @@ static struct rtnl_link_stats64 *vlan_dev_get_stats64(struct net_device *dev, st
 		int i;
 
 		for_each_possible_cpu(i) {
-			u64 rxpackets, rxbytes, rxmulticast, txpackets, txbytes;
+			u64 txpackets, txbytes;
 			unsigned int start;
 
 			p = per_cpu_ptr(vlan_dev_priv(dev)->vlan_pcpu_stats, i);
 			do {
 				start = u64_stats_fetch_begin_bh(&p->syncp);
-				rxpackets	= p->rx_packets;
-				rxbytes		= p->rx_bytes;
-				rxmulticast	= p->rx_multicast;
 				txpackets	= p->tx_packets;
 				txbytes		= p->tx_bytes;
 			} while (u64_stats_fetch_retry_bh(&p->syncp, start));
 
-			stats->rx_packets	+= rxpackets;
-			stats->rx_bytes		+= rxbytes;
-			stats->multicast	+= rxmulticast;
 			stats->tx_packets	+= txpackets;
 			stats->tx_bytes		+= txbytes;
 			/* rx_errors & tx_dropped are u32 */
@@ -708,6 +732,7 @@ static struct rtnl_link_stats64 *vlan_dev_get_stats64(struct net_device *dev, st
 		stats->rx_errors  = rx_errors;
 		stats->tx_dropped = tx_dropped;
 	}
+
 	return stats;
 }
 
diff --git a/net/bridge/br_device.c b/net/bridge/br_device.c
index 88d6172..0f3b071 100644
--- a/net/bridge/br_device.c
+++ b/net/bridge/br_device.c
@@ -18,6 +18,7 @@
 #include <linux/ethtool.h>
 #include <linux/list.h>
 #include <linux/netfilter_bridge.h>
+#include <linux/port.h>
 
 #include <asm/uaccess.h>
 #include "br_private.h"
@@ -104,6 +105,11 @@ static int br_dev_init(struct net_device *dev)
 	return 0;
 }
 
+static void br_dev_uninit(struct net_device *dev)
+{
+	port_uninit_ethtool_stats(dev);
+}
+
 static int br_dev_open(struct net_device *dev)
 {
 	struct net_bridge *br = netdev_priv(dev);
@@ -132,12 +138,37 @@ static int br_dev_stop(struct net_device *dev)
 	return 0;
 }
 
+static void br_get_hw_stats64(struct net_device *dev,
+				struct rtnl_link_stats64 *stats, int count)
+{
+	u64 *hw_stats;
+	struct ethtool_stats estats = { 0, };
+
+	hw_stats = kmalloc(count * sizeof(u64), GFP_ATOMIC);
+	if (!hw_stats)
+		return;
+
+	estats.n_stats = count;
+	port_get_ethtool_stats(dev, &estats, hw_stats);
+
+	stats->rx_bytes = hw_stats[0];
+	stats->rx_packets = hw_stats[1];
+	stats->tx_bytes = hw_stats[2];
+	stats->tx_packets = hw_stats[3];
+	kfree(hw_stats);
+}
+
 static struct rtnl_link_stats64 *br_get_stats64(struct net_device *dev,
 						struct rtnl_link_stats64 *stats)
 {
 	struct net_bridge *br = netdev_priv(dev);
 	struct pcpu_sw_netstats tmp, sum = { 0 };
 	unsigned int cpu;
+	int count;
+
+	count = port_get_sset_count(dev, ETH_SS_STATS);
+	if (count > 0)
+		br_get_hw_stats64(dev, stats, count);
 
 	for_each_possible_cpu(cpu) {
 		unsigned int start;
@@ -153,10 +184,16 @@ static struct rtnl_link_stats64 *br_get_stats64(struct net_device *dev,
 		sum.rx_packets += tmp.rx_packets;
 	}
 
-	stats->tx_bytes   = sum.tx_bytes;
-	stats->tx_packets = sum.tx_packets;
-	stats->rx_bytes   = sum.rx_bytes;
-	stats->rx_packets = sum.rx_packets;
+	if (count > 0) {
+		/* stats has hw_stats - add in cpu originated tx traffic */
+		stats->tx_bytes   += sum.tx_bytes;
+		stats->tx_packets += sum.tx_packets;
+	} else {
+		stats->tx_bytes   = sum.tx_bytes;
+		stats->tx_packets = sum.tx_packets;
+		stats->rx_bytes   = sum.rx_bytes;
+		stats->rx_packets = sum.rx_packets;
+	}
 
 	return stats;
 }
@@ -226,6 +263,8 @@ static netdev_features_t br_fix_features(struct net_device *dev,
 {
 	struct net_bridge *br = netdev_priv(dev);
 
+	port_init_ethtool_stats(dev);
+
 	return br_features_recompute(br, features);
 }
 
@@ -330,6 +369,7 @@ static const struct net_device_ops br_netdev_ops = {
 	.ndo_open		 = br_dev_open,
 	.ndo_stop		 = br_dev_stop,
 	.ndo_init		 = br_dev_init,
+	.ndo_uninit		 = br_dev_uninit,
 	.ndo_start_xmit		 = br_dev_xmit,
 	.ndo_get_stats64	 = br_get_stats64,
 	.ndo_set_mac_address	 = br_set_mac_address,
diff --git a/net/core/port.c b/net/core/port.c
index 74f35f8..b829228 100644
--- a/net/core/port.c
+++ b/net/core/port.c
@@ -34,7 +34,6 @@ static DEFINE_SPINLOCK(port_cache_lock);
 
 struct port_node {
 	struct hlist_node hash_node;
-	spinlock_t lock;
 	int ifindex;
 	struct ethtool_cmd settings;
 	int settings_valid;
@@ -44,61 +43,103 @@ struct port_node {
 	u8 *stat_strings;
 };
 
+/* must be invoked with rcu_read_lock  or port_cache_lock */
 static inline struct port_node *__port_cache_get(int ifindex)
 {
 	struct port_node *port;
 	struct hlist_node *n;
-	unsigned long flags;
 
-	rcu_read_lock();
 	hash_for_each_possible_rcu(port_cache, port, n, hash_node, ifindex)
 		if (port->ifindex == ifindex) {
-			rcu_read_unlock();
-			/* This works because ports aren't
-			   deleted from cache */
 			return port;
 		}
-	rcu_read_unlock();
+
+	return NULL;
+}
+
+static void __port_cache_init(int ifindex)
+{
+	struct port_node *port;
+	unsigned long flags;
+
+	spin_lock_irqsave(&port_cache_lock, flags);
+	port = __port_cache_get(ifindex);
+	if (port) {
+		spin_unlock_irqrestore(&port_cache_lock, flags);
+		return;
+	}
 
 	port = kzalloc(sizeof(*port), GFP_KERNEL);
-	if (!port)
-		return NULL;
+	if (!port) {
+		spin_unlock_irqrestore(&port_cache_lock, flags);
+		return;
+	}
 
 	port->ifindex = ifindex;
-	spin_lock_init(&port->lock);
 
-	spin_lock_irqsave(&port_cache_lock, flags);
 	hash_add_rcu(port_cache, &port->hash_node, ifindex);
 	spin_unlock_irqrestore(&port_cache_lock, flags);
 	synchronize_rcu();
+}
 
-	return port;
+static void __port_cache_uninit(int ifindex)
+{
+	struct port_node *port;
+	unsigned long flags;
+	u64 *stat_data = NULL;
+	u64 *stat_data_old = NULL;
+	u8 *stat_strings = NULL;
+
+	spin_lock_irqsave(&port_cache_lock, flags);
+	port = __port_cache_get(ifindex);
+	if (!port) {
+		spin_unlock_irqrestore(&port_cache_lock, flags);
+		return;
+	}
+
+	stat_data = port->stat_data;
+	stat_data_old = port->stat_data_old;
+	stat_strings = port->stat_strings;
+	hash_del_rcu(&port->hash_node);
+	spin_unlock_irqrestore(&port_cache_lock, flags);
+	synchronize_rcu();
+
+	kfree(stat_data);
+	kfree(stat_data_old);
+	kfree(stat_strings);
+	kfree(port);
 }
 
 static int port_cache_get_sset_count(int ifindex, int sset)
 {
 	struct port_node *port;
+	int count = 0;
 
 	if (sset < ETH_SS_TEST || sset > ETH_SS_FEATURES)
 		return -EINVAL;
 
+	rcu_read_lock();
 	port = __port_cache_get(ifindex);
-	if (!port)
-		return 0;
+	if (port)
+		count = port->sset_count[sset];
+	rcu_read_unlock();
 
-	return port->sset_count[sset];
+	return count;
 }
 
 static void port_cache_set_sset_count(int ifindex, int sset, int count)
 {
 	struct port_node *port;
+	unsigned long flags;
 
 	if (sset < ETH_SS_TEST || sset > ETH_SS_FEATURES)
 		return;
 
+	spin_lock_irqsave(&port_cache_lock, flags);
 	port = __port_cache_get(ifindex);
 	if (port)
 		port->sset_count[sset] = count;
+	spin_unlock_irqrestore(&port_cache_lock, flags);
 }
 
 static int port_cache_get_stat_strings(int ifindex, int count, u8 *strings)
@@ -109,15 +150,14 @@ static int port_cache_get_stat_strings(int ifindex, int count, u8 *strings)
 
 	memset(strings, 0, count * ETH_GSTRING_LEN);
 
-	port = __port_cache_get(ifindex);
-	if (!port)
-		return -ENODATA;
-
 	rcu_read_lock();
-	stat_strings = rcu_dereference(port->stat_strings);
-        if (stat_strings) {
-		memcpy(strings, stat_strings, count * ETH_GSTRING_LEN);
-		err = 0;
+	port = __port_cache_get(ifindex);
+	if (port) {
+		stat_strings = rcu_dereference(port->stat_strings);
+		if (stat_strings) {
+			memcpy(strings, stat_strings, count * ETH_GSTRING_LEN);
+			err = 0;
+		}
 	}
 	rcu_read_unlock();
 
@@ -130,20 +170,24 @@ static void port_cache_set_stat_strings(int ifindex, int count, u8 *strings)
 	u8 *old_strings, *new_strings;
 	unsigned long flags;
 
+	spin_lock_irqsave(&port_cache_lock, flags);
 	port = __port_cache_get(ifindex);
-	if (!port)
+	if (!port) {
+		spin_unlock_irqrestore(&port_cache_lock, flags);
 		return;
+	}
 
 	new_strings = kmalloc(count * ETH_GSTRING_LEN, GFP_KERNEL);
-	if (!new_strings)
+	if (!new_strings) {
+		spin_unlock_irqrestore(&port_cache_lock, flags);
 		return;
+	}
 
 	memcpy(new_strings, strings, count * ETH_GSTRING_LEN);
 
-	spin_lock_irqsave(&port->lock, flags);
 	old_strings = port->stat_strings;
 	rcu_assign_pointer(port->stat_strings, new_strings);
-	spin_unlock_irqrestore(&port->lock, flags);
+	spin_unlock_irqrestore(&port_cache_lock, flags);
 	synchronize_rcu();
 
 	kfree(old_strings);
@@ -155,21 +199,22 @@ static void port_cache_clear_stats(int ifindex, int count)
 	unsigned long flags;
 	int i;
 
+	spin_lock_irqsave(&port_cache_lock, flags);
 	port = __port_cache_get(ifindex);
-	if (!port)
+	if (!port) {
+		spin_unlock_irqrestore(&port_cache_lock, flags);
 		return;
-
-	spin_lock_irqsave(&port->lock, flags);
+	}
 	if (port->stat_data) {
 		if (!port->stat_data_old)
 			rcu_assign_pointer(port->stat_data_old,
 					   kzalloc(count * sizeof(u64),
 						   GFP_ATOMIC));
 		if (port->stat_data_old)
-			for (i = 0; i < count; i ++)
+			for (i = 0; i < count; i++)
 				port->stat_data_old[i] = -port->stat_data[i];
 	}
-	spin_unlock_irqrestore(&port->lock, flags);
+	spin_unlock_irqrestore(&port_cache_lock, flags);
 	synchronize_rcu();
 }
 
@@ -181,23 +226,20 @@ static void port_cache_get_stats(int ifindex, struct ethtool_stats *stats,
 	u64 *stat_data, *stat_data_old;
 	int i;
 
-	port = __port_cache_get(ifindex);
-	if (!port)
-		return;
-
 	rcu_read_lock();
+	port = __port_cache_get(ifindex);
+	if (port) {
+		stat_data = rcu_dereference(port->stat_data);
+		stat_data_old = rcu_dereference(port->stat_data_old);
 
-	stat_data = rcu_dereference(port->stat_data);
-	stat_data_old = rcu_dereference(port->stat_data_old);
-
-	if (stat_data)
-		memcpy(data, stat_data, count * sizeof(u64));
-
-	/* add in any earlier stats saved in snapshot */
-	if (stat_data_old)
-		for (i = 0; i < count; i++)
-			data[i] += stat_data_old[i];
+		if (stat_data)
+			memcpy(data, stat_data, count * sizeof(u64));
 
+		/* add in any earlier stats saved in snapshot */
+		if (stat_data_old)
+			for (i = 0; i < count; i++)
+				data[i] += stat_data_old[i];
+	}
 	rcu_read_unlock();
 
 	/* if requested, clear stats */
@@ -211,31 +253,30 @@ static void port_cache_set_stats(int ifindex, int count, u64* data, int restart)
 	unsigned long flags;
 	int i;
 
+	spin_lock_irqsave(&port_cache_lock, flags);
 	port = __port_cache_get(ifindex);
-	if (!port)
+	if (!port) {
+		spin_unlock_irqrestore(&port_cache_lock, flags);
 		return;
-
-	spin_lock_irqsave(&port->lock, flags);
+	}
 
 	/* if restarting, take snapshot of stats */
 	if (restart && port->stat_data) {
 		if (!port->stat_data_old)
 			rcu_assign_pointer(port->stat_data_old,
-					   kzalloc(count * sizeof(u64),
-						   GFP_ATOMIC));
+						kzalloc(count * sizeof(u64),
+						GFP_ATOMIC));
 		if (port->stat_data_old)
-			for (i = 0; i < count; i ++)
+			for (i = 0; i < count; i++)
 				port->stat_data_old[i] += port->stat_data[i];
 	}
 
 	if (!port->stat_data)
 		rcu_assign_pointer(port->stat_data,
-				   kmalloc(count * sizeof(u64),
-					   GFP_ATOMIC));
+				   kmalloc(count * sizeof(u64), GFP_ATOMIC));
 	if (port->stat_data)
 		memcpy(port->stat_data, data, count * sizeof(u64));
-
-	spin_unlock_irqrestore(&port->lock, flags);
+	spin_unlock_irqrestore(&port_cache_lock, flags);
 	synchronize_rcu();
 }
 
@@ -244,30 +285,31 @@ static void port_cache_clear_settings(int ifindex)
 	struct port_node *port;
 	unsigned long flags;
 
+	spin_lock_irqsave(&port_cache_lock, flags);
 	port = __port_cache_get(ifindex);
-	if (!port)
+	if (!port) {
+		spin_unlock_irqrestore(&port_cache_lock, flags);
 		return;
+	}
 
-	spin_lock_irqsave(&port->lock, flags);
 	memset(&port->settings, 0, sizeof(port->settings));
 	port->settings_valid = 0;
-	spin_unlock_irqrestore(&port->lock, flags);
+	spin_unlock_irqrestore(&port_cache_lock, flags);
 	synchronize_rcu();
 }
 
 static int port_cache_get_settings(int ifindex, struct ethtool_cmd *cmd)
 {
 	struct port_node *port;
-	int valid;
-
-	port = __port_cache_get(ifindex);
-	if (!port)
-		return -ENODATA;
+	int valid = 0;
 
 	rcu_read_lock();
-	valid = port->settings_valid;
-	if (valid)
-		memcpy(cmd, &port->settings, sizeof(*cmd));
+	port = __port_cache_get(ifindex);
+	if (port) {
+		valid = port->settings_valid;
+		if (valid)
+			memcpy(cmd, &port->settings, sizeof(*cmd));
+	}
 	rcu_read_unlock();
 
 	return valid ? 0 : -ENODATA;
@@ -278,14 +320,16 @@ static void port_cache_set_settings(int ifindex, struct ethtool_cmd *cmd)
 	struct port_node *port;
 	unsigned long flags;
 
+	spin_lock_irqsave(&port_cache_lock, flags);
 	port = __port_cache_get(ifindex);
-	if (!port)
+	if (!port) {
+		spin_unlock_irqrestore(&port_cache_lock, flags);
 		return;
+	}
 
-	spin_lock_irqsave(&port->lock, flags);
 	memcpy(&port->settings, cmd, sizeof(*cmd));
 	port->settings_valid = 1;
-	spin_unlock_irqrestore(&port->lock, flags);
+	spin_unlock_irqrestore(&port_cache_lock, flags);
 	synchronize_rcu();
 }
 
@@ -639,6 +683,18 @@ static int decode_struct(struct nlattr *attr, size_t size, void *dst)
 
 }
 
+void port_init_ethtool_stats(struct net_device *dev)
+{
+	__port_cache_init(dev->ifindex);
+}
+EXPORT_SYMBOL_GPL(port_init_ethtool_stats);
+
+void port_uninit_ethtool_stats(struct net_device *dev)
+{
+	__port_cache_uninit(dev->ifindex);
+}
+EXPORT_SYMBOL_GPL(port_uninit_ethtool_stats);
+
 int port_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
 {
 	int err, size = 0, wait = 20;
