When STP is disabled and BPDU is received, the STP BPDU needs to be

flood forwarded to other bridge ports.

diff --git a/net/bridge/br_forward.c b/net/bridge/br_forward.c
index 6b32e27..d6854a4 100644
--- a/net/bridge/br_forward.c
+++ b/net/bridge/br_forward.c
@@ -96,8 +96,19 @@ static void __br_deliver(const struct net_bridge_port *to, struct sk_buff *skb)
 static void __br_forward(const struct net_bridge_port *to, struct sk_buff *skb)
 {
 	struct net_device *indev;
+	__u8 stp_disabled_forward = 0;
+	const unsigned char *dest = eth_hdr(skb)->h_dest;
+	struct net_bridge_port *p = br_port_get_rcu(skb->dev);
+	struct net_bridge *br = p->br;
+
+	/* flood forward STP/PVST BPDU when received and STP is disabled */
+	if ((!compare_ether_addr(br_group_address, dest) ||
+			!compare_ether_addr(br_pvst_address, dest)) &&
+			(br->stp_enabled == BR_NO_STP)) {
+		stp_disabled_forward = 1;
+	}
 
-	if (br_hw_fwding_enabled) {
+	if (br_hw_fwding_enabled && !stp_disabled_forward) {
 		NF_HOOK(NFPROTO_BRIDGE, NF_BR_FORWARD, skb, skb->dev, to->dev,
 			br_hw_forward_finish);
 		return;
diff --git a/net/bridge/br_input.c b/net/bridge/br_input.c
index 874907a..fc48161 100644
--- a/net/bridge/br_input.c
+++ b/net/bridge/br_input.c
@@ -20,6 +20,8 @@
 #include <linux/rculist.h>
 #include "br_private.h"
 
+/* Bridge group multicast address 802.1d (pg 51). */
+const u8 br_group_address[ETH_ALEN] = { 0x01, 0x80, 0xc2, 0x00, 0x00, 0x00 };
 const u8 br_pvst_address[ETH_ALEN] = { 0x01, 0x00, 0x0c, 0xcc, 0xcc, 0xcd };
 const u8 br_cdp_address[ETH_ALEN] = { 0x01, 0x00, 0x0c, 0xcc, 0xcc, 0xcc };
 
@@ -70,6 +72,7 @@ int br_handle_frame_finish(struct sk_buff *skb)
 	struct net_bridge_fdb_entry *dst;
 	struct net_bridge_mdb_entry *mdst;
 	struct sk_buff *skb2;
+	__u8 stp_disabled_forward = 0;
 	bool unicast = true;
 	u16 vid = 0;
 
@@ -81,11 +84,19 @@ int br_handle_frame_finish(struct sk_buff *skb)
 
 	/* insert into forwarding database after filtering to avoid spoofing */
 	br = p->br;
+
+	/* flood forward STP/PVST BPDU when received and STP is disabled */
+	if ((!compare_ether_addr(br_group_address, dest) ||
+			!compare_ether_addr(br_pvst_address, dest)) &&
+			(br->stp_enabled == BR_NO_STP)) {
+		stp_disabled_forward = 1;
+	}
+
 	if (!br_hw_fwding_enabled && (p->flags & BR_LEARNING))
 		br_fdb_update(br, p, eth_hdr(skb)->h_source, vid);
 
 	if (!is_broadcast_ether_addr(dest) && is_multicast_ether_addr(dest) &&
-	    br_multicast_rcv(br, p, skb, vid))
+	    br_multicast_rcv(br, p, skb, vid) && !stp_disabled_forward)
 		goto drop;
 
 	if (p->state == BR_STATE_LEARNING)
@@ -104,7 +115,7 @@ int br_handle_frame_finish(struct sk_buff *skb)
 	if (is_broadcast_ether_addr(dest)) {
 		skb2 = skb;
 		unicast = false;
-	} else if (is_multicast_ether_addr(dest)) {
+	} else if (is_multicast_ether_addr(dest) || stp_disabled_forward) {
 		mdst = br_mdb_get(br, skb, vid);
 		if ((mdst || BR_INPUT_SKB_CB_MROUTERS_ONLY(skb)) &&
 		    br_multicast_querier_exists(br, eth_hdr(skb))) {
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index c80f94d..8f5273d 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -329,6 +329,8 @@ struct br_input_skb_cb {
 	pr_debug("%s: " format,  (br)->dev->name, ##args)
 
 extern struct notifier_block br_device_notifier;
+extern const u8 br_group_address[ETH_ALEN];
+extern const u8 br_pvst_address[ETH_ALEN];
 
 /* called under bridge lock */
 static inline int br_is_root_bridge(const struct net_bridge *br)
