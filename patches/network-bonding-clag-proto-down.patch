Hold down the slaves for multi-chassis LAG enabled bonds. For such bonds the
slave state (dev_open/dev_close) is controlled by a MC-LAG application. This
change involves -
1. dev_close on all the cuurent slaves when clag_enable is set to 1.
2. dev_open on all the current slaves when clag_enable is set to 0. To resume
regular operation.
3. skip slave dev_open when a new slave is added to an MC-LAG bond (clag_enable
set to 1).

Without this change in the following cases the slaves will start forwarding
traffic independent of the MC-LAG control protocol which could result in
duplicate packets, station moves, incorrect path changes (traffic black holes)
and loops (causing a network meltdown) -
1. On switch reboot prior to the MC-LAG app taking control of the MC-LAG bonds.
2. When a new slave is added to a bond (bond_enslave)

CL Note: Is dependent on networking-bonding-clag.patch

diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c
index d08ed85..0356165 100644
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@ -1810,7 +1810,14 @@ int bond_enslave(struct net_device *bond_dev, struct net_device *slave_dev)
 		goto err_restore_mac;
 	}
 
-	/* open the slave since the application closed it */
+	/* If the bond is multi-chassis LAG enabled the slave is placed in a
+	 * proto_down state. This has to be done before device is opened and
+	 * is needed to prevent the slaves from becoming active independent of
+	 * the mc-lag control protocol run by the app. */
+	if (bond->params.clag_enable)
+		dev_set_proto_down(slave_dev, IF_LINK_PROTO_DOWN_MLAG,
+				IF_LINK_PROTO_DOWN_MLAG);
+
 	res = dev_open(slave_dev);
 	if (res) {
 		pr_debug("Opening slave %s failed\n", slave_dev->name);
@@ -2043,6 +2050,8 @@ err_close:
 	dev_close(slave_dev);
 
 err_unset_master:
+	if (bond->params.clag_enable)
+		dev_set_proto_down(slave_dev, 0, IF_LINK_PROTO_DOWN_MLAG);
 	netdev_set_bond_master(slave_dev, NULL);
 
 err_restore_mac:
@@ -2248,6 +2257,10 @@ int bond_release(struct net_device *bond_dev, struct net_device *slave_dev)
 	/* close slave before restoring its mac address */
 	dev_close(slave_dev);
 
+	/* Clear MLAG proto_down state */
+	if (bond->params.clag_enable)
+		dev_set_proto_down(slave_dev, 0, IF_LINK_PROTO_DOWN_MLAG);
+
 	if (bond->params.fail_over_mac != BOND_FOM_ACTIVE) {
 		/* restore original ("permanent") mac address */
 		memcpy(addr.sa_data, slave->perm_hwaddr, ETH_ALEN);
@@ -5404,6 +5417,53 @@ void bond_set_backup_slave(struct slave *slave)
 	bond_netlink_event(slave->bond, slave, BOND_GENL_CMD_DEACTIVATE_EVENT);
 }
 
+static void bond_set_clag_proto_down_state(struct bonding *bond, u8 proto_down)
+{
+	struct slave *slave;
+	struct net_device *slave_dev;
+	struct net_device *bond_dev = bond->dev;
+	int i;
+
+	read_lock(&bond->lock);
+	bond_for_each_slave(bond, slave, i) {
+		slave_dev = slave->dev;
+		if (proto_down)
+			dev_set_proto_down(slave_dev, IF_LINK_PROTO_DOWN_MLAG,
+					IF_LINK_PROTO_DOWN_MLAG);
+		else
+			dev_set_proto_down(slave_dev, 0,
+					IF_LINK_PROTO_DOWN_MLAG);
+	}
+	read_unlock(&bond->lock);
+
+	if (proto_down)
+		dev_set_proto_down(bond_dev, IF_LINK_PROTO_DOWN_MLAG,
+				IF_LINK_PROTO_DOWN_MLAG);
+	else
+		dev_set_proto_down(bond_dev, 0,
+				IF_LINK_PROTO_DOWN_MLAG);
+}
+
+/* Enable/disable multi-chassis LAG on a bond. Once mc-lag is enabled on a bond
+ * the slaves are place in a proto_down state as the slaves' state will now be
+ * controlled by a mc-lag application. On mc-lag disable the bonding driver
+ * takes back slave state control and clears proto_down on slaves that may have
+ * been shutdown by the application */
+void bond_set_clag_enable(struct bonding *bond, u8 clag_enable)
+{
+	if (bond->params.clag_enable == clag_enable)
+		return;
+
+	bond->params.clag_enable = clag_enable;
+
+	if (clag_enable)
+		/* proto_down the bond and its slaves - they are now in
+		 * MC-LAG app's control */
+		bond_set_clag_proto_down_state(bond, 1);
+	else
+		bond_set_clag_proto_down_state(bond, 0);
+}
+
 static int __init bonding_init(void)
 {
 	int i;
diff --git a/drivers/net/bonding/bond_sysfs.c b/drivers/net/bonding/bond_sysfs.c
index 93a4db8..dc68bbc 100644
--- a/drivers/net/bonding/bond_sysfs.c
+++ b/drivers/net/bonding/bond_sysfs.c
@@ -1012,7 +1012,7 @@ static ssize_t bonding_store_clag_enable(struct device *d,
 		return restart_syscall();
 	pr_debug("%s: Setting clag enable to %u\n",
 			bond->dev->name, new_value);
-	bond->params.clag_enable = new_value;
+	bond_set_clag_enable(bond, new_value);
 	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
 	rtnl_unlock();
 	return count;
diff --git a/drivers/net/bonding/bonding.h b/drivers/net/bonding/bonding.h
index eefaa18..6f8b59c 100644
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@ -425,6 +425,7 @@ void bond_debug_register(struct bonding *bond);
 void bond_debug_unregister(struct bonding *bond);
 void bond_debug_reregister(struct bonding *bond);
 const char *bond_mode_name(int mode);
+void bond_set_clag_enable(struct bonding *bond, u8 clag_enable);
 
 struct bond_net {
 	struct net *		net;	/* Associated network namespace */
