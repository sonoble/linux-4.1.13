This patch by default suppresses the installation of bridge member local
port mac in the fdb, which creates a big scalability problem when the
number of ports and vlan membership is large.

To ensure upper devices continue to receive packets destined to member port
mac that is different from the bridge or bridge upper devices's macs
(possible with current behavior albeit a rare use case), the local macs
are continued to be installed on vlan 0 (as 'my macs') and referenced for
the sole purpose of passing up the stack when fdb lookup by vlan results
in a miss.  Note that vlan membership of ingress port and the bridge device
as egress are still being correctly enforced.

A sysctl node is created to allow reverting back to existing behavior.

diff --git a/net/bridge/br.c b/net/bridge/br.c
index 8c0a4ad..c8202a2 100644
--- a/net/bridge/br.c
+++ b/net/bridge/br.c
@@ -131,10 +131,46 @@ static struct ctl_path br_allow_multiple_vlans_path[] = {
 	{ }
 };
 
+static struct ctl_table_header *br_ignore_local_fdb_sysctl_header;
+int br_ignore_local_fdb __read_mostly = 1;
+
+static
+int br_ignore_local_fdb_sysctl_call_tables(ctl_table * ctl, int write,
+			void __user * buffer, size_t * lenp, loff_t * ppos)
+{
+	int ret;
+	int old_ignore_local_fdb = br_ignore_local_fdb;
+
+	ret = proc_dointvec(ctl, write, buffer, lenp, ppos);
+	if (old_ignore_local_fdb != br_ignore_local_fdb) {
+		printk(KERN_INFO "%s local fdb installation\n",
+			br_ignore_local_fdb ? "disable" : "enable");
+	}
+
+	return ret;
+}
+
+static ctl_table br_ignore_local_fdb_table[] = {
+	{
+		.procname       = "bridge-ignore-local-fdb",
+		.data		= &br_ignore_local_fdb,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= br_ignore_local_fdb_sysctl_call_tables,
+	},
+	{ }
+};
+
+static struct ctl_path br_ignore_local_fdb_path[] = {
+	{ .procname = "net", },
+	{ .procname = "bridge", },
+	{ }
+};
 
 #else
 #define brstp_user_space 1
 #define br_allow_multiple_vlans 0
+#define br_ignore_local_fdb 1
 #endif
 
 static int __init br_init(void)
@@ -157,6 +193,15 @@ static int __init br_init(void)
 		"br_init: can't register to sysctl.\n");
 		return -ENOMEM;
 	}
+
+	br_ignore_local_fdb_sysctl_header = register_sysctl_paths(
+						br_ignore_local_fdb_path,
+						br_ignore_local_fdb_table);
+	if (br_ignore_local_fdb_sysctl_header == NULL) {
+		printk(KERN_WARNING
+		"br_init: can't register to sysctl.\n");
+		return -ENOMEM;
+	}
 #endif
 
 	if (!brstp_user_space) {
diff --git a/net/bridge/br_fdb.c b/net/bridge/br_fdb.c
index 0311630..9063201 100644
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@ -746,6 +746,10 @@ static int __br_fdb_add(struct ndmsg *ndm, struct net_bridge_port *p,
 {
 	int err = 0;
 
+	if (p->br->vlan_enabled && br_ignore_local_fdb &&
+	    (ndm->ndm_state & NUD_PERMANENT))
+		return err;
+
 	if (ndm->ndm_flags & NTF_USE) {
 		rcu_read_lock();
 		br_fdb_update(p->br, p, addr, vid);
diff --git a/net/bridge/br_input.c b/net/bridge/br_input.c
index 3894c99..d2f8c04 100644
--- a/net/bridge/br_input.c
+++ b/net/bridge/br_input.c
@@ -136,6 +136,11 @@ int br_handle_frame_finish(struct sk_buff *skb)
 		skb2 = skb;
 		/* Do not forward the packet since it's local. */
 		skb = NULL;
+	} else if (br->vlan_enabled && br_ignore_local_fdb &&
+		   ((dst = __br_fdb_get(br, dest, 0)) && dst->is_local)) {
+		skb2 = skb;
+		/* Do not forward the packet since it's local. */
+		skb = NULL;
 	}
 
 	if (skb) {
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index 2d70a48..e4ef7ca 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -817,6 +817,7 @@ unsigned long br_timer_value(const struct timer_list *timer);
 #if IS_ENABLED(CONFIG_ATM_LANE)
 extern int (*br_fdb_test_addr_hook)(struct net_device *dev, unsigned char *addr);
 #endif
+extern int br_ignore_local_fdb;
 
 /* br_netlink.c */
 extern struct rtnl_link_ops br_link_ops;
diff --git a/net/bridge/br_vlan.c b/net/bridge/br_vlan.c
index 5880138..db5a590 100644
--- a/net/bridge/br_vlan.c
+++ b/net/bridge/br_vlan.c
@@ -66,12 +66,13 @@ static int __vlan_add(struct net_port_vlans *v, u16 vid, u16 flags)
 		if (err)
 			return err;
 	}
-
-	err = br_fdb_insert(br, p, dev->dev_addr, vid);
-	if (err) {
-		br_err(br, "failed insert local address into bridge "
-		       "forwarding table\n");
-		goto out_filt;
+	if (!br_ignore_local_fdb || !v->port_idx) {
+		err = br_fdb_insert(br, p, dev->dev_addr, vid);
+		if (err) {
+			br_err(br, "failed insert local address into bridge "
+				"forwarding table\n");
+			goto out_filt;
+		}
 	}
 
 	set_bit(vid, v->vlan_bitmap);
