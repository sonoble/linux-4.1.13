On a topology change, send a general leave to router port to have the querier
send out a general query to reduce multicast group convergence time.

When a leave is received and when querier is configured, dont send a query
when the switch is not an active querier.

diff --git a/net/bridge/br_multicast.c b/net/bridge/br_multicast.c
index 0996c69..b16f5cd 100644
--- a/net/bridge/br_multicast.c
+++ b/net/bridge/br_multicast.c
@@ -471,10 +471,14 @@ static struct sk_buff *br_ip6_multicast_alloc_query(struct net_bridge *br,
 	struct ethhdr *eth;
 	u8 *hopopt;
 	unsigned long interval;
+	int vh_size = 0;
+
+	/* if vid is non-zero, insert the 1Q header also */
+	if (vid && tagged)
+		vh_size = sizeof(struct vlan_hdr);
 
-	/* TBD: if vid is non-zero, insert a 1Q header */
 	skb = netdev_alloc_skb_ip_align(br->dev, sizeof(*eth) +
-					sizeof(*ip6h) + 8 + sizeof(*mldq));
+					vh_size + sizeof(*ip6h) + 8 + sizeof(*mldq));
 	if (!skb)
 		goto out;
 
@@ -488,6 +492,13 @@ static struct sk_buff *br_ip6_multicast_alloc_query(struct net_bridge *br,
 	eth->h_proto = htons(ETH_P_IPV6);
 	skb_put(skb, sizeof(*eth));
 
+	if (vid && tagged) {
+		skb = vlan_put_tag(skb, vid);
+		if (!skb) {
+			pr_err("Error: failed to insert VLAN tag\n");
+			return NULL;
+		}
+	}
 	/* IPv6 header + HbH option */
 	skb_set_network_header(skb, skb->len);
 	ip6h = ipv6_hdr(skb);
@@ -889,7 +900,7 @@ static void br_multicast_send_query(struct net_bridge *br,
 	    !br->multicast_querier)
 		return;
 
-	memset(&br_group.u, 0, sizeof(br_group.u));
+	memset(&br_group, 0, sizeof(br_group));
 
 	if (port ? (query == &port->ip4_query) :
 		   (query == &br->ip4_query)) {
@@ -909,7 +920,7 @@ static void br_multicast_send_query(struct net_bridge *br,
 		/* for each vlan in the list, populate the br_group.vid
 		 * and send a query
 		 */
-		list_for_each_entry(s, &querier->vlist, list) {
+		list_for_each_entry(s, &br->ip4_querier.vlist, list) {
 			br_group.vid = s->src.vid;
 			__br_multicast_send_query(br, port, &br_group);
 			num_vlans++;
@@ -1415,6 +1426,8 @@ static void br_multicast_leave_group(struct net_bridge *br,
 	struct net_bridge_port_group *p;
 	unsigned long now;
 	unsigned long time;
+	bool querier_vlan = false;
+	struct bridge_mcast_querier_src *s;
 
 	spin_lock(&br->multicast_lock);
 	if (!netif_running(br->dev) ||
@@ -1423,8 +1436,24 @@ static void br_multicast_leave_group(struct net_bridge *br,
 
 	mdb = mlock_dereference(br->mdb, br);
 	mp = br_mdb_ip_get(mdb, group);
-	if (!mp)
+	if (!mp) {
+		/* When a general leave is received for multicast querier,
+		 * send an igmp query
+		 */
+		if (br->multicast_querier && port && !timer_pending(&querier->timer)) {
+			if (!br->vlan_enabled)
+				querier_vlan = true;
+			else
+				list_for_each_entry(s, &br->ip4_querier.vlist, list) {
+					if (group->vid == s->src.vid)
+						querier_vlan = true;
+				}
+			if (querier_vlan && (ntohs(group->proto) == ETH_P_IP) &&
+					ipv4_is_zeronet(group->u.ip4))
+				__br_multicast_send_query(br, port, group);
+		}
 		goto out;
+	}
 
 	if (port && (port->flags & BR_MULTICAST_FAST_LEAVE)) {
 		struct net_bridge_port_group __rcu **pp;
@@ -1451,7 +1480,7 @@ static void br_multicast_leave_group(struct net_bridge *br,
 	if (timer_pending(&br->multicast_querier_timer))
 		goto out;
 
-	if (br->multicast_querier) {
+	if (br->multicast_querier && !timer_pending(&querier->timer)) {
 		__br_multicast_send_query(br, port, &mp->addr);
 
 		time = jiffies + br->multicast_last_member_count *
@@ -2251,3 +2280,156 @@ out:
 	spin_unlock_bh(&br->multicast_lock);
 	return res;
 }
+
+static struct sk_buff *br_ip4_multicast_alloc_leave(struct net_bridge *br,
+						    __be32 group,
+							__u16 vid,
+							bool tagged)
+{
+	struct sk_buff *skb;
+	struct igmphdr *ih;
+	struct ethhdr *eth;
+	struct iphdr *iph;
+	int vh_size = 0;
+
+	/* if vid is non-zero, insert the 1Q header also */
+	if (vid && tagged)
+		vh_size = sizeof(struct vlan_hdr);
+	skb = netdev_alloc_skb_ip_align(br->dev, sizeof(*eth) + sizeof(*iph) +
+							vh_size + sizeof(*ih) + 4);
+	if (!skb)
+		goto out;
+
+	skb->protocol = htons(ETH_P_IP);
+
+	skb_reset_mac_header(skb);
+	eth = eth_hdr(skb);
+
+	memcpy(eth->h_source, br->dev->dev_addr, 6);
+	eth->h_dest[0] = 1;
+	eth->h_dest[1] = 0;
+	eth->h_dest[2] = 0x5e;
+	eth->h_dest[3] = 0;
+	eth->h_dest[4] = 0;
+	eth->h_dest[5] = 2;
+	eth->h_proto = htons(ETH_P_IP);
+	skb_put(skb, sizeof(*eth));
+
+	if (vid && tagged) {
+		skb = vlan_put_tag(skb, vid);
+		if (!skb) {
+			pr_err("Error: failed to insert VLAN tag\n");
+			return NULL;
+		}
+	}
+	skb_set_network_header(skb, skb->len);
+	iph = ip_hdr(skb);
+
+	iph->version = 4;
+	iph->ihl = 6;
+	iph->tos = 0xc0;
+	iph->tot_len = htons(sizeof(*iph) + sizeof(*ih) + 4);
+	iph->id = 0;
+	iph->frag_off = htons(IP_DF);
+	iph->ttl = 1;
+	iph->protocol = IPPROTO_IGMP;
+	iph->saddr = 0;
+	iph->daddr = htonl(INADDR_ALLRTRS_GROUP);
+	((u8 *)&iph[1])[0] = IPOPT_RA;
+	((u8 *)&iph[1])[1] = 4;
+	((u8 *)&iph[1])[2] = 0;
+	((u8 *)&iph[1])[3] = 0;
+	ip_send_check(iph);
+	skb_put(skb, 24);
+
+	skb_set_transport_header(skb, skb->len);
+	ih = igmp_hdr(skb);
+	ih->type = IGMP_HOST_LEAVE_MESSAGE;
+	ih->code = 0;
+	ih->group = group;
+	ih->csum = 0;
+	ih->csum = ip_compute_csum((void *)ih, sizeof(struct igmphdr));
+	skb_put(skb, sizeof(*ih));
+
+	__skb_pull(skb, sizeof(*eth));
+
+out:
+	return skb;
+}
+
+static struct sk_buff *br_multicast_alloc_leave(struct net_bridge *br,
+						struct br_ip *addr,
+						bool tagged)
+{
+	switch (addr->proto) {
+	case htons(ETH_P_IP):
+		return br_ip4_multicast_alloc_leave(br, addr->u.ip4, addr->vid,
+								tagged);
+	}
+	return NULL;
+}
+
+static void __br_multicast_send_leave(struct net_bridge *br,
+				      struct net_bridge_port *port,
+				      struct br_ip *ip)
+{
+	struct sk_buff *skb;
+	bool tagged = false;
+
+	if (port && ip->vid) {
+		if (!br->vlan_enabled || !nbp_vlan_find(port, ip->vid))
+			return;
+		if (br_get_pvid(nbp_get_vlan_info(port)) != ip->vid)
+			tagged = true;
+	}
+	skb = br_multicast_alloc_leave(br, ip, tagged);
+	if (!skb)
+		return;
+
+	if (port) {
+		__skb_push(skb, sizeof(struct ethhdr));
+		skb->dev = port->dev;
+		NF_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_OUT, skb, NULL, skb->dev,
+			dev_queue_xmit);
+	} else
+		netif_rx(skb);
+}
+
+/* Send an IGMP general leave message to router ports,
+ * so that the upstream querier sends an IGMP query in return.
+ */
+void br_mdb_leave_topology_change(struct net_bridge *br,
+		struct net_bridge_port *port)
+{
+	struct br_ip br_group;
+	struct net_bridge_port *rport = NULL;
+	unsigned short vid = VLAN_N_VID;
+	struct net_port_vlans *pv;
+
+	if (!netif_running(br->dev) || (br->stp_enabled != BR_USER_STP) ||
+		br->multicast_disabled || (!netif_running(port->dev)) ||
+		br->multicast_querier) {
+		return;
+	}
+	memset(&br_group, 0, sizeof(br_group));
+
+	list_for_each_entry(rport, &br->port_list, list) {
+		if ((rport->multicast_router == 0) || (rport == port))
+			continue;
+		if ((rport->multicast_router == 1) && (hlist_unhashed(&rport->rlist)))
+			continue;
+		pv = nbp_get_vlan_info(rport);
+		if (br->vlan_enabled && pv) {
+			/* for each vlan in the list, send a leave
+			 */
+			for_each_set_bit(vid, pv->vlan_bitmap, VLAN_N_VID) {
+				br_group.vid = vid;
+				br_group.proto = htons(ETH_P_IP);
+				__br_multicast_send_leave(br, rport, &br_group);
+			}
+		} else {
+			br_group.proto = htons(ETH_P_IP);
+			__br_multicast_send_leave(br, rport, &br_group);
+		}
+	}
+}
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index 7ae7eeb..ff58204 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -484,7 +484,8 @@ void br_mdb_init(void);
 void br_mdb_uninit(void);
 void br_mdb_notify(struct net_device *dev, struct net_bridge_port *port,
 		   struct br_ip *group, int type, u8 state);
-
+void br_mdb_leave_topology_change(struct net_bridge *br,
+		struct net_bridge_port *port);
 extern void br_rtr_notify(struct net_device *dev, struct net_bridge_port *port,
 				int type);
 
diff --git a/net/bridge/br_sysfs_if.c b/net/bridge/br_sysfs_if.c
index 81ddab5..3ba9949 100644
--- a/net/bridge/br_sysfs_if.c
+++ b/net/bridge/br_sysfs_if.c
@@ -217,6 +217,9 @@ static BRPORT_ATTR(vlans, S_IRUGO, show_vlans, NULL);
 
 static int store_flush(struct net_bridge_port *p, unsigned long v)
 {
+#ifdef CONFIG_BRIDGE_IGMP_SNOOPING
+	br_mdb_leave_topology_change(p->br, p);
+#endif
 	br_fdb_delete_by_port(p->br, p, 0); // Don't delete local entry
 	return 0;
 }
