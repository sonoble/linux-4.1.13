Add port generic netlink support

diff --git a/include/linux/ethtool.h b/include/linux/ethtool.h
index de33de1..02d9a42 100644
--- a/include/linux/ethtool.h
+++ b/include/linux/ethtool.h
@@ -118,6 +118,23 @@ struct ethtool_eeprom {
 };
 
 /**
+ * struct ethtool_modinfo - plugin module eeprom information
+ * @cmd: %ETHTOOL_GMODULEINFO
+ * @type: Standard the module information conforms to %ETH_MODULE_SFF_xxxx
+ * @eeprom_len: Length of the eeprom
+ *
+ * This structure is used to return the information to
+ * properly size memory for a subsequent call to %ETHTOOL_GMODULEEEPROM.
+ * The type code indicates the eeprom data format
+ */
+struct ethtool_modinfo {
+	__u32   cmd;
+	__u32   type;
+	__u32   eeprom_len;
+	__u32   reserved[8];
+};
+
+/**
  * struct ethtool_coalesce - coalescing parameters for IRQs and stats updates
  * @cmd: ETHTOOL_{G,S}COALESCE
  * @rx_coalesce_usecs: How many usecs to delay an RX interrupt after
@@ -338,9 +355,19 @@ struct ethtool_test {
 	__u64	data[0];
 };
 
+/**
+ * enum ethtool_stats_flags - flags definition of ethtool_stats
+ * @ETH_STATS_FL_CLEAR: if set clear device stats after read
+ */
+
+enum ethtool_stats_flags {
+	ETH_STATS_FL_CLEAR	= (1 << 0),
+};
+
 /* for dumping NIC-specific statistics */
 struct ethtool_stats {
 	__u32	cmd;		/* ETHTOOL_GSTATS */
+	__u32	flags;		/* ETH_STATS_FL_xxx */
 	__u32	n_stats;	/* number of u64's being returned */
 	__u64	data[0];
 };
@@ -956,6 +983,10 @@ struct ethtool_ops {
 	int	(*get_dump_data)(struct net_device *,
 				 struct ethtool_dump *, void *);
 	int	(*set_dump)(struct net_device *, struct ethtool_dump *);
+	int     (*get_module_info)(struct net_device *,
+				   struct ethtool_modinfo *);
+	int     (*get_module_eeprom)(struct net_device *,
+				     struct ethtool_eeprom *, u8 *);
 
 };
 #endif /* __KERNEL__ */
@@ -1030,6 +1061,8 @@ struct ethtool_ops {
 #define ETHTOOL_SET_DUMP	0x0000003e /* Set dump settings */
 #define ETHTOOL_GET_DUMP_FLAG	0x0000003f /* Get dump settings */
 #define ETHTOOL_GET_DUMP_DATA	0x00000040 /* Get dump data */
+#define ETHTOOL_GMODULEINFO	0x00000042 /* Get plug-in module information */
+#define ETHTOOL_GMODULEEEPROM	0x00000043 /* Get plug-in module eeprom */
 
 /* compatibility with older code */
 #define SPARC_ETH_GSET		ETHTOOL_GSET
diff --git a/include/linux/hashtable.h b/include/linux/hashtable.h
new file mode 100644
index 0000000..227c624
--- /dev/null
+++ b/include/linux/hashtable.h
@@ -0,0 +1,192 @@
+/*
+ * Statically sized hash table implementation
+ * (C) 2012  Sasha Levin <levinsasha928@gmail.com>
+ */
+
+#ifndef _LINUX_HASHTABLE_H
+#define _LINUX_HASHTABLE_H
+
+#include <linux/list.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/hash.h>
+#include <linux/rculist.h>
+
+#define DEFINE_HASHTABLE(name, bits)						\
+	struct hlist_head name[1 << (bits)] =					\
+			{ [0 ... ((1 << (bits)) - 1)] = HLIST_HEAD_INIT }
+
+#define DECLARE_HASHTABLE(name, bits)                                   	\
+	struct hlist_head name[1 << (bits)]
+
+#define HASH_SIZE(name) (ARRAY_SIZE(name))
+#define HASH_BITS(name) ilog2(HASH_SIZE(name))
+
+/* Use hash_32 when possible to allow for fast 32bit hashing in 64bit kernels. */
+#define hash_min(val, bits)							\
+	(sizeof(val) <= 4 ? hash_32(val, bits) : hash_long(val, bits))
+
+static inline void __hash_init(struct hlist_head *ht, unsigned int sz)
+{
+	unsigned int i;
+
+	for (i = 0; i < sz; i++)
+		INIT_HLIST_HEAD(&ht[i]);
+}
+
+/**
+ * hash_init - initialize a hash table
+ * @hashtable: hashtable to be initialized
+ *
+ * Calculates the size of the hashtable from the given parameter, otherwise
+ * same as hash_init_size.
+ *
+ * This has to be a macro since HASH_BITS() will not work on pointers since
+ * it calculates the size during preprocessing.
+ */
+#define hash_init(hashtable) __hash_init(hashtable, HASH_SIZE(hashtable))
+
+/**
+ * hash_add - add an object to a hashtable
+ * @hashtable: hashtable to add to
+ * @node: the &struct hlist_node of the object to be added
+ * @key: the key of the object to be added
+ */
+#define hash_add(hashtable, node, key)						\
+	hlist_add_head(node, &hashtable[hash_min(key, HASH_BITS(hashtable))])
+
+/**
+ * hash_add_rcu - add an object to a rcu enabled hashtable
+ * @hashtable: hashtable to add to
+ * @node: the &struct hlist_node of the object to be added
+ * @key: the key of the object to be added
+ */
+#define hash_add_rcu(hashtable, node, key)					\
+	hlist_add_head_rcu(node, &hashtable[hash_min(key, HASH_BITS(hashtable))])
+
+/**
+ * hash_hashed - check whether an object is in any hashtable
+ * @node: the &struct hlist_node of the object to be checked
+ */
+static inline bool hash_hashed(struct hlist_node *node)
+{
+	return !hlist_unhashed(node);
+}
+
+static inline bool __hash_empty(struct hlist_head *ht, unsigned int sz)
+{
+	unsigned int i;
+
+	for (i = 0; i < sz; i++)
+		if (!hlist_empty(&ht[i]))
+			return false;
+
+	return true;
+}
+
+/**
+ * hash_empty - check whether a hashtable is empty
+ * @hashtable: hashtable to check
+ *
+ * This has to be a macro since HASH_BITS() will not work on pointers since
+ * it calculates the size during preprocessing.
+ */
+#define hash_empty(hashtable) __hash_empty(hashtable, HASH_SIZE(hashtable))
+
+/**
+ * hash_del - remove an object from a hashtable
+ * @node: &struct hlist_node of the object to remove
+ */
+static inline void hash_del(struct hlist_node *node)
+{
+	hlist_del_init(node);
+}
+
+/**
+ * hash_del_rcu - remove an object from a rcu enabled hashtable
+ * @node: &struct hlist_node of the object to remove
+ */
+static inline void hash_del_rcu(struct hlist_node *node)
+{
+	hlist_del_init_rcu(node);
+}
+
+/**
+ * hash_for_each - iterate over a hashtable
+ * @name: hashtable to iterate
+ * @bkt: integer to use as bucket loop cursor
+ * @node: the &struct list_head to use as a loop cursor for each entry
+ * @obj: the type * to use as a loop cursor for each entry
+ * @member: the name of the hlist_node within the struct
+ */
+#define hash_for_each(name, bkt, node, obj, member)				\
+	for ((bkt) = 0, node = NULL; node == NULL && (bkt) < HASH_SIZE(name); (bkt)++)\
+		hlist_for_each_entry(obj, node, &name[bkt], member)
+
+/**
+ * hash_for_each_rcu - iterate over a rcu enabled hashtable
+ * @name: hashtable to iterate
+ * @bkt: integer to use as bucket loop cursor
+ * @node: the &struct list_head to use as a loop cursor for each entry
+ * @obj: the type * to use as a loop cursor for each entry
+ * @member: the name of the hlist_node within the struct
+ */
+#define hash_for_each_rcu(name, bkt, node, obj, member)				\
+	for ((bkt) = 0, node = NULL; node == NULL && (bkt) < HASH_SIZE(name); (bkt)++)\
+		hlist_for_each_entry_rcu(obj, node, &name[bkt], member)
+
+/**
+ * hash_for_each_safe - iterate over a hashtable safe against removal of
+ * hash entry
+ * @name: hashtable to iterate
+ * @bkt: integer to use as bucket loop cursor
+ * @node: the &struct list_head to use as a loop cursor for each entry
+ * @tmp: a &struct used for temporary storage
+ * @obj: the type * to use as a loop cursor for each entry
+ * @member: the name of the hlist_node within the struct
+ */
+#define hash_for_each_safe(name, bkt, node, tmp, obj, member)			\
+	for ((bkt) = 0, node = NULL; node == NULL && (bkt) < HASH_SIZE(name); (bkt)++)\
+		hlist_for_each_entry_safe(obj, node, tmp, &name[bkt], member)
+
+/**
+ * hash_for_each_possible - iterate over all possible objects hashing to the
+ * same bucket
+ * @name: hashtable to iterate
+ * @obj: the type * to use as a loop cursor for each entry
+ * @node: the &struct list_head to use as a loop cursor for each entry
+ * @member: the name of the hlist_node within the struct
+ * @key: the key of the objects to iterate over
+ */
+#define hash_for_each_possible(name, obj, node, member, key)			\
+	hlist_for_each_entry(obj, node,	&name[hash_min(key, HASH_BITS(name))], member)
+
+/**
+ * hash_for_each_possible_rcu - iterate over all possible objects hashing to the
+ * same bucket in an rcu enabled hashtable
+ * in a rcu enabled hashtable
+ * @name: hashtable to iterate
+ * @obj: the type * to use as a loop cursor for each entry
+ * @node: the &struct list_head to use as a loop cursor for each entry
+ * @member: the name of the hlist_node within the struct
+ * @key: the key of the objects to iterate over
+ */
+#define hash_for_each_possible_rcu(name, obj, node, member, key)		\
+	hlist_for_each_entry_rcu(obj, node, &name[hash_min(key, HASH_BITS(name))], member)
+
+/**
+ * hash_for_each_possible_safe - iterate over all possible objects hashing to the
+ * same bucket safe against removals
+ * @name: hashtable to iterate
+ * @obj: the type * to use as a loop cursor for each entry
+ * @node: the &struct list_head to use as a loop cursor for each entry
+ * @tmp: a &struct used for temporary storage
+ * @member: the name of the hlist_node within the struct
+ * @key: the key of the objects to iterate over
+ */
+#define hash_for_each_possible_safe(name, obj, node, tmp, member, key)		\
+	hlist_for_each_entry_safe(obj, node, tmp,				\
+		&name[hash_min(key, HASH_BITS(name))], member)
+
+
+#endif
diff --git a/include/linux/port.h b/include/linux/port.h
new file mode 100644
index 0000000..4e1c783
--- /dev/null
+++ b/include/linux/port.h
@@ -0,0 +1,76 @@
+/*
+ *  port.h - defines for generic netlink port handler
+ *  Copyright (C) 2013 Cumulus Networks
+ */
+
+#ifndef _LINUX_PORT_H
+#define _LINUX_PORT_H
+
+#ifdef __KERNEL__
+#include <linux/compat.h>
+#endif
+#include <linux/types.h>
+
+enum {
+	PORT_ATTR_UNSPEC,
+	PORT_ATTR_STATUS,
+	PORT_ATTR_IFINDEX,
+	PORT_ATTR_FLAGS,
+	PORT_ATTR_CARRIER,
+	PORT_ATTR_PHYS_ID_STATE,
+	PORT_ATTR_SETTINGS,
+	PORT_ATTR_PAUSE,
+	PORT_ATTR_MODINFO,
+	PORT_ATTR_EEPROM,
+	PORT_ATTR_EEPROM_DATA,
+	PORT_ATTR_STATS,
+	PORT_ATTR_STAT,
+	PORT_ATTR_STRINGS,
+	PORT_ATTR_STRING,
+	PORT_ATTR_SSET,
+	PORT_ATTR_SSET_COUNT,
+	__PORT_ATTR_MAX,
+};
+#define PORT_ATTR_MAX (__PORT_ATTR_MAX - 1)
+
+enum {
+	PORT_CMD_UNSPEC,
+	PORT_CMD_REPLY,
+	PORT_CMD_GET_SETTINGS,
+	PORT_CMD_SET_SETTINGS,
+	PORT_CMD_GET_PAUSE,
+	PORT_CMD_SET_PAUSE,
+	PORT_CMD_GET_MODULE_INFO,
+	PORT_CMD_GET_MODULE_EEPROM,
+	PORT_CMD_SET_STATS,
+	PORT_CMD_GET_STRINGS,
+	PORT_CMD_GET_SSET_COUNT,
+	PORT_CMD_SET_CARRIER,
+	PORT_CMD_SET_PHYS_ID_STATE,
+	__PORT_CMD_MAX,
+};
+
+#ifdef __KERNEL__
+
+#define PORT_ATTR_FLAG_STAT_RESTART (1 << 0)
+
+int port_get_settings(struct net_device *dev, struct ethtool_cmd *cmd);
+int port_set_settings(struct net_device *dev, struct ethtool_cmd *cmd);
+void port_get_pauseparam(struct net_device *dev,
+			 struct ethtool_pauseparam *pause);
+int port_set_pauseparam(struct net_device *dev,
+			struct ethtool_pauseparam * pause);
+void port_get_ethtool_stats(struct net_device *dev,
+			    struct ethtool_stats *stats, u64 *data);
+void port_get_ethtool_stats_clear(struct net_device *dev,
+				  struct ethtool_stats *stats, u64 *data);
+void port_get_strings(struct net_device *dev, u32 stringset, u8 *data);
+int port_get_sset_count(struct net_device *dev, int sset);
+int port_set_phys_id(struct net_device *dev, enum ethtool_phys_id_state state);
+int port_get_module_info(struct net_device *dev, struct ethtool_modinfo *info);
+int port_get_module_eeprom(struct net_device *dev,
+			   struct ethtool_eeprom *eeprom, u8 *data);
+
+#endif /* __KERNEL__ */
+
+#endif /* _LINUX_PORT_H */
diff --git a/net/core/Makefile b/net/core/Makefile
index 7913f30..28c466f 100644
--- a/net/core/Makefile
+++ b/net/core/Makefile
@@ -7,7 +7,7 @@ obj-y := sock.o request_sock.o skbuff.o iovec.o datagram.o stream.o scm.o \
 
 obj-$(CONFIG_SYSCTL) += sysctl_net_core.o
 
-obj-y		     += dev.o ethtool.o dev_addr_lists.o dst.o netevent.o \
+obj-y		     += dev.o ethtool.o dev_addr_lists.o dst.o netevent.o port.o \
 			neighbour.o rtnetlink.o utils.o link_watch.o filter.o
 
 obj-$(CONFIG_XFRM) += flow.o
diff --git a/net/core/ethtool.c b/net/core/ethtool.c
index 2367246..a12af77 100644
--- a/net/core/ethtool.c
+++ b/net/core/ethtool.c
@@ -1020,18 +1020,17 @@ static int ethtool_get_link(struct net_device *dev, char __user *useraddr)
 	return 0;
 }
 
-static int ethtool_get_eeprom(struct net_device *dev, void __user *useraddr)
+static int ethtool_get_any_eeprom(struct net_device *dev, void __user *useraddr,
+				  int (*getter)(struct net_device *,
+						struct ethtool_eeprom *, u8 *),
+				  u32 total_len)
 {
 	struct ethtool_eeprom eeprom;
-	const struct ethtool_ops *ops = dev->ethtool_ops;
 	void __user *userbuf = useraddr + sizeof(eeprom);
 	u32 bytes_remaining;
 	u8 *data;
 	int ret = 0;
 
-	if (!ops->get_eeprom || !ops->get_eeprom_len)
-		return -EOPNOTSUPP;
-
 	if (copy_from_user(&eeprom, useraddr, sizeof(eeprom)))
 		return -EFAULT;
 
@@ -1040,7 +1039,7 @@ static int ethtool_get_eeprom(struct net_device *dev, void __user *useraddr)
 		return -EINVAL;
 
 	/* Check for exceeding total eeprom len */
-	if (eeprom.offset + eeprom.len > ops->get_eeprom_len(dev))
+	if (eeprom.offset + eeprom.len > total_len)
 		return -EINVAL;
 
 	data = kmalloc(PAGE_SIZE, GFP_USER);
@@ -1051,7 +1050,7 @@ static int ethtool_get_eeprom(struct net_device *dev, void __user *useraddr)
 	while (bytes_remaining > 0) {
 		eeprom.len = min(bytes_remaining, (u32)PAGE_SIZE);
 
-		ret = ops->get_eeprom(dev, &eeprom, data);
+		ret = getter(dev, &eeprom, data);
 		if (ret)
 			break;
 		if (copy_to_user(userbuf, data, eeprom.len)) {
@@ -1072,6 +1071,17 @@ static int ethtool_get_eeprom(struct net_device *dev, void __user *useraddr)
 	return ret;
 }
 
+static int ethtool_get_eeprom(struct net_device *dev, void __user *useraddr)
+{
+	const struct ethtool_ops *ops = dev->ethtool_ops;
+
+	if (!ops->get_eeprom || !ops->get_eeprom_len)
+		return -EOPNOTSUPP;
+
+	return ethtool_get_any_eeprom(dev, useraddr, ops->get_eeprom,
+				      ops->get_eeprom_len(dev));
+}
+
 static int ethtool_set_eeprom(struct net_device *dev, void __user *useraddr)
 {
 	struct ethtool_eeprom eeprom;
@@ -1635,6 +1645,47 @@ out:
 	return ret;
 }
 
+static int ethtool_get_module_info(struct net_device *dev,
+				   void __user *useraddr)
+{
+	int ret;
+	struct ethtool_modinfo modinfo;
+	const struct ethtool_ops *ops = dev->ethtool_ops;
+
+	if (!ops->get_module_info)
+		return -EOPNOTSUPP;
+
+	if (copy_from_user(&modinfo, useraddr, sizeof(modinfo)))
+		return -EFAULT;
+
+	ret = ops->get_module_info(dev, &modinfo);
+	if (ret)
+		return ret;
+
+	if (copy_to_user(useraddr, &modinfo, sizeof(modinfo)))
+		return -EFAULT;
+
+	return 0;
+}
+
+static int ethtool_get_module_eeprom(struct net_device *dev,
+				     void __user *useraddr)
+{
+	int ret;
+	struct ethtool_modinfo modinfo;
+	const struct ethtool_ops *ops = dev->ethtool_ops;
+
+	if (!ops->get_module_info || !ops->get_module_eeprom)
+		return -EOPNOTSUPP;
+
+	ret = ops->get_module_info(dev, &modinfo);
+	if (ret)
+		return ret;
+
+	return ethtool_get_any_eeprom(dev, useraddr, ops->get_module_eeprom,
+				      modinfo.eeprom_len);
+}
+
 /* The main entry point in this file.  Called from net/core/dev.c */
 
 int dev_ethtool(struct net *net, struct ifreq *ifr)
@@ -1858,6 +1909,12 @@ int dev_ethtool(struct net *net, struct ifreq *ifr)
 	case ETHTOOL_GET_DUMP_DATA:
 		rc = ethtool_get_dump_data(dev, useraddr);
 		break;
+	case ETHTOOL_GMODULEINFO:
+		rc = ethtool_get_module_info(dev, useraddr);
+		break;
+	case ETHTOOL_GMODULEEEPROM:
+		rc = ethtool_get_module_eeprom(dev, useraddr);
+		break;
 	default:
 		rc = -EOPNOTSUPP;
 	}
diff --git a/net/core/port.c b/net/core/port.c
new file mode 100644
index 0000000..74f35f8
--- /dev/null
+++ b/net/core/port.c
@@ -0,0 +1,906 @@
+/*
+ *  net/core/port - generic netlink port handler
+ *  Copyright (C) 2013 Cumulus Networks
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/capability.h>
+#include <linux/errno.h>
+#include <linux/ethtool.h>
+#include <linux/port.h>
+#include <linux/netdevice.h>
+#include <linux/list.h>
+#include <linux/rtnetlink.h>
+#include <linux/hashtable.h>
+#include <linux/rcupdate.h>
+#include <linux/nsproxy.h>
+#include <net/net_namespace.h>
+#include <net/netns/generic.h>
+#include <net/genetlink.h>
+
+static DEFINE_HASHTABLE(port_cache, 10);
+static DEFINE_SPINLOCK(port_cache_lock);
+
+struct port_node {
+	struct hlist_node hash_node;
+	spinlock_t lock;
+	int ifindex;
+	struct ethtool_cmd settings;
+	int settings_valid;
+	u32 sset_count[ETH_SS_FEATURES + 1];
+	u64 *stat_data;
+	u64 *stat_data_old; /* snapshot of old stats */
+	u8 *stat_strings;
+};
+
+static inline struct port_node *__port_cache_get(int ifindex)
+{
+	struct port_node *port;
+	struct hlist_node *n;
+	unsigned long flags;
+
+	rcu_read_lock();
+	hash_for_each_possible_rcu(port_cache, port, n, hash_node, ifindex)
+		if (port->ifindex == ifindex) {
+			rcu_read_unlock();
+			/* This works because ports aren't
+			   deleted from cache */
+			return port;
+		}
+	rcu_read_unlock();
+
+	port = kzalloc(sizeof(*port), GFP_KERNEL);
+	if (!port)
+		return NULL;
+
+	port->ifindex = ifindex;
+	spin_lock_init(&port->lock);
+
+	spin_lock_irqsave(&port_cache_lock, flags);
+	hash_add_rcu(port_cache, &port->hash_node, ifindex);
+	spin_unlock_irqrestore(&port_cache_lock, flags);
+	synchronize_rcu();
+
+	return port;
+}
+
+static int port_cache_get_sset_count(int ifindex, int sset)
+{
+	struct port_node *port;
+
+	if (sset < ETH_SS_TEST || sset > ETH_SS_FEATURES)
+		return -EINVAL;
+
+	port = __port_cache_get(ifindex);
+	if (!port)
+		return 0;
+
+	return port->sset_count[sset];
+}
+
+static void port_cache_set_sset_count(int ifindex, int sset, int count)
+{
+	struct port_node *port;
+
+	if (sset < ETH_SS_TEST || sset > ETH_SS_FEATURES)
+		return;
+
+	port = __port_cache_get(ifindex);
+	if (port)
+		port->sset_count[sset] = count;
+}
+
+static int port_cache_get_stat_strings(int ifindex, int count, u8 *strings)
+{
+	struct port_node *port;
+	u8* stat_strings;
+	int err = -ENODATA;
+
+	memset(strings, 0, count * ETH_GSTRING_LEN);
+
+	port = __port_cache_get(ifindex);
+	if (!port)
+		return -ENODATA;
+
+	rcu_read_lock();
+	stat_strings = rcu_dereference(port->stat_strings);
+        if (stat_strings) {
+		memcpy(strings, stat_strings, count * ETH_GSTRING_LEN);
+		err = 0;
+	}
+	rcu_read_unlock();
+
+	return err;
+}
+
+static void port_cache_set_stat_strings(int ifindex, int count, u8 *strings)
+{
+	struct port_node *port;
+	u8 *old_strings, *new_strings;
+	unsigned long flags;
+
+	port = __port_cache_get(ifindex);
+	if (!port)
+		return;
+
+	new_strings = kmalloc(count * ETH_GSTRING_LEN, GFP_KERNEL);
+	if (!new_strings)
+		return;
+
+	memcpy(new_strings, strings, count * ETH_GSTRING_LEN);
+
+	spin_lock_irqsave(&port->lock, flags);
+	old_strings = port->stat_strings;
+	rcu_assign_pointer(port->stat_strings, new_strings);
+	spin_unlock_irqrestore(&port->lock, flags);
+	synchronize_rcu();
+
+	kfree(old_strings);
+}
+
+static void port_cache_clear_stats(int ifindex, int count)
+{
+	struct port_node *port;
+	unsigned long flags;
+	int i;
+
+	port = __port_cache_get(ifindex);
+	if (!port)
+		return;
+
+	spin_lock_irqsave(&port->lock, flags);
+	if (port->stat_data) {
+		if (!port->stat_data_old)
+			rcu_assign_pointer(port->stat_data_old,
+					   kzalloc(count * sizeof(u64),
+						   GFP_ATOMIC));
+		if (port->stat_data_old)
+			for (i = 0; i < count; i ++)
+				port->stat_data_old[i] = -port->stat_data[i];
+	}
+	spin_unlock_irqrestore(&port->lock, flags);
+	synchronize_rcu();
+}
+
+static void port_cache_get_stats(int ifindex, struct ethtool_stats *stats,
+				 u64* data, int clear)
+{
+	struct port_node *port;
+	__u32 count = stats->n_stats;
+	u64 *stat_data, *stat_data_old;
+	int i;
+
+	port = __port_cache_get(ifindex);
+	if (!port)
+		return;
+
+	rcu_read_lock();
+
+	stat_data = rcu_dereference(port->stat_data);
+	stat_data_old = rcu_dereference(port->stat_data_old);
+
+	if (stat_data)
+		memcpy(data, stat_data, count * sizeof(u64));
+
+	/* add in any earlier stats saved in snapshot */
+	if (stat_data_old)
+		for (i = 0; i < count; i++)
+			data[i] += stat_data_old[i];
+
+	rcu_read_unlock();
+
+	/* if requested, clear stats */
+	if (clear)
+		port_cache_clear_stats(ifindex, count);
+}
+
+static void port_cache_set_stats(int ifindex, int count, u64* data, int restart)
+{
+	struct port_node *port;
+	unsigned long flags;
+	int i;
+
+	port = __port_cache_get(ifindex);
+	if (!port)
+		return;
+
+	spin_lock_irqsave(&port->lock, flags);
+
+	/* if restarting, take snapshot of stats */
+	if (restart && port->stat_data) {
+		if (!port->stat_data_old)
+			rcu_assign_pointer(port->stat_data_old,
+					   kzalloc(count * sizeof(u64),
+						   GFP_ATOMIC));
+		if (port->stat_data_old)
+			for (i = 0; i < count; i ++)
+				port->stat_data_old[i] += port->stat_data[i];
+	}
+
+	if (!port->stat_data)
+		rcu_assign_pointer(port->stat_data,
+				   kmalloc(count * sizeof(u64),
+					   GFP_ATOMIC));
+	if (port->stat_data)
+		memcpy(port->stat_data, data, count * sizeof(u64));
+
+	spin_unlock_irqrestore(&port->lock, flags);
+	synchronize_rcu();
+}
+
+static void port_cache_clear_settings(int ifindex)
+{
+	struct port_node *port;
+	unsigned long flags;
+
+	port = __port_cache_get(ifindex);
+	if (!port)
+		return;
+
+	spin_lock_irqsave(&port->lock, flags);
+	memset(&port->settings, 0, sizeof(port->settings));
+	port->settings_valid = 0;
+	spin_unlock_irqrestore(&port->lock, flags);
+	synchronize_rcu();
+}
+
+static int port_cache_get_settings(int ifindex, struct ethtool_cmd *cmd)
+{
+	struct port_node *port;
+	int valid;
+
+	port = __port_cache_get(ifindex);
+	if (!port)
+		return -ENODATA;
+
+	rcu_read_lock();
+	valid = port->settings_valid;
+	if (valid)
+		memcpy(cmd, &port->settings, sizeof(*cmd));
+	rcu_read_unlock();
+
+	return valid ? 0 : -ENODATA;
+}
+
+static void port_cache_set_settings(int ifindex, struct ethtool_cmd *cmd)
+{
+	struct port_node *port;
+	unsigned long flags;
+
+	port = __port_cache_get(ifindex);
+	if (!port)
+		return;
+
+	spin_lock_irqsave(&port->lock, flags);
+	memcpy(&port->settings, cmd, sizeof(*cmd));
+	port->settings_valid = 1;
+	spin_unlock_irqrestore(&port->lock, flags);
+	synchronize_rcu();
+}
+
+static const struct nla_policy port_policy[PORT_ATTR_MAX + 1] = {
+	[PORT_ATTR_STATUS]		= { .type = NLA_U32 },
+	[PORT_ATTR_IFINDEX]		= { .type = NLA_U32 },
+	[PORT_ATTR_FLAGS]		= { .type = NLA_U32 },
+	[PORT_ATTR_CARRIER]		= { .type = NLA_U8 },
+	[PORT_ATTR_PHYS_ID_STATE]	= { .type = NLA_U8 },
+	[PORT_ATTR_SETTINGS]		= { .type = NLA_BINARY,
+		.len = sizeof(struct ethtool_cmd) },
+	[PORT_ATTR_PAUSE]		= { .type = NLA_BINARY,
+		.len = sizeof(struct ethtool_pauseparam) },
+	[PORT_ATTR_MODINFO]		= { .type = NLA_BINARY,
+		.len = sizeof(struct ethtool_modinfo) },
+	[PORT_ATTR_EEPROM]		= { .type = NLA_BINARY,
+		.len = sizeof(struct ethtool_eeprom) },
+	[PORT_ATTR_EEPROM_DATA]		= { .type = NLA_BINARY },
+	[PORT_ATTR_STATS]		= { .type = NLA_NESTED },
+	[PORT_ATTR_STAT]		= { .type = NLA_U32 },
+	[PORT_ATTR_STRINGS]		= { .type = NLA_NESTED },
+	[PORT_ATTR_STRING]		= { .type = NLA_STRING,
+		.len = ETH_GSTRING_LEN },
+	[PORT_ATTR_SSET]		= { .type = NLA_U32 },
+	[PORT_ATTR_SSET_COUNT]		= { .type = NLA_U32 },
+};
+
+static struct genl_family port_family = {
+	.id = GENL_ID_GENERATE,
+	.name = "port_family",
+	.version = 1,
+	.maxattr = PORT_ATTR_MAX,
+};
+
+static struct genl_multicast_group port_mcgrp = {
+	.name = "port_mc",
+};
+
+static LIST_HEAD(wq_list);
+
+struct wq {
+	wait_queue_head_t wq;
+	int seq;
+	int hit;
+	struct nlattr **attrs;
+	struct list_head list;
+};
+
+static struct wq *alloc_wq(int seq)
+{
+	struct wq *wq = kzalloc(sizeof(*wq), GFP_KERNEL);
+
+	if (!wq)
+		return wq;
+
+	init_waitqueue_head(&wq->wq);
+	INIT_LIST_HEAD(&wq->list);
+	wq->seq = seq;
+
+	return wq;
+}
+
+static struct wq *find_wq(int seq)
+{
+	struct list_head *pos;
+	struct wq *wq;
+
+	list_for_each(pos, &wq_list) {
+		wq = list_entry(pos, struct wq, list);
+		if (wq->seq == seq)
+			return wq;
+	}
+
+	return NULL;
+}
+
+static int port_wait(int seq, int wait,
+		     int (*decode)(struct nlattr **attrs,
+				   void *arg1, void *arg2),
+		     void *arg1, void *arg2)
+{
+	struct wq *wq;
+	int err, is_locked;
+
+	wq = alloc_wq(seq);
+	if (!wq)
+		return -ENOMEM;
+	list_add(&wq->list, &wq_list);
+
+	is_locked = rtnl_is_locked();
+	if (is_locked)
+		rtnl_unlock();
+
+	err = wait_event_interruptible_timeout(wq->wq, wq->hit, wait * HZ);
+
+	if (is_locked)
+		rtnl_lock();
+
+	if (err == 0) {			/* timed out */
+		err = -ETIMEDOUT;
+		goto err_out;
+	}
+
+	if (err == -ERESTARTSYS)	/* interrupted */
+		goto err_out;
+
+	if (wq->attrs[PORT_ATTR_STATUS]) {
+		err = nla_get_u32(wq->attrs[PORT_ATTR_STATUS]);
+		if (err)
+			goto err_out;
+	}
+
+	if (decode) {
+		err = decode(wq->attrs, arg1, arg2);
+		if (err)
+			goto err_out;
+	}
+
+	err = 0;
+
+err_out:
+	list_del(&wq->list);
+	kfree(wq);
+
+	return err;
+}
+
+static int port_sleep(void)
+{
+	struct wq wq = { .seq = -1 };
+	int err, is_locked;
+
+	init_waitqueue_head(&wq.wq);
+
+	is_locked = rtnl_is_locked();
+	if (is_locked)
+		rtnl_unlock();
+
+	err = wait_event_interruptible_timeout(wq.wq, wq.hit, HZ);
+
+	if (is_locked)
+		rtnl_lock();
+
+	if (err == 0)			/* timed out */
+		err = -ETIMEDOUT;
+
+	return err;
+}
+
+static int port_send(struct net_device *dev, u8 cmd, int size, int wait,
+		     int (*encode)(struct sk_buff *skb, void *arg1, void *arg2),
+		     int (*decode)(struct nlattr **attrs, void *arg1, void *arg2),
+		     void *arg1, void *arg2)
+{
+	static atomic_t next_seq;
+	struct sk_buff *skb;
+	void *hdr;
+	int seq, err = -EMSGSIZE, retry = 0;
+
+	size += nla_total_size(sizeof(u32));    /* PORT_ATTR_IFINDEX */
+
+retry:
+	skb = genlmsg_new(size, GFP_KERNEL);
+	if (!skb)
+		return -ENOMEM;
+
+	/* use unique seq for each request */
+	seq = atomic_inc_return(&next_seq);
+	hdr = genlmsg_put(skb, 0, seq, &port_family, 0, cmd);
+	if (!hdr)
+		goto err_out;
+
+	NLA_PUT_U32(skb, PORT_ATTR_IFINDEX, dev->ifindex);
+
+	if (encode) {
+		err = encode(skb, arg1, arg2);
+		if (err < 0) {
+nla_put_failure:
+			genlmsg_cancel(skb, hdr);
+			goto err_out;
+		}
+	}
+
+	genlmsg_end(skb, hdr);
+
+	err = genlmsg_multicast(skb, 0, port_mcgrp.id, GFP_KERNEL);
+	if (err < 0)
+		goto err_out_sent;
+
+	if (wait) {
+		err = port_wait(seq, wait, decode, arg1, arg2);
+		retry += wait;
+		if (err == -EAGAIN && retry < 60) {
+			port_sleep();
+			goto retry;
+		}
+	}
+
+	return err;
+
+err_out:
+	nlmsg_free(skb);
+err_out_sent:
+	return err;
+}
+
+static int port_reply(struct sk_buff *skb, struct genl_info *info)
+{
+	struct wq *wq;
+
+	rtnl_lock();
+	wq = find_wq(info->snd_seq);
+	rtnl_unlock();
+
+	if (wq) {
+		wq->hit = 1;
+		wq->attrs = info->attrs;
+		wake_up_interruptible(&wq->wq);
+	}
+
+	return 0;
+}
+
+static int port_set_stats(struct sk_buff *skb, struct genl_info *info)
+{
+	struct nlattr **attrs = info->attrs;
+	int ifindex = 0, count = 0;
+	u32 flags = 0;
+	struct nlattr *attr;
+	u64 *data;
+	int i = 0, rem, restart;
+
+	if (attrs[PORT_ATTR_IFINDEX])
+		ifindex = nla_get_u32(attrs[PORT_ATTR_IFINDEX]);
+
+	if (attrs[PORT_ATTR_FLAGS])
+		flags = nla_get_u32(attrs[PORT_ATTR_FLAGS]);
+
+	restart = !!(flags & PORT_ATTR_FLAG_STAT_RESTART);
+
+	if (attrs[PORT_ATTR_SSET_COUNT])
+		count = nla_get_u32(attrs[PORT_ATTR_SSET_COUNT]);
+
+	data = kzalloc(count * sizeof(u64), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	if (attrs[PORT_ATTR_STATS])
+		nla_for_each_nested(attr, attrs[PORT_ATTR_STATS], rem)
+			if (i < count)
+				data[i++] = nla_get_u64(attr);
+
+	port_cache_set_sset_count(ifindex, ETH_SS_STATS, count);
+	port_cache_set_stats(ifindex, count, data, restart);
+
+	kfree(data);
+
+	return 0;
+}
+
+static int port_set_settings_push(struct sk_buff *skb, struct genl_info *info)
+{
+	struct nlattr **attrs = info->attrs;
+	struct ethtool_cmd cmd = { 0, };
+	int ifindex = 0;
+
+	if (attrs[PORT_ATTR_IFINDEX])
+		ifindex = nla_get_u32(attrs[PORT_ATTR_IFINDEX]);
+
+	if (attrs[PORT_ATTR_SETTINGS])
+		memcpy(&cmd, nla_data(attrs[PORT_ATTR_SETTINGS]),
+		       sizeof(struct ethtool_cmd));
+
+	if (ifindex <= 0)
+		return -ENOTSUPP;
+
+	port_cache_set_settings(ifindex, &cmd);
+
+	return 0;
+}
+
+static int port_set_carrier(struct sk_buff *skb, struct genl_info *info)
+{
+	struct nlattr **attrs = info->attrs;
+	struct net_device *dev;
+	struct net *net;
+	int ifindex = 0, carrier = 0;
+
+	if (attrs[PORT_ATTR_IFINDEX])
+		ifindex = nla_get_u32(attrs[PORT_ATTR_IFINDEX]);
+
+	if (attrs[PORT_ATTR_CARRIER])
+		carrier = nla_get_u8(attrs[PORT_ATTR_CARRIER]);
+
+	if (ifindex <= 0)
+		return -ENOTSUPP;
+
+	net = get_net(current->nsproxy->net_ns);
+
+	dev = dev_get_by_index(net, ifindex);
+	if (dev) {
+		if (carrier)
+			netif_carrier_on(dev);
+		else
+			netif_carrier_off(dev);
+		dev_put(dev);
+	}
+
+	put_net(net);
+	return 0;
+}
+
+static struct genl_ops port_ops[] = {
+	{
+		.cmd = PORT_CMD_REPLY,
+		.policy = port_policy,
+		.doit = port_reply,
+	},
+	{
+		.cmd = PORT_CMD_SET_STATS,
+		.policy = port_policy,
+		.doit = port_set_stats,
+	},
+	{
+		.cmd = PORT_CMD_SET_SETTINGS,
+		.policy = port_policy,
+		.doit = port_set_settings_push,
+	},
+	{
+		.cmd = PORT_CMD_SET_CARRIER,
+		.policy = port_policy,
+		.doit = port_set_carrier,
+	},
+};
+
+static int encode_struct(struct sk_buff *skb, int attrtype,
+			 size_t size, void *src)
+{
+	NLA_PUT(skb, attrtype, size, src);
+	return 0;
+nla_put_failure:
+	return -EMSGSIZE;
+}
+
+static int decode_struct(struct nlattr *attr, size_t size, void *dst)
+{
+	if (!attr)
+		return -ENOSYS;
+	memcpy(dst, nla_data(attr), size);
+	return 0;
+
+}
+
+int port_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
+{
+	int err, size = 0, wait = 20;
+
+	int decode(struct nlattr **attrs, void *arg1, void *arg2)
+	{
+		return decode_struct(attrs[PORT_ATTR_SETTINGS],
+				     sizeof(struct ethtool_cmd), arg1);
+	}
+
+	err = port_cache_get_settings(dev->ifindex, cmd);
+        if (!err)
+		return 0;
+
+	err = port_send(dev, PORT_CMD_GET_SETTINGS, size, wait,
+			NULL, decode, cmd, NULL);
+	if (err)
+		return err;
+
+	port_cache_set_settings(dev->ifindex, cmd);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(port_get_settings);
+
+int port_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
+{
+	int size = nla_total_size(sizeof(struct ethtool_cmd));
+	int wait = 20;
+
+	int encode(struct sk_buff *skb, void *arg1, void *arg2)
+	{
+		return encode_struct(skb, PORT_ATTR_SETTINGS,
+				     sizeof(struct ethtool_cmd), arg1);
+	}
+
+	port_cache_clear_settings(dev->ifindex);
+
+	return port_send(dev, PORT_CMD_SET_SETTINGS, size, wait,
+			 encode, NULL, cmd, NULL);
+}
+EXPORT_SYMBOL_GPL(port_set_settings);
+
+void port_get_pauseparam(struct net_device *dev,
+			 struct ethtool_pauseparam *pause)
+{
+	int size = 0, wait = 1;
+
+	int decode(struct nlattr **attrs, void *arg1, void *arg2)
+	{
+		return decode_struct(attrs[PORT_ATTR_PAUSE],
+				     sizeof(struct ethtool_pauseparam),
+				     arg1);
+	}
+
+	port_send(dev, PORT_CMD_GET_PAUSE, size, wait,
+		  NULL, decode, pause, NULL);
+}
+EXPORT_SYMBOL_GPL(port_get_pauseparam);
+
+int port_set_pauseparam(struct net_device *dev,
+			struct ethtool_pauseparam *pause)
+{
+	int size = nla_total_size(sizeof(struct ethtool_pauseparam));
+	int wait = 1;
+
+	int encode(struct sk_buff *skb, void *arg1, void *arg2)
+	{
+		return encode_struct(skb, PORT_ATTR_PAUSE,
+				     sizeof(struct ethtool_pauseparam),
+				     arg1);
+	}
+
+	return port_send(dev, PORT_CMD_SET_PAUSE, size, wait,
+			 encode, NULL, pause, NULL);
+}
+EXPORT_SYMBOL_GPL(port_set_pauseparam);
+
+void port_get_ethtool_stats(struct net_device *dev,
+			    struct ethtool_stats *stats,
+			    u64 *data)
+{
+	memset(data, 0, stats->n_stats * sizeof(u64));
+	port_cache_get_stats(dev->ifindex, stats, data, 0);
+}
+EXPORT_SYMBOL_GPL(port_get_ethtool_stats);
+
+void port_get_ethtool_stats_clear(struct net_device *dev,
+				  struct ethtool_stats *stats,
+				  u64 *data)
+{
+	memset(data, 0, stats->n_stats * sizeof(u64));
+	port_cache_get_stats(dev->ifindex, stats, data, 1);
+}
+EXPORT_SYMBOL_GPL(port_get_ethtool_stats_clear);
+
+void port_get_strings(struct net_device *dev, u32 stringset, u8 *data)
+{
+	int size = nla_total_size(sizeof(u32)), wait = 1;
+	int err, count;
+
+	int encode(struct sk_buff *skb, void *arg1, void *arg2)
+	{
+		u32 *stringset = arg1;
+		NLA_PUT_U32(skb, PORT_ATTR_SSET, *stringset);
+		return 0;
+	nla_put_failure:
+		return -EMSGSIZE;
+	}
+
+	int decode(struct nlattr **attrs, void *arg1, void *arg2)
+	{
+		u8 *data = arg2;
+		struct nlattr *attr;
+		int rem;
+		if (!attrs[PORT_ATTR_STRINGS])
+			return -EINVAL;
+		nla_for_each_nested(attr, attrs[PORT_ATTR_STRINGS], rem) {
+			memcpy(data, nla_data(attr), ETH_GSTRING_LEN);
+			data += ETH_GSTRING_LEN;
+		}
+		return 0;
+	}
+
+	count = port_cache_get_sset_count(dev->ifindex, stringset);
+	if (count <= 0)
+		return;
+
+	err = port_cache_get_stat_strings(dev->ifindex, count, data);
+	if (!err)
+		return;
+
+	err = port_send(dev, PORT_CMD_GET_STRINGS, size, wait,
+			encode, decode, &stringset, data);
+	if (err)
+		return;
+
+	port_cache_set_stat_strings(dev->ifindex, count, data);
+}
+EXPORT_SYMBOL_GPL(port_get_strings);
+
+int port_get_sset_count(struct net_device *dev, int sset)
+{
+	int size = nla_total_size(sizeof(u32)), wait = 1;
+	int count;
+
+	int encode(struct sk_buff *skb, void *arg1, void *arg2)
+	{
+		int *sset = arg1;
+		NLA_PUT_U32(skb, PORT_ATTR_SSET, *sset);
+		return 0;
+	nla_put_failure:
+		return -EMSGSIZE;
+	}
+
+	int decode(struct nlattr **attrs, void *arg1, void *arg2)
+	{
+		if (!attrs[PORT_ATTR_SSET_COUNT])
+			return -EINVAL;
+		return nla_get_u32(attrs[PORT_ATTR_SSET_COUNT]);
+	}
+
+	count = port_cache_get_sset_count(dev->ifindex, sset);
+	if (count >= 0)
+		return count;
+
+	count = port_send(dev, PORT_CMD_GET_SSET_COUNT, size, wait,
+			  encode, decode, &sset, NULL);
+	if (count < 0)
+		return count;
+
+	port_cache_set_sset_count(dev->ifindex, sset, count);
+
+	return count;
+}
+EXPORT_SYMBOL_GPL(port_get_sset_count);
+
+int port_set_phys_id(struct net_device *dev, enum ethtool_phys_id_state state)
+{
+	int size = nla_total_size(sizeof(u8));
+	int wait = 0;
+
+	int encode(struct sk_buff *skb, void *arg1, void *arg2)
+	{
+		enum ethtool_phys_id_state *state = arg1;
+		NLA_PUT_U8(skb, PORT_ATTR_PHYS_ID_STATE, *state);
+		return 0;
+	nla_put_failure:
+		return -EMSGSIZE;
+	}
+
+	if (state == ETHTOOL_ID_ACTIVE)
+		return 1;	/* 1 sec period */
+
+	return port_send(dev, PORT_CMD_SET_PHYS_ID_STATE, size, wait,
+			 encode, NULL, &state, NULL);
+}
+EXPORT_SYMBOL_GPL(port_set_phys_id);
+
+int port_get_module_info(struct net_device *dev, struct ethtool_modinfo *info)
+{
+	int size = 0, wait = 30;
+
+	int decode(struct nlattr **attrs, void *arg1, void *arg2)
+	{
+		return decode_struct(attrs[PORT_ATTR_MODINFO],
+				     sizeof(struct ethtool_modinfo), arg1);
+	}
+
+	return port_send(dev, PORT_CMD_GET_MODULE_INFO, size, wait,
+			 NULL, decode, info, NULL);
+}
+EXPORT_SYMBOL_GPL(port_get_module_info);
+
+int port_get_module_eeprom(struct net_device *dev,
+			   struct ethtool_eeprom *eeprom, u8 *data)
+{
+	int size = nla_total_size(sizeof(struct ethtool_eeprom));
+	int wait = 30;
+
+	int encode(struct sk_buff *skb, void *arg1, void *arg2)
+	{
+		return encode_struct(skb, PORT_ATTR_EEPROM,
+				     sizeof(struct ethtool_eeprom),
+				     arg1);
+	}
+
+	int decode(struct nlattr **attrs, void *arg1, void *arg2)
+	{
+		if (!attrs[PORT_ATTR_EEPROM_DATA])
+			return -EINVAL;
+		memcpy(arg2, nla_data(attrs[PORT_ATTR_EEPROM_DATA]),
+		       nla_len(attrs[PORT_ATTR_EEPROM_DATA]));
+		return 0;
+	}
+
+	return port_send(dev, PORT_CMD_GET_MODULE_EEPROM, size, wait,
+			 encode, decode, eeprom, data);
+}
+EXPORT_SYMBOL_GPL(port_get_module_eeprom);
+
+static int __init port_init(void)
+{
+	int err;
+
+	hash_init(port_cache);
+
+	err = genl_register_family_with_ops(&port_family,
+		port_ops, ARRAY_SIZE(port_ops));
+	if (err)
+		return err;
+	printk(KERN_DEBUG "port family register OK\n");
+
+	err = genl_register_mc_group(&port_family,
+		&port_mcgrp);
+	if (err)
+		goto err;
+	printk(KERN_DEBUG "port mc group register OK\n");
+
+	return 0;
+err:
+	genl_unregister_family(&port_family);
+	return err;
+}
+late_initcall(port_init);
