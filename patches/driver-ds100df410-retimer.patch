Driver for DS100DF410 Low Power 10GbE Quad Channel Retimer/Equalizer

diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 846aab1..41989b0 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -527,6 +527,27 @@ config EDA_DEF_ALIGN
 	help
 	  Default alignment of the memory region. Default is 1MB.
 
+config RETIMER_CLASS
+	tristate "Retimer Class support"
+	depends on SYSFS
+	default y
+	help
+	  Creates a hardware class in sysfs called "retimer_dev",
+	  providing a common place to register RETIMER devices.
+
+	  This support can also be built as a module.  If so, the module
+	  will be called retimer_class.
+
+config DS100DF410
+	tristate "DS100DF410 Low Power 10GbE Quad Channel Retimer"
+	depends on I2C && SYSFS
+	help
+	  If you say yes here you get support for the DS100DF410
+	  Low Power 10GbE Quad Channel Retimer.
+
+	  This driver can also be built as a module.  If so, the module
+	  will be called ds100df410.
+
 source "drivers/misc/c2port/Kconfig"
 source "drivers/misc/eeprom/Kconfig"
 source "drivers/misc/cb710/Kconfig"
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index cf09aa8..ad70876 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -49,3 +49,5 @@ obj-y				+= carma/
 obj-$(CONFIG_USB_SWITCH_FSA9480) += fsa9480.o
 obj-$(CONFIG_ALTERA_STAPL)	+=altera-stapl/
 obj-$(CONFIG_EARLY_DMA_ALLOC)	+= early_dma_alloc.o
+obj-$(CONFIG_RETIMER_CLASS)	+= retimer_class.o
+obj-$(CONFIG_DS100DF410)        += ds100df410.o
diff --git a/drivers/misc/ds100df410.c b/drivers/misc/ds100df410.c
new file mode 100644
index 0000000..b626111
--- /dev/null
+++ b/drivers/misc/ds100df410.c
@@ -0,0 +1,290 @@
+/*
+ *  ds100df410.c - I2c client driver to manage DS100DF410
+ *  DS100DF410 Low Power 10GbE Quad Channel Retimer
+ *
+ *  Copyright (C) 2014 Cumulus Networks, Inc.
+ *  Author: Puneet Shenoy <puneet@cumulusnetworks.com>
+ *
+ *  Ideas and structure regarding introducing the class device graciously borrowed
+ *  from the eeprom sysfs/class support by:
+ *  Copyright (C) 2013 CumulusNetworks, Inc.
+ *  Author: Curt Brune <curt@cumulusnetworks.com
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/i2c.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/kdev_t.h>
+#include <linux/idr.h>
+#include <linux/gfp.h>
+#include <linux/spinlock.h>
+
+#ifdef CONFIG_RETIMER_CLASS
+#include <linux/retimer_class.h>
+#endif
+
+#define DS100DF410_DRV_NAME             "ds100df410"
+#define DRIVER_VERSION                  "1.0"
+
+#define DS100DF410_CDR_RST_REG          0x0a
+#define DS100DF410_TAP_DEM_REG          0x15
+#define DS100DF410_PFD_PRBS_DFE_REG     0x1e
+#define DS100DF410_DRV_SEL_VOD_REG      0x2d
+#define DS100DF410_ADAPT_EQ_SM_REG      0x31
+#define DS100DF410_VEO_CLK_CDR_CAP_REG  0x36
+#define DS100DF410_CHANNELS_REG         0xff
+
+struct ds100df410_data {
+	struct i2c_client *client;
+
+#ifdef CONFIG_RETIMER_CLASS
+	struct device *retimer_dev;
+#endif
+	struct mutex lock;
+};
+
+static u32 ds100df410_read(struct device *dev, u8 reg, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	u32 ret = i2c_smbus_read_byte_data(client, reg);
+
+	return sprintf(buf, "%d\n", ret);
+}
+
+static u32 ds100df410_write(struct device *dev, u8 reg, const char *buf,
+			    size_t count)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	unsigned long val;
+	int ret;
+
+	if (strict_strtoul(buf, 0, &val) < 0)
+		return -EINVAL;
+
+	ret = i2c_smbus_write_byte_data(client, reg, (u8)val);
+	if (ret < 0)
+		return ret;
+
+	return count;
+}
+
+static ssize_t ds100df410_show_cdr_rst(struct device *dev,
+					struct device_attribute *attr,
+					char *buf)
+{
+	return ds100df410_read(dev, DS100DF410_CDR_RST_REG, buf);
+}
+
+static ssize_t ds100df410_store_cdr_rst(struct device *dev,
+					 struct device_attribute *attr,
+					 const char *buf, size_t count)
+{
+	return ds100df410_write(dev, DS100DF410_CDR_RST_REG, buf, count);
+}
+
+static ssize_t ds100df410_show_tap_dem(struct device *dev,
+				       struct device_attribute *attr,
+				       char *buf)
+{
+	return ds100df410_read(dev, DS100DF410_TAP_DEM_REG, buf);
+}
+
+static ssize_t ds100df410_store_tap_dem(struct device *dev,
+					struct device_attribute *attr,
+					const char *buf, size_t count)
+{
+	return ds100df410_write(dev, DS100DF410_TAP_DEM_REG, buf, count);
+}
+
+static ssize_t ds100df410_show_pfd_prbs_dfe(struct device *dev,
+					    struct device_attribute *attr,
+					    char *buf)
+{
+	return ds100df410_read(dev, DS100DF410_PFD_PRBS_DFE_REG, buf);
+}
+
+static ssize_t ds100df410_store_pfd_prbs_dfe(struct device *dev,
+					     struct device_attribute *attr,
+					     const char *buf, size_t count)
+{
+	return ds100df410_write(dev, DS100DF410_PFD_PRBS_DFE_REG, buf, count);
+}
+
+static ssize_t ds100df410_show_drv_sel_vod(struct device *dev,
+					   struct device_attribute *attr,
+					   char *buf)
+{
+	return ds100df410_read(dev, DS100DF410_DRV_SEL_VOD_REG, buf);
+}
+
+static ssize_t ds100df410_store_drv_sel_vod(struct device *dev,
+					    struct device_attribute *attr,
+					    const char *buf, size_t count)
+{
+	return ds100df410_write(dev, DS100DF410_DRV_SEL_VOD_REG, buf, count);
+}
+
+static ssize_t ds100df410_show_adapt_eq_sm(struct device *dev,
+					   struct device_attribute *attr,
+					   char *buf)
+{
+	return ds100df410_read(dev, DS100DF410_ADAPT_EQ_SM_REG, buf);
+}
+
+static ssize_t ds100df410_store_adapt_eq_sm(struct device *dev,
+					    struct device_attribute *attr,
+					    const char *buf, size_t count)
+{
+	return ds100df410_write(dev, DS100DF410_ADAPT_EQ_SM_REG, buf, count);
+}
+
+static ssize_t ds100df410_show_veo_clk_cdr_cap(struct device *dev,
+					       struct device_attribute *attr,
+					       char *buf)
+{
+	return ds100df410_read(dev, DS100DF410_VEO_CLK_CDR_CAP_REG, buf);
+}
+
+static ssize_t ds100df410_store_veo_clk_cdr_cap(struct device *dev,
+						struct device_attribute *attr,
+						const char *buf, size_t count)
+{
+        return ds100df410_write(dev, DS100DF410_VEO_CLK_CDR_CAP_REG, buf, count);
+}
+
+static ssize_t ds100df410_show_channels(struct device *dev,
+					struct device_attribute *attr,
+					char *buf)
+{
+	return ds100df410_read(dev, DS100DF410_CHANNELS_REG, buf);
+}
+
+static ssize_t ds100df410_store_channels(struct device *dev,
+					 struct device_attribute *attr,
+					 const char *buf, size_t count)
+{
+        return ds100df410_write(dev, DS100DF410_CHANNELS_REG, buf, count);
+}
+
+static DEVICE_ATTR(cdr_rst, S_IWUSR | S_IRUGO,
+		   ds100df410_show_cdr_rst, ds100df410_store_cdr_rst);
+static DEVICE_ATTR(tap_dem, S_IWUSR | S_IRUGO,
+		   ds100df410_show_tap_dem, ds100df410_store_tap_dem);
+static DEVICE_ATTR(pfd_prbs_dfe, S_IWUSR | S_IRUGO,
+		   ds100df410_show_pfd_prbs_dfe, ds100df410_store_pfd_prbs_dfe);
+static DEVICE_ATTR(drv_sel_vod, S_IWUSR | S_IRUGO,
+		   ds100df410_show_drv_sel_vod, ds100df410_store_drv_sel_vod);
+static DEVICE_ATTR(adapt_eq_sm, S_IWUSR | S_IRUGO,
+		   ds100df410_show_adapt_eq_sm, ds100df410_store_adapt_eq_sm);
+static DEVICE_ATTR(veo_clk_cdr_cap, S_IWUSR | S_IRUGO,
+		   ds100df410_show_veo_clk_cdr_cap,
+		   ds100df410_store_veo_clk_cdr_cap);
+static DEVICE_ATTR(channels, S_IWUSR | S_IRUGO,
+		   ds100df410_show_channels, ds100df410_store_channels);
+
+static struct attribute *ds100df410_attributes[] = {
+	&dev_attr_cdr_rst.attr,
+	&dev_attr_tap_dem.attr,
+	&dev_attr_pfd_prbs_dfe.attr,
+	&dev_attr_drv_sel_vod.attr,
+	&dev_attr_adapt_eq_sm.attr,
+	&dev_attr_veo_clk_cdr_cap.attr,
+	&dev_attr_channels.attr,
+	NULL
+};
+
+static const struct attribute_group ds100df410_attr_group = {
+	.attrs = ds100df410_attributes,
+};
+
+static int __devinit ds100df410_probe(struct i2c_client *client,
+				    const struct i2c_device_id *id)
+{
+	struct i2c_adapter *adapter = to_i2c_adapter(client->dev.parent);
+	struct ds100df410_data *data;
+	int err = 0;
+
+	if (!i2c_check_functionality(adapter, I2C_FUNC_SMBUS_BYTE)) {
+		return -EIO;
+	}
+
+	data = kzalloc(sizeof(struct ds100df410_data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+	data->client = client;
+	mutex_init(&data->lock);
+
+	/* register sysfs hooks */
+	err = sysfs_create_group(&client->dev.kobj, &ds100df410_attr_group);
+	if (err)
+		goto exit_kfree;
+
+
+#ifdef CONFIG_RETIMER_CLASS
+	data->retimer_dev = retimer_device_register(&client->dev);
+	if (IS_ERR(data->retimer_dev)) {
+		dev_err(&client->dev, "error registering retimer device.\n");
+		err = PTR_ERR(data->retimer_dev);
+		goto exit_kfree;
+	}
+#endif
+
+	i2c_set_clientdata(client, data);
+	return 0;
+exit_kfree:
+	kfree(data);
+	return err;
+}
+
+static int __devexit ds100df410_remove(struct i2c_client *client)
+{
+	struct ds100df410_data *data;
+
+	data = i2c_get_clientdata(client);
+	sysfs_remove_group(&client->dev.kobj, &ds100df410_attr_group);
+
+#ifdef CONFIG_RETIMER_CLASS
+	retimer_device_unregister(data->retimer_dev);
+#endif
+
+	kfree(data);
+	return 0;
+}
+
+static const struct i2c_device_id ds100df410_id[] = {
+	{ "ds100df410", 0 },
+	{}
+};
+MODULE_DEVICE_TABLE(i2c, ds100df410_id);
+
+static struct i2c_driver ds100df410_driver = {
+	.driver = {
+		.name	= DS100DF410_DRV_NAME,
+	},
+	.probe	= ds100df410_probe,
+	.remove	= __devexit_p(ds100df410_remove),
+	.id_table = ds100df410_id,
+};
+
+module_i2c_driver(ds100df410_driver);
+MODULE_AUTHOR("Puneet Shenoy <puneet@cumulusnetworks.com>");
+MODULE_DESCRIPTION("I2C client for DS100DF410 10GE Quad Core Retimer");
+MODULE_LICENSE("GPL v2");
+MODULE_VERSION(DRIVER_VERSION);
diff --git a/drivers/misc/retimer_class.c b/drivers/misc/retimer_class.c
new file mode 100644
index 0000000..176df29
--- /dev/null
+++ b/drivers/misc/retimer_class.c
@@ -0,0 +1,159 @@
+/*
+ * retimer_class.c
+ *
+ * This file defines the sysfs class "retimer", for use by RETIMER
+ * drivers.
+ *
+ * Copyright (C) 2014 Cumulus Networks, Inc.
+ * Author: Puneet Shenoy <puneet@cumulusnetworks.com>
+ *
+ * Ideas and structure graciously borrowed from the eeprom_class class:
+ * Copyright (C) 2013 Curt Brune <curt@cumulusnetworks.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/kdev_t.h>
+#include <linux/idr.h>
+#include <linux/retimer_class.h>
+#include <linux/gfp.h>
+#include <linux/spinlock.h>
+#include <linux/pci.h>
+
+/* Root retimer "class" object (corresponds to '/<sysfs>/class/retimer_dev/') */
+static struct class *retimer_class;
+
+#define RETIMER_CLASS_NAME "retimer_dev"
+#define RETIMER_ID_PREFIX "retimer"
+#define RETIMER_ID_FORMAT RETIMER_ID_PREFIX "%d"
+
+static DEFINE_IDA(retimer_ida);
+
+/**
+ * retimer_device_register - register w/ retimer class
+ * @dev: the device to register
+ *
+ * retimer_device_unregister() must be called when the device is no
+ * longer needed.
+ *
+ * Creates a new retimer class device that is a child of @dev.  Also
+ * creates a symlink in /<sysfs>/class/retimer_dev/retimer[N] pointing
+ * to the new device.
+ *
+ * Returns the pointer to the new device.
+ */
+struct device *retimer_device_register(struct device *dev)
+{
+	struct device *retimer_dev;
+	int id;
+
+	id = ida_simple_get(&retimer_ida, 0, 0, GFP_KERNEL);
+	if (id < 0)
+		return ERR_PTR(id);
+
+	retimer_dev = device_create(retimer_class, dev, MKDEV(0, 0), NULL,
+				   RETIMER_ID_FORMAT, id);
+
+	if (IS_ERR(retimer_dev))
+		ida_simple_remove(&retimer_ida, id);
+
+	return retimer_dev;
+}
+
+/**
+ * retimer_device_unregister - removes the previously registered class device
+ *
+ * @dev: the class device to destroy
+ */
+void retimer_device_unregister(struct device *dev)
+{
+	int id;
+
+	if (likely(sscanf(dev_name(dev), RETIMER_ID_FORMAT, &id) == 1)) {
+		device_unregister(dev);
+		ida_simple_remove(&retimer_ida, id);
+	} else
+		dev_dbg(dev->parent,
+			"retimer_device_unregister() failed: bad class ID!\n");
+}
+
+/**
+ * Each member of the retimer class exports a sysfs file called
+ * "label", containing the label property from the corresponding
+ * device tree node.
+ *
+ *  Userspace can use the label to identify what the RETIMER is for.
+ */
+static ssize_t label_show(struct device *dev,
+			  struct device_attribute *attr,
+			  char *buf)
+{
+	const char* cp = NULL;
+	int len = 0;
+
+	/*
+	 * The class device is a child of the original device,
+	 * i.e. dev->parent points to the original device.
+	 */
+	if (dev->parent && dev->parent->of_node)
+		cp = of_get_property(dev->parent->of_node, "label", &len);
+
+	if ((cp == NULL) || (len == 0)) {
+		cp = "unknown";
+		len = strlen(cp) + 1;
+	}
+
+	strncpy(buf, cp, len - 1);
+	buf[len - 1] = '\n';
+	buf[len] = '\0';
+
+	return len;
+}
+
+struct device_attribute retimer_class_dev_attrs[] = {
+	__ATTR_RO(label),
+	__ATTR_NULL,
+};
+
+static int __init retimer_init(void)
+{
+	retimer_class = class_create(THIS_MODULE, RETIMER_CLASS_NAME);
+	if (IS_ERR(retimer_class)) {
+		pr_err("couldn't create sysfs class\n");
+		return PTR_ERR(retimer_class);
+	}
+
+	retimer_class->dev_attrs = retimer_class_dev_attrs;
+
+	return 0;
+}
+
+static void __exit retimer_exit(void)
+{
+	class_destroy(retimer_class);
+}
+
+subsys_initcall(retimer_init);
+module_exit(retimer_exit);
+
+EXPORT_SYMBOL_GPL(retimer_device_register);
+EXPORT_SYMBOL_GPL(retimer_device_unregister);
+
+MODULE_AUTHOR("Puneet Shenoy <puneet@cumulusnetworks.com>");
+MODULE_DESCRIPTION("retimer sysfs/class support");
+MODULE_LICENSE("GPL v2");
diff --git a/include/linux/retimer_class.h b/include/linux/retimer_class.h
new file mode 100644
index 0000000..6f37318
--- /dev/null
+++ b/include/linux/retimer_class.h
@@ -0,0 +1,35 @@
+/*
+ * retimer_class.c
+ *
+ * This file exports interface functions for the sysfs class "retimer",
+ * for use by RETIMER drivers.
+ *
+ * Copyright (C) 2014 Cumulus Networks, Inc.
+ * Author: Puneet Shenoy <puneet@cumulusnetworks.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#ifndef RETIMER_CLASS_H__
+#define RETIMER_CLASS_H__
+
+#include <linux/device.h>
+#include <linux/err.h>
+
+struct device *retimer_device_register(struct device *dev);
+
+void retimer_device_unregister(struct device *dev);
+
+#endif /* RETIMER_CLASS_H__ */
