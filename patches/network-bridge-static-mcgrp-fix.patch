fixes for "bridge mdb add" command

diff --git a/net/bridge/br_if.c b/net/bridge/br_if.c
index a73bcd5..c60121c 100644
--- a/net/bridge/br_if.c
+++ b/net/bridge/br_if.c
@@ -141,7 +141,7 @@ static void del_nbp(struct net_bridge_port *p)
 	br_ifinfo_notify(RTM_DELLINK, p);
 
 	br_fdb_delete_by_port(br, p, 1);
-
+	br_multicast_del_port(p);
 	list_del_rcu(&p->list);
 
 	dev->priv_flags &= ~IFF_BRIDGE_PORT;
@@ -151,8 +151,6 @@ static void del_nbp(struct net_bridge_port *p)
 
 	netdev_set_master(dev, NULL);
 
-	br_multicast_del_port(p);
-
 	kobject_uevent(&p->kobj, KOBJ_REMOVE);
 	kobject_del(&p->kobj);
 
@@ -173,6 +171,7 @@ void br_dev_delete(struct net_device *dev, struct list_head *head)
 
 	br_fdb_delete_by_port(br, NULL, 1);
 
+	br_multicast_dev_del(br);
 	del_timer_sync(&br->gc_timer);
 
 	br_sysfs_delbr(br->dev);
diff --git a/net/bridge/br_mdb.c b/net/bridge/br_mdb.c
index 3807e00..99ab620 100644
--- a/net/bridge/br_mdb.c
+++ b/net/bridge/br_mdb.c
@@ -226,7 +226,7 @@ errout:
 }
 
 void br_mdb_notify(struct net_device *dev, struct net_bridge_port *port,
-		   struct br_ip *group, int type)
+		   struct br_ip *group, int type, u8 state)
 {
 	struct br_mdb_entry entry;
 
@@ -236,6 +236,7 @@ void br_mdb_notify(struct net_device *dev, struct net_bridge_port *port,
 #if IS_ENABLED(CONFIG_IPV6)
 	entry.addr.u.ip6 = group->u.ip6;
 #endif
+	entry.state = state;
 	__br_mdb_notify(dev, &entry, type);
 }
 
@@ -383,6 +384,7 @@ static int br_mdb_add_group(struct net_bridge *br, struct net_bridge_port *port,
 	struct net_bridge_port_group __rcu **pp;
 	struct net_bridge_mdb_htable *mdb;
 	int err;
+	unsigned long now = jiffies;
 
 	mdb = mlock_dereference(br->mdb, br);
 	mp = br_mdb_ip_get(mdb, group);
@@ -406,6 +408,8 @@ static int br_mdb_add_group(struct net_bridge *br, struct net_bridge_port *port,
 	if (unlikely(!p))
 		return -ENOMEM;
 	rcu_assign_pointer(*pp, p);
+	if (state == MDB_TEMPORARY)
+		mod_timer(&p->timer, now + br->multicast_membership_interval);
 
 	return 0;
 }
diff --git a/net/bridge/br_multicast.c b/net/bridge/br_multicast.c
index 206e6c9..4feb18a 100644
--- a/net/bridge/br_multicast.c
+++ b/net/bridge/br_multicast.c
@@ -40,6 +40,7 @@
 static void br_multicast_start_querier(struct net_bridge *br);
 static void br_multicast_add_router(struct net_bridge *br,
 				struct net_bridge_port *port);
+static void br_multicast_del_grps(struct net_bridge *br);
 
 unsigned int br_mdb_rehash_seq;
 
@@ -265,7 +266,7 @@ static void br_multicast_del_pg(struct net_bridge *br,
 		if (p != pg)
 			continue;
 
-		br_mdb_notify(br->dev, p->port, &pg->addr, RTM_DELMDB);
+		br_mdb_notify(br->dev, p->port, &pg->addr, RTM_DELMDB, pg->state);
 		rcu_assign_pointer(*pp, p->next);
 		hlist_del_init(&p->mglist);
 		del_timer(&p->timer);
@@ -547,6 +548,7 @@ static struct net_bridge_mdb_entry *br_multicast_get_group(
 			err = -E2BIG;
 disable:
 			br->multicast_disabled = 1;
+			br_multicast_del_grps(br);
 			goto err;
 		}
 	}
@@ -690,7 +692,7 @@ static int br_multicast_add_group(struct net_bridge *br,
 	if (unlikely(!p))
 		goto err;
 	rcu_assign_pointer(*pp, p);
-	br_mdb_notify(br->dev, port, group, RTM_NEWMDB);
+	br_mdb_notify(br->dev, port, group, RTM_NEWMDB, MDB_TEMPORARY);
 
 found:
 	mod_timer(&p->timer, now + br->multicast_membership_interval);
@@ -851,6 +853,16 @@ void br_multicast_add_port(struct net_bridge_port *port)
 
 void br_multicast_del_port(struct net_bridge_port *port)
 {
+	struct net_bridge *br = port->br;
+	struct net_bridge_port_group *pg;
+	struct hlist_node *p, *n;
+
+	spin_lock_bh(&br->multicast_lock);
+	hlist_for_each_entry_safe(pg, p, n, &port->mglist, mglist) {
+		if (pg->state == MDB_PERMANENT)
+			br_multicast_del_pg(br, pg);
+	}
+	spin_unlock_bh(&br->multicast_lock);
 	del_timer_sync(&port->multicast_router_timer);
 }
 
@@ -886,8 +898,10 @@ void br_multicast_disable_port(struct net_bridge_port *port)
 	struct hlist_node *p, *n;
 
 	spin_lock(&br->multicast_lock);
-	hlist_for_each_entry_safe(pg, p, n, &port->mglist, mglist)
-		br_multicast_del_pg(br, pg);
+	hlist_for_each_entry_safe(pg, p, n, &port->mglist, mglist) {
+		if (pg->state == MDB_TEMPORARY)
+			br_multicast_del_pg(br, pg);
+	}
 
 	if (!hlist_unhashed(&port->rlist)) {
 		hlist_del_init_rcu(&port->rlist);
@@ -1682,16 +1696,19 @@ void br_multicast_open(struct net_bridge *br)
 
 void br_multicast_stop(struct net_bridge *br)
 {
+	del_timer_sync(&br->multicast_router_timer);
+	del_timer_sync(&br->multicast_querier_timer);
+	del_timer_sync(&br->multicast_query_timer);
+}
+
+void br_multicast_dev_del(struct net_bridge *br)
+{
 	struct net_bridge_mdb_htable *mdb;
 	struct net_bridge_mdb_entry *mp;
 	struct hlist_node *p, *n;
 	u32 ver;
 	int i;
 
-	del_timer_sync(&br->multicast_router_timer);
-	del_timer_sync(&br->multicast_querier_timer);
-	del_timer_sync(&br->multicast_query_timer);
-
 	spin_lock_bh(&br->multicast_lock);
 	mdb = mlock_dereference(br->mdb, br);
 	if (!mdb)
@@ -1721,7 +1738,6 @@ void br_multicast_stop(struct net_bridge *br)
 out:
 	spin_unlock_bh(&br->multicast_lock);
 }
-
 int br_multicast_set_router(struct net_bridge *br, unsigned long val)
 {
 	int err = -ENOENT;
@@ -1813,6 +1829,18 @@ static void br_multicast_start_querier(struct net_bridge *br)
 	}
 }
 
+static void br_multicast_del_grps(struct net_bridge *br)
+{
+	struct net_bridge_port *port, *bn;
+	struct net_bridge_port_group *pg;
+	struct hlist_node *p, *n;
+
+	list_for_each_entry_safe(port, bn, &br->port_list, list) {
+		hlist_for_each_entry_safe(pg, p, n, &port->mglist, mglist)
+			br_multicast_del_pg(br, pg);
+	}
+}
+
 int br_multicast_toggle(struct net_bridge *br, unsigned long val)
 {
 	int err = 0;
@@ -1823,8 +1851,10 @@ int br_multicast_toggle(struct net_bridge *br, unsigned long val)
 		goto unlock;
 
 	br->multicast_disabled = !val;
-	if (br->multicast_disabled)
+	if (br->multicast_disabled) {
+		br_multicast_del_grps(br);
 		goto unlock;
+	}
 
 	if (!netif_running(br->dev))
 		goto unlock;
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index 051673e..5c2b927 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -428,6 +428,7 @@ extern void br_multicast_disable_port(struct net_bridge_port *port);
 extern void br_multicast_init(struct net_bridge *br);
 extern void br_multicast_open(struct net_bridge *br);
 extern void br_multicast_stop(struct net_bridge *br);
+extern void br_multicast_dev_del(struct net_bridge *br);
 extern void br_multicast_deliver(struct net_bridge_mdb_entry *mdst,
 				 struct sk_buff *skb);
 extern void br_multicast_forward(struct net_bridge_mdb_entry *mdst,
@@ -452,7 +453,7 @@ extern struct net_bridge_port_group *br_multicast_new_port_group(
 extern void br_mdb_init(void);
 extern void br_mdb_uninit(void);
 extern void br_mdb_notify(struct net_device *dev, struct net_bridge_port *port,
-				struct br_ip *group, int type);
+				struct br_ip *group, int type, u8 state);
 extern void br_rtr_notify(struct net_device *dev, struct net_bridge_port *port,
 				int type);
 
