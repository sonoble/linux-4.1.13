Gitweb:     http://git.kernel.org/linus/;a=commit;h=21caa6622b36190a32b19dfa734822c2eb93e1fd
Commit:     21caa6622b36190a32b19dfa734822c2eb93e1fd
Parent:     85da53bf1c336bb07ac038fb951403ab0478d2c5
Author:     Romain Kuntz <r.kuntz@ipflavors.com>
AuthorDate: Wed Jan 9 21:06:03 2013 +0000
Committer:  David S. Miller <davem@davemloft.net>
CommitDate: Thu Jan 10 14:22:54 2013 -0800

    ipv6: use addrconf_get_prefix_route for prefix route lookup [v2]

    Replace ip6_route_lookup() with addrconf_get_prefix_route() when
    looking up for a prefix route. This ensures that the connected prefix
    is looked up in the main table, and avoids the selection of other
    matching routes located in different tables as well as blackhole
    or prohibited entries.

    In addition, this fixes an Opps introduced by commit 64c6d08e (ipv6:
    del unreachable route when an addr is deleted on lo), that would occur
    when a blackhole or prohibited entry is selected by ip6_route_lookup().
    Such entries have a NULL rt6i_table argument, which is accessed by
    __ip6_del_rt() when trying to lock rt6i_table->tb6_lock.

    The function addrconf_is_prefix_route() is not used anymore and is
    removed.

    [v2] Minor indentation cleanup and log updates.

    Signed-off-by: Romain Kuntz <r.kuntz@ipflavors.com>
    Acked-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Acked-by: YOSHIFUJI Hideaki <yoshfuji@linux-ipv6.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/ipv6/addrconf.c b/net/ipv6/addrconf.c
index b42d74a..e6c48a1 100644
--- a/net/ipv6/addrconf.c
+++ b/net/ipv6/addrconf.c
@@ -149,6 +149,11 @@ static void addrconf_type_change(struct net_device *dev,
 				 unsigned long event);
 static int addrconf_ifdown(struct net_device *dev, int how);
 
+static struct rt6_info *addrconf_get_prefix_route(const struct in6_addr *pfx,
+						  int plen,
+						  const struct net_device *dev,
+						  u32 flags, u32 noflags);
+
 static void addrconf_dad_start(struct inet6_ifaddr *ifp, u32 flags);
 static void addrconf_dad_timer(unsigned long data);
 static void addrconf_dad_completed(struct inet6_ifaddr *ifp);
@@ -245,12 +250,6 @@ static inline bool addrconf_qdisc_ok(const struct net_device *dev)
 	return !qdisc_tx_is_noop(dev);
 }
 
-/* Check if a route is valid prefix route */
-static inline int addrconf_is_prefix_route(const struct rt6_info *rt)
-{
-	return (rt->rt6i_flags & (RTF_GATEWAY | RTF_DEFAULT)) == 0;
-}
-
 static void addrconf_del_timer(struct inet6_ifaddr *ifp)
 {
 	if (del_timer(&ifp->timer))
@@ -800,11 +799,14 @@ static void ipv6_del_addr(struct inet6_ifaddr *ifp)
 	if ((ifp->flags & IFA_F_PERMANENT) && onlink < 1) {
 		struct in6_addr prefix;
 		struct rt6_info *rt;
-		struct net *net = dev_net(ifp->idev->dev);
+
 		ipv6_addr_prefix(&prefix, &ifp->addr, ifp->prefix_len);
-		rt = rt6_lookup(net, &prefix, NULL, ifp->idev->dev->ifindex, 1);
 
-		if (rt && addrconf_is_prefix_route(rt)) {
+		rt = addrconf_get_prefix_route(&prefix,
+					       ifp->prefix_len,
+					       ifp->idev->dev,
+					       0, RTF_GATEWAY | RTF_DEFAULT);
+		if (rt) {
 			if (onlink == 0) {
 				ip6_del_rt(rt);
 				rt = NULL;
