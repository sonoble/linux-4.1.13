backport of the following upstream commit with changes to deal with
locking differences in 3.2:

commit 5f0c5f73e5efaee2928c4cabcf48b03f6ba99fc8
Author: Andy Gospodarek <gospo@cumulusnetworks.com>
Date:   Sun Sep 28 22:34:37 2014 -0400

    bonding: make global bonding stats more reliable

    As the code stands today, bonding stats are based simply on the stats
    from the member interfaces.  If a member was to be removed from a bond,
    the stats would instantly drop.  This would be confusing to an admin
    would would suddonly see interface stats drop while traffic is still
    flowing.

    In addition to preventing the stats drops mentioned above, new members
    will now be added to the bond and only traffic received after the member
    was added to the bond will be counted as part of bonding stats.  Bonding
    counters will also be updated when any slaves are dropped to make sure
    the reported stats are reliable.

diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c
index c75b3ef..768b0de 100644
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@ -254,6 +254,10 @@ struct bond_parm_tbl ad_select_tbl[] = {
 
 static int bond_init(struct net_device *bond_dev);
 static void bond_uninit(struct net_device *bond_dev);
+static struct rtnl_link_stats64 *bond_get_stats(struct net_device *bond_dev,
+						struct rtnl_link_stats64 *stats);
+static struct rtnl_link_stats64 *__bond_get_stats(struct net_device *bond_dev,
+						struct rtnl_link_stats64 *stats);
 
 /*---------------------------- General routines -----------------------------*/
 
@@ -1816,6 +1820,8 @@ int bond_enslave(struct net_device *bond_dev, struct net_device *slave_dev)
 	new_slave->bond = bond;
 	new_slave->dev = slave_dev;
 	slave_dev->priv_flags |= IFF_BONDING;
+	/* initialize slave stats */
+	dev_get_stats(new_slave->dev, &new_slave->slave_stats);
 
 	if (bond_is_lb(bond)) {
 		/* bond_alb_init_slave() must be called before all other stages since
@@ -2135,6 +2141,9 @@ int bond_release(struct net_device *bond_dev, struct net_device *slave_dev)
 
 	/* release the slave from its bond */
 	bond_sysfs_slave_del(slave);
+	/* recompute stats just before removing the slave */
+	__bond_get_stats(bond->dev, &bond->bond_stats);
+
 	bond_detach_slave(bond, slave);
 
 	if (bond->primary_slave == slave)
@@ -3701,46 +3710,61 @@ static struct rtnl_link_stats64 *bond_get_stats(struct net_device *bond_dev,
 						struct rtnl_link_stats64 *stats)
 {
 	struct bonding *bond = netdev_priv(bond_dev);
-	struct rtnl_link_stats64 temp;
-	struct slave *slave;
-	int i;
-
-	memset(stats, 0, sizeof(*stats));
 
 	read_lock_bh(&bond->lock);
 
-	bond_for_each_slave(bond, slave, i) {
-		const struct rtnl_link_stats64 *sstats =
-			dev_get_stats(slave->dev, &temp);
+	stats = __bond_get_stats(bond_dev, stats);
 
-		stats->rx_packets += sstats->rx_packets;
-		stats->rx_bytes += sstats->rx_bytes;
-		stats->rx_errors += sstats->rx_errors;
-		stats->rx_dropped += sstats->rx_dropped;
-
-		stats->tx_packets += sstats->tx_packets;
-		stats->tx_bytes += sstats->tx_bytes;
-		stats->tx_errors += sstats->tx_errors;
-		stats->tx_dropped += sstats->tx_dropped;
+	read_unlock_bh(&bond->lock);
 
-		stats->multicast += sstats->multicast;
-		stats->collisions += sstats->collisions;
+	return stats;
+}
 
-		stats->rx_length_errors += sstats->rx_length_errors;
-		stats->rx_over_errors += sstats->rx_over_errors;
-		stats->rx_crc_errors += sstats->rx_crc_errors;
-		stats->rx_frame_errors += sstats->rx_frame_errors;
-		stats->rx_fifo_errors += sstats->rx_fifo_errors;
-		stats->rx_missed_errors += sstats->rx_missed_errors;
+static struct rtnl_link_stats64 *__bond_get_stats(struct net_device *bond_dev,
+						struct rtnl_link_stats64 *stats)
+{
+	struct bonding *bond = netdev_priv(bond_dev);
+	struct rtnl_link_stats64 temp;
+	struct slave *slave;
+	int i;
 
-		stats->tx_aborted_errors += sstats->tx_aborted_errors;
-		stats->tx_carrier_errors += sstats->tx_carrier_errors;
-		stats->tx_fifo_errors += sstats->tx_fifo_errors;
-		stats->tx_heartbeat_errors += sstats->tx_heartbeat_errors;
-		stats->tx_window_errors += sstats->tx_window_errors;
-	}
+	memcpy(stats, &bond->bond_stats, sizeof(*stats));
 
-	read_unlock_bh(&bond->lock);
+	bond_for_each_slave(bond, slave, i) {
+		const struct rtnl_link_stats64 *sstats =
+			dev_get_stats(slave->dev, &temp);
+		struct rtnl_link_stats64 *pstats = &slave->slave_stats;
+
+		stats->rx_packets +=  sstats->rx_packets - pstats->rx_packets;
+		stats->rx_bytes += sstats->rx_bytes - pstats->rx_bytes;
+		stats->rx_errors += sstats->rx_errors - pstats->rx_errors;
+		stats->rx_dropped += sstats->rx_dropped - pstats->rx_dropped;
+
+		stats->tx_packets += sstats->tx_packets - pstats->tx_packets;
+		stats->tx_bytes += sstats->tx_bytes - pstats->tx_bytes;
+		stats->tx_errors += sstats->tx_errors - pstats->tx_errors;
+		stats->tx_dropped += sstats->tx_dropped - pstats->tx_dropped;
+
+		stats->multicast += sstats->multicast - pstats->multicast;
+		stats->collisions += sstats->collisions - pstats->collisions;
+
+		stats->rx_length_errors += sstats->rx_length_errors - pstats->rx_length_errors;
+		stats->rx_over_errors += sstats->rx_over_errors - pstats->rx_over_errors;
+		stats->rx_crc_errors += sstats->rx_crc_errors - pstats->rx_crc_errors;
+		stats->rx_frame_errors += sstats->rx_frame_errors - pstats->rx_frame_errors;
+		stats->rx_fifo_errors += sstats->rx_fifo_errors - pstats->rx_fifo_errors;
+		stats->rx_missed_errors += sstats->rx_missed_errors - pstats->rx_missed_errors;
+
+		stats->tx_aborted_errors += sstats->tx_aborted_errors - pstats->tx_aborted_errors;
+		stats->tx_carrier_errors += sstats->tx_carrier_errors - pstats->tx_carrier_errors;
+		stats->tx_fifo_errors += sstats->tx_fifo_errors - pstats->tx_fifo_errors;
+		stats->tx_heartbeat_errors += sstats->tx_heartbeat_errors - pstats->tx_heartbeat_errors;
+		stats->tx_window_errors += sstats->tx_window_errors - pstats->tx_window_errors;
+
+		/* save off the slave stats for the next run */
+		memcpy(pstats, sstats, sizeof(*sstats));
+	}
+	memcpy(&bond->bond_stats, stats, sizeof(*stats));
 
 	return stats;
 }
diff --git a/drivers/net/bonding/bonding.h b/drivers/net/bonding/bonding.h
index 382947a..e70ce3e 100644
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@ -21,6 +21,7 @@
 #include <linux/cpumask.h>
 #include <linux/in6.h>
 #include <linux/netpoll.h>
+#include <linux/if_link.h>
 #include "bond_3ad.h"
 #include "bond_alb.h"
 
@@ -201,6 +202,7 @@ struct slave {
 	struct netpoll *np;
 #endif
 	struct kobject kobj;
+	struct rtnl_link_stats64 slave_stats;
 };
 
 /*
@@ -255,6 +257,7 @@ struct bonding {
 	/* debugging suport via debugfs */
 	struct	 dentry *debug_dir;
 #endif /* CONFIG_DEBUG_FS */
+	struct rtnl_link_stats64 bond_stats;
 };
 
 static inline bool bond_vlan_used(struct bonding *bond)
