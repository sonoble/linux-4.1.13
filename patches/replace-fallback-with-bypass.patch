replace fallback with bypass

diff --git a/drivers/net/bonding/bond_3ad.c b/drivers/net/bonding/bond_3ad.c
index 25edb23..74d00e9 100644
--- a/drivers/net/bonding/bond_3ad.c
+++ b/drivers/net/bonding/bond_3ad.c
@@ -70,7 +70,7 @@
 #define AD_PORT_STANDBY         0x80
 #define AD_PORT_SELECTED        0x100
 #define AD_PORT_MOVED           0x200
-#define AD_PORT_FALLBACK        0x400
+#define AD_PORT_BYPASS          0x400
 
 // Port Key definitions
 // key is determined according to the link speed, duplex and
@@ -394,26 +394,26 @@ static u8 __get_duplex(struct port *port)
 }
 
 /**
- * is_lacp_fallback_eligible - is bond eligible to go into lacp fallback mode
+ * is_lacp_bypass_eligible - is bond eligible to go into lacp bypass mode
  * @bond: the bond we're looking at
  *
  * Return true if it is, false otherwise
  */
-static bool is_lacp_fallback_eligible(struct bonding *bond)
+static bool is_lacp_bypass_eligible(struct bonding *bond)
 {
-	return (bond->params.lacp_fallback_allow &&
-		bond->params.lacp_fallback_active);
+	return (bond->params.lacp_bypass_allow &&
+		bond->params.lacp_bypass_active);
 }
 
 /**
- * is_better_fallback_slave - compare between two slaves of the same bond
- *                            and see which one is better for lacp fall back
+ * is_better_bypass_slave - compare between two slaves of the same bond
+ *                            and see which one is better for lacp bypass
  * @slave1
  * @slave2
  *
  * Return: true if slave1 is better, false otherwise
  */
-static bool is_better_fallback_slave(struct slave *slave1, struct slave *slave2)
+static bool is_better_bypass_slave(struct slave *slave1, struct slave *slave2)
 {
 	if (!slave1)
 		return false;
@@ -424,45 +424,45 @@ static bool is_better_fallback_slave(struct slave *slave1, struct slave *slave2)
 	if (slave1->bond != slave2->bond)
 		return false;
 
-	if (slave1->lacp_fallback_priority > slave2->lacp_fallback_priority)
+	if (slave1->lacp_bypass_priority > slave2->lacp_bypass_priority)
 		return true;
 
-	if (slave2->lacp_fallback_priority > slave1->lacp_fallback_priority)
+	if (slave2->lacp_bypass_priority > slave1->lacp_bypass_priority)
 		return false;
 
 	return (strcmp(slave1->dev->name, slave2->dev->name) <= 0);
 }
 
 /**
- * __get_best_fallback_slave_in_bond - get the best slave when bond is in fallback mode
+ * __get_best_bypass_slave_in_bond - get the best slave when bond is in bypass mode
  * @bond: the bond we're looking at
- * Return the slave in the bond which is best for lacp fall back
+ * Return the slave in the bond which is best for lacp bypass
  */
-static struct slave *__get_best_fallback_slave_in_bond(struct bonding *bond)
+static struct slave *__get_best_bypass_slave_in_bond(struct bonding *bond)
 {
 	struct slave *slave, *best_slave = NULL;
 	int i;
 
-	if (!is_lacp_fallback_eligible(bond))
+	if (!is_lacp_bypass_eligible(bond))
 		return NULL;
 
 	bond_for_each_slave(bond, slave, i) {
 		if (IS_UP(slave->dev)) {
 			if (!best_slave)
 				best_slave = slave;
-			else if (is_better_fallback_slave(slave, best_slave))
+			else if (is_better_bypass_slave(slave, best_slave))
 				best_slave = slave;
 		}
 	}
 	return best_slave;
 }
 
-static struct slave *__get_best_fallback_slave_in_agg(struct aggregator *agg)
+static struct slave *__get_best_bypass_slave_in_agg(struct aggregator *agg)
 {
 	struct slave *best_slave = NULL;
 	struct port *port;
 
-	if (!is_lacp_fallback_eligible(agg->slave->bond))
+	if (!is_lacp_bypass_eligible(agg->slave->bond))
 		return NULL;
 
 	for (port = agg->lag_ports;
@@ -472,7 +472,7 @@ static struct slave *__get_best_fallback_slave_in_agg(struct aggregator *agg)
 		if (IS_UP(port->slave->dev)) {
 			if (!best_slave)
 				best_slave = port->slave;
-			else if (is_better_fallback_slave(port->slave, best_slave))
+			else if (is_better_bypass_slave(port->slave, best_slave))
 				best_slave = port->slave;
 		}
 	}
@@ -480,24 +480,24 @@ static struct slave *__get_best_fallback_slave_in_agg(struct aggregator *agg)
 }
 
 /**
- * is_best_fallback_slave - is the given slave the best for lacp fallback
+ * is_best_bypass_slave - is the given slave the best for lacp bypass
  * @slave: the slave we're looking at
  * Return true if it is, false otherwise
  */
-static bool is_best_fallback_slave(struct slave *slave)
+static bool is_best_bypass_slave(struct slave *slave)
 {
-	return (slave == __get_best_fallback_slave_in_bond(slave->bond));
+	return (slave == __get_best_bypass_slave_in_bond(slave->bond));
 }
 
-static bool is_agg_in_fallback(struct aggregator *agg)
+static bool is_agg_in_bypass(struct aggregator *agg)
 {
 	struct slave *slave;
 
 	if (!agg)
 		return false;
 
-	slave = __get_best_fallback_slave_in_agg(agg);
-	return (slave && (SLAVE_AD_INFO(slave).port.sm_vars & AD_PORT_FALLBACK));
+	slave = __get_best_bypass_slave_in_agg(agg);
+	return (slave && (SLAVE_AD_INFO(slave).port.sm_vars & AD_PORT_BYPASS));
 }
 
 /**
@@ -1150,34 +1150,34 @@ static void ad_rx_machine(struct lacpdu *lacpdu, struct port *port)
 		/* next state */
 		port->sm_rx_state = AD_RX_PORT_DISABLED;
 	// check if new lacpdu arrived
-	else if (lacpdu && ((port->sm_rx_state == AD_RX_EXPIRED) || (port->sm_rx_state == AD_RX_DEFAULTED) || (port->sm_rx_state == AD_RX_CURRENT) || (port->sm_rx_state == AD_RX_FALLBACK_EXPIRED))) {
+	else if (lacpdu && ((port->sm_rx_state == AD_RX_EXPIRED) || (port->sm_rx_state == AD_RX_DEFAULTED) || (port->sm_rx_state == AD_RX_CURRENT) || (port->sm_rx_state == AD_RX_BYPASS_EXPIRED))) {
 		port->sm_rx_timer_counter = 0; // zero timer
 		port->sm_rx_state = AD_RX_CURRENT;
-	} else if (port->sm_rx_state == AD_RX_FALLBACK) {
+	} else if (port->sm_rx_state == AD_RX_BYPASS) {
 		if (lacpdu) {
-			pr_debug("Fallback (%s): lacpdu received, disabling fallback\n",
+			pr_debug("Bypass (%s): lacpdu received, disabling bypass\n",
 				 port->slave->dev->name);
 
-			port->sm_rx_fb_timer_counter = 0;
+			port->sm_rx_bypass_timer_counter = 0;
 			port->sm_rx_state = AD_RX_CURRENT;
 			__disable_port(port); // bring down the bond, let lacp runs its course
-		} else if (!is_best_fallback_slave(port->slave) ||
-			   !(port->sm_vars & AD_PORT_FALLBACK)) {
-			pr_debug("(%s) fallback allow %d active %d or no longer best\n",
+		} else if (!is_best_bypass_slave(port->slave) ||
+			   !(port->sm_vars & AD_PORT_BYPASS)) {
+			pr_debug("(%s) bypass allow %d active %d or no longer best\n",
 				 port->slave->dev->name,
-				 port->slave->bond->params.lacp_fallback_allow,
-				 port->slave->bond->params.lacp_fallback_active);
-			port->sm_rx_fb_timer_counter = 0;
-			if (is_lacp_fallback_eligible(port->slave->bond))
-				port->sm_rx_state = AD_RX_FALLBACK_EXPIRED;
+				 port->slave->bond->params.lacp_bypass_allow,
+				 port->slave->bond->params.lacp_bypass_active);
+			port->sm_rx_bypass_timer_counter = 0;
+			if (is_lacp_bypass_eligible(port->slave->bond))
+				port->sm_rx_state = AD_RX_BYPASS_EXPIRED;
 			else
 				port->sm_rx_state = AD_RX_DEFAULTED;
 			__disable_port(port);
-		} else if (port->sm_rx_fb_timer_counter && !(--port->sm_rx_fb_timer_counter)) {
-			pr_debug("(%s) Fallback grace period expired (%d)\n", port->slave->dev->name,
+		} else if (port->sm_rx_bypass_timer_counter && !(--port->sm_rx_bypass_timer_counter)) {
+			pr_debug("(%s) Bypass grace period expired (%d)\n", port->slave->dev->name,
 				 port->slave->inactive);
 
-			port->sm_rx_state = AD_RX_FALLBACK_EXPIRED;            // next state
+			port->sm_rx_state = AD_RX_BYPASS_EXPIRED;            // next state
 			__disable_port(port);
 		}
 	} else {
@@ -1185,8 +1185,8 @@ static void ad_rx_machine(struct lacpdu *lacpdu, struct port *port)
 		if (port->sm_rx_timer_counter && !(--port->sm_rx_timer_counter)) {
 			switch (port->sm_rx_state) {
 			case AD_RX_EXPIRED:
-				if (is_best_fallback_slave(port->slave))
-					port->sm_rx_state = AD_RX_FALLBACK;		// next state
+				if (is_best_bypass_slave(port->slave))
+					port->sm_rx_state = AD_RX_BYPASS;		// next state
 				else
 					port->sm_rx_state = AD_RX_DEFAULTED;		// next state
 				break;
@@ -1213,8 +1213,8 @@ static void ad_rx_machine(struct lacpdu *lacpdu, struct port *port)
 					port->sm_rx_state = AD_RX_LACP_DISABLED;    // next state
 				break;
 			case AD_RX_DEFAULTED:
-				if (is_best_fallback_slave(port->slave))
-					port->sm_rx_state = AD_RX_FALLBACK;	// next state
+				if (is_best_bypass_slave(port->slave))
+					port->sm_rx_state = AD_RX_BYPASS;	// next state
 				break;
 			default:    //to silence the compiler
 				break;
@@ -1244,13 +1244,13 @@ static void ad_rx_machine(struct lacpdu *lacpdu, struct port *port)
 
 		case AD_RX_PORT_DISABLED:
 			port->sm_vars &= ~AD_PORT_MATCHED;
-			port->sm_vars &= ~AD_PORT_FALLBACK;
-			port->sm_rx_fb_timer_counter = 0;
+			port->sm_vars &= ~AD_PORT_BYPASS;
+			port->sm_rx_bypass_timer_counter = 0;
 			break;
 		case AD_RX_LACP_DISABLED:
 			port->sm_vars &= ~AD_PORT_SELECTED;
-			port->sm_vars &= ~AD_PORT_FALLBACK;
-			port->sm_rx_fb_timer_counter = 0;
+			port->sm_vars &= ~AD_PORT_BYPASS;
+			port->sm_rx_bypass_timer_counter = 0;
 			__record_default(port);
 			port->partner_oper.port_state &= ~AD_STATE_AGGREGATION;
 			port->sm_vars |= AD_PORT_MATCHED;
@@ -1262,8 +1262,8 @@ static void ad_rx_machine(struct lacpdu *lacpdu, struct port *port)
 			//mux machine in case of EXPIRED even if LINK_DOWN didn't arrive for the port.
 			port->partner_oper.port_state &= ~AD_STATE_SYNCHRONIZATION;
 			port->sm_vars &= ~AD_PORT_MATCHED;
-			port->sm_vars &= ~AD_PORT_FALLBACK;
-			port->sm_rx_fb_timer_counter = 0;
+			port->sm_vars &= ~AD_PORT_BYPASS;
+			port->sm_rx_bypass_timer_counter = 0;
 			port->partner_oper.port_state |=
 				AD_STATE_LACP_ACTIVITY;
 			port->sm_rx_timer_counter = __ad_timer_to_ticks(AD_CURRENT_WHILE_TIMER, (u16)(AD_SHORT_TIMEOUT));
@@ -1273,8 +1273,8 @@ static void ad_rx_machine(struct lacpdu *lacpdu, struct port *port)
 			__update_default_selected(port);
 			__record_default(port);
 			port->sm_vars |= AD_PORT_MATCHED;
-			port->sm_vars &= ~AD_PORT_FALLBACK;
-			port->sm_rx_fb_timer_counter = 0;
+			port->sm_vars &= ~AD_PORT_BYPASS;
+			port->sm_rx_bypass_timer_counter = 0;
 			port->actor_oper_port_state &= ~AD_STATE_EXPIRED;
 			break;
 		case AD_RX_CURRENT:
@@ -1291,21 +1291,21 @@ static void ad_rx_machine(struct lacpdu *lacpdu, struct port *port)
 			__record_pdu(lacpdu, port);
 			port->sm_rx_timer_counter = __ad_timer_to_ticks(AD_CURRENT_WHILE_TIMER, (u16)(port->actor_oper_port_state & AD_STATE_LACP_TIMEOUT));
 			port->actor_oper_port_state &= ~AD_STATE_EXPIRED;
-			port->sm_vars &= ~AD_PORT_FALLBACK;
+			port->sm_vars &= ~AD_PORT_BYPASS;
 			break;
-		case AD_RX_FALLBACK:
-			pr_debug("rx_machine: %s in fallback state (%d)\n",
-				 port->slave->dev->name, port->sm_rx_fb_timer_counter);
+		case AD_RX_BYPASS:
+			pr_debug("rx_machine: %s in bypass state (%d)\n",
+				 port->slave->dev->name, port->sm_rx_bypass_timer_counter);
 
-			port->sm_rx_fb_timer_counter =
-				port->slave->bond->params.lacp_fallback_period *
+			port->sm_rx_bypass_timer_counter =
+				port->slave->bond->params.lacp_bypass_period *
 				ad_ticks_per_sec;
 			port->sm_vars &= ~AD_PORT_SELECTED;
-			port->sm_vars |= AD_PORT_FALLBACK;
+			port->sm_vars |= AD_PORT_BYPASS;
 			break;
-		case AD_RX_FALLBACK_EXPIRED:
-			port->sm_vars &= ~AD_PORT_FALLBACK;
-			port->sm_rx_fb_timer_counter = 0;
+		case AD_RX_BYPASS_EXPIRED:
+			port->sm_vars &= ~AD_PORT_BYPASS;
+			port->sm_rx_bypass_timer_counter = 0;
 			break;
 		default:    //to silence the compiler
 			break;
@@ -1601,14 +1601,14 @@ static struct aggregator *ad_agg_selection_test(struct aggregator *best,
 	 * 4.  Therefore, current and best both have partner replies or
 	 *     both do not, so:
 	 *
-	 * 4a. If both have no partner and bond is fallback eligible and if
-	 *     current agg is a better fallback slave, select current.
+	 * 4a. If both have no partner and bond is bypass eligible and if
+	 *     current agg is a better bypass slave, select current.
 	 *
-	 * 4b. If both have no partner and bond is fallback eligible and if
-	 *     best agg is a better fallback, keep best.
+	 * 4b. If both have no partner and bond is bypass eligible and if
+	 *     best agg is a better bypass, keep best.
 	 *
 	 * 5.  Therefore, current and best both have partner replies or
-	 *     both do not and bond is not fallback eligible, perform
+	 *     both do not and bond is not bypass eligible, perform
 	 *     selection policy:
 	 *
 	 * BOND_AD_COUNT: Select by count of ports.  If count is equal,
@@ -1633,16 +1633,16 @@ static struct aggregator *ad_agg_selection_test(struct aggregator *best,
 	if (!__agg_has_partner(curr) && __agg_has_partner(best))
 		return best;
 
-	if (is_lacp_fallback_eligible(curr->slave->bond) &&
+	if (is_lacp_bypass_eligible(curr->slave->bond) &&
 	    !__agg_has_partner(curr) && !__agg_has_partner(best)) {
 
-		s1 = __get_best_fallback_slave_in_agg(curr);
-		s2 = __get_best_fallback_slave_in_agg(best);
+		s1 = __get_best_bypass_slave_in_agg(curr);
+		s2 = __get_best_bypass_slave_in_agg(best);
 
-		if (is_better_fallback_slave(s1, s2))
+		if (is_better_bypass_slave(s1, s2))
 			return curr;
 
-		if (is_better_fallback_slave(s2, s1))
+		if (is_better_bypass_slave(s2, s1))
 			return best;
 	}
 
@@ -1710,7 +1710,7 @@ static void ad_agg_selection_logic(struct aggregator *agg)
 {
 	struct aggregator *best, *active, *origin;
 	struct port *port;
-	bool best_is_in_fallback = false;
+	bool best_is_in_bypass = false;
 
 	origin = agg;
 	active = __get_active_agg(agg);
@@ -1724,9 +1724,9 @@ static void ad_agg_selection_logic(struct aggregator *agg)
 
 	} while ((agg = __get_next_agg(agg)));
 
-	best_is_in_fallback = is_agg_in_fallback(best);
+	best_is_in_bypass = is_agg_in_bypass(best);
 
-	if (best && !best_is_in_fallback &&
+	if (best && !best_is_in_bypass &&
 	    __get_agg_selection_mode(best->lag_ports) == BOND_AD_STABLE) {
 		/*
 		 * For the STABLE policy, don't replace the old active
@@ -1792,7 +1792,7 @@ static void ad_agg_selection_logic(struct aggregator *agg)
 			for (port = active->lag_ports; port;
 			     port = port->next_port_in_aggregator) {
 				__disable_port(port);
-				port->sm_vars &= ~AD_PORT_FALLBACK;
+				port->sm_vars &= ~AD_PORT_BYPASS;
 			}
 		}
 	}
@@ -1805,11 +1805,11 @@ static void ad_agg_selection_logic(struct aggregator *agg)
 
 	if (active) {
 		if (!__agg_has_partner(active)) {
-			bool is_fallback_eligible = is_lacp_fallback_eligible(active->slave->bond);
+			bool is_bypass_eligible = is_lacp_bypass_eligible(active->slave->bond);
 			for (port = active->lag_ports; port;
 			     port = port->next_port_in_aggregator) {
-				if (!is_fallback_eligible ||
-				    (is_best_fallback_slave(port->slave))) {
+				if (!is_bypass_eligible ||
+				    (is_best_bypass_slave(port->slave))) {
 					pr_debug("(%s) agg active and no partner\n", port->slave->dev->name);
 					__enable_port(port);
 				}
@@ -1927,8 +1927,8 @@ static void ad_initialize_port(struct port *port, int lacp_fast)
 		port->next_port_in_aggregator = NULL;
 		port->transaction_id = 0;
 
-		// fallback
-		port->sm_rx_fb_timer_counter = 0;
+		// bypass
+		port->sm_rx_bypass_timer_counter = 0;
 
 		memcpy(&port->lacpdu, &lacpdu, sizeof(lacpdu));
 	}
@@ -2560,18 +2560,18 @@ int bond_3ad_set_carrier(struct bonding *bond)
 	struct aggregator *active;
 	struct slave *slave;
 	int active_slaves = 0, i;
-	bool fallback = false;
+	bool bypass = false;
 
 	bond_for_each_slave(bond, slave, i)
 		if (bond_is_active_slave(slave))
 			active_slaves++;
 
 	active = __get_active_agg(&(SLAVE_AD_INFO(bond->first_slave).aggregator));
-	fallback = is_agg_in_fallback(active);
-	pr_debug("%s %s active id: %d #actives: %d fallback: %d\n", __FUNCTION__,
+	bypass = is_agg_in_bypass(active);
+	pr_debug("%s %s active id: %d #actives: %d bypass: %d\n", __FUNCTION__,
 		 bond->dev->name, active ? active->aggregator_identifier : 0,
-		 active_slaves, fallback);
-	if (active && (fallback || __agg_has_partner(active))) {
+		 active_slaves, bypass);
+	if (active && (bypass || __agg_has_partner(active))) {
 		/* are enough slaves available to consider link up? */
 		if (active_slaves < bond->params.min_links) {
 			if (netif_carrier_ok(bond->dev)) {
diff --git a/drivers/net/bonding/bond_3ad.h b/drivers/net/bonding/bond_3ad.h
index bd844cc..5b9bad5 100644
--- a/drivers/net/bonding/bond_3ad.h
+++ b/drivers/net/bonding/bond_3ad.h
@@ -56,8 +56,8 @@ typedef enum {
 	AD_RX_EXPIRED,	      // rx Machine
 	AD_RX_DEFAULTED,      // rx Machine
 	AD_RX_CURRENT,	      // rx Machine
-	AD_RX_FALLBACK,       // rx Machine
-	AD_RX_FALLBACK_EXPIRED // rx Machine
+	AD_RX_BYPASS,         // rx Machine
+	AD_RX_BYPASS_EXPIRED  // rx Machine
 } rx_states_t;
 
 // periodic machine states(43.4.12 in the 802.3ad standard)
@@ -103,7 +103,7 @@ typedef enum {
 	AD_PERIODIC_TIMER,
 	AD_PARTNER_CHURN_TIMER,
 	AD_WAIT_WHILE_TIMER,
-	AD_FALLBACK_TIMER,
+	AD_BYPASS_TIMER,
 } ad_timers_t;
 
 #pragma pack(1)
@@ -226,7 +226,7 @@ typedef struct port {
 	u16 sm_vars;	      // all state machines variables for this port
 	rx_states_t sm_rx_state;	// state machine rx state
 	u16 sm_rx_timer_counter;    // state machine rx timer counter
-	u16 sm_rx_fb_timer_counter;    // state machine rx fallback timer counter
+	u16 sm_rx_bypass_timer_counter;    // state machine rx bypass timer counter
 	periodic_states_t sm_periodic_state;// state machine periodic state
 	u16 sm_periodic_timer_counter;	// state machine periodic timer counter
 	mux_states_t sm_mux_state;	// state machine mux state
diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c
index 536d298..70c865b 100644
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@ -89,8 +89,8 @@
 /* monitor all links that often (in milliseconds). <=0 disables monitoring */
 #define BOND_LINK_MON_INTERV	0
 #define BOND_LINK_ARP_INTERV	0
-#define BOND_LACP_FALLBACK_PERIOD 0
-#define BOND_LACP_FALLBACK_ACTIVE_DEFAULT 1
+#define BOND_LACP_BYPASS_PERIOD 0
+#define BOND_LACP_BYPASS_ACTIVE_DEFAULT 1
 
 static int max_bonds	= BOND_DEFAULT_MAX_BONDS;
 static int tx_queues	= BOND_DEFAULT_TX_QUEUES;
@@ -4950,8 +4950,8 @@ static int bond_check_params(struct bond_params *params)
 	params->all_slaves_active = all_slaves_active;
 	params->resend_igmp = resend_igmp;
 	params->min_links = min_links;
-	params->lacp_fallback_period = BOND_LACP_FALLBACK_PERIOD;
-	params->lacp_fallback_active = BOND_LACP_FALLBACK_ACTIVE_DEFAULT;
+	params->lacp_bypass_period = BOND_LACP_BYPASS_PERIOD;
+	params->lacp_bypass_active = BOND_LACP_BYPASS_ACTIVE_DEFAULT;
 
 	if (primary) {
 		strncpy(params->primary, primary, IFNAMSIZ);
@@ -5068,9 +5068,9 @@ static size_t bond_get_size(const struct net_device *bond_dev)
 		nla_total_size(sizeof(u16)) + /* IFLA_BOND_AD_INFO_ACTOR_KEY */
 		nla_total_size(sizeof(u16)) + /* IFLA_BOND_AD_INFO_PARTNER_KEY*/
 		nla_total_size(ETH_ALEN) +    /* IFLA_BOND_AD_INFO_PARTNER_MAC*/
-		nla_total_size(sizeof(u8)) +  /* IFLA_BOND_CL_LACP_FB_ALLOW */
-		nla_total_size(sizeof(u8)) +  /* IFLA_BOND_CL_LACP_FB_ACTIVE */
-		nla_total_size(sizeof(u32)) + /* IFLA_BOND_CL_LACP_FB_PERIOD */
+		nla_total_size(sizeof(u8)) +  /* IFLA_BOND_CL_LACP_BYPASS_ALLOW */
+		nla_total_size(sizeof(u8)) +  /* IFLA_BOND_CL_LACP_BYPASS_ACTIVE */
+		nla_total_size(sizeof(u32)) + /* IFLA_BOND_CL_LACP_BYPASS_PERIOD */
 		0;
 }
 
@@ -5218,16 +5218,16 @@ static int bond_fill_info(struct sk_buff *skb,
 			nla_nest_end(skb, nest);
 		}
 
-		if (nla_put_u8(skb, IFLA_BOND_CL_LACP_FB_ALLOW,
-			       bond->params.lacp_fallback_allow))
+		if (nla_put_u8(skb, IFLA_BOND_CL_LACP_BYPASS_ALLOW,
+			       bond->params.lacp_bypass_allow))
 		    goto nla_put_failure;
 
-		if (nla_put_u8(skb, IFLA_BOND_CL_LACP_FB_ACTIVE,
-			       bond->params.lacp_fallback_active))
+		if (nla_put_u8(skb, IFLA_BOND_CL_LACP_BYPASS_ACTIVE,
+			       bond->params.lacp_bypass_active))
 		    goto nla_put_failure;
 
-		if (nla_put_u32(skb, IFLA_BOND_CL_LACP_FB_PERIOD,
-			        bond->params.lacp_fallback_period))
+		if (nla_put_u32(skb, IFLA_BOND_CL_LACP_BYPASS_PERIOD,
+			        bond->params.lacp_bypass_period))
 		    goto nla_put_failure;
 	}
 
@@ -5246,7 +5246,7 @@ static size_t bond_get_slave_size(const struct net_device *bond_dev,
 		nla_total_size(MAX_ADDR_LEN) +	/* IFLA_BOND_SLAVE_PERM_HWADDR */
 		nla_total_size(sizeof(u16)) +	/* IFLA_BOND_SLAVE_QUEUE_ID */
 		nla_total_size(sizeof(u16)) +	/* IFLA_BOND_SLAVE_AD_AGGREGATOR_ID */
-		nla_total_size(sizeof(u32)) +   /* IFLA_BOND_SLAVE_CL_LACP_FB_PRIO */
+		nla_total_size(sizeof(u32)) +   /* IFLA_BOND_SLAVE_CL_LACP_BYPASS_PRIO */
 		0;
 }
 
@@ -5285,8 +5285,8 @@ static int bond_fill_slave_info(struct sk_buff *skb,
 					agg->aggregator_identifier))
 				goto nla_put_failure;
 
-		if (nla_put_u32(skb, IFLA_BOND_SLAVE_CL_LACP_FB_PRIO,
-				slave->lacp_fallback_priority))
+		if (nla_put_u32(skb, IFLA_BOND_SLAVE_CL_LACP_BYPASS_PRIO,
+				slave->lacp_bypass_priority))
 			goto nla_put_failure;
 	}
 
diff --git a/drivers/net/bonding/bond_procfs.c b/drivers/net/bonding/bond_procfs.c
index 13217bf..83544fb 100644
--- a/drivers/net/bonding/bond_procfs.c
+++ b/drivers/net/bonding/bond_procfs.c
@@ -151,11 +151,11 @@ static void bond_info_show_master(struct seq_file *seq)
 				   ad_info.partner_system);
 		}
 
-		seq_printf(seq, "Fall back Info:\n");
+		seq_printf(seq, "LACP Bypass Info:\n");
 		seq_printf(seq, "\tAllowed: %d\n",
-			   bond->params.lacp_fallback_allow);
+			   bond->params.lacp_bypass_allow);
 		seq_printf(seq, "\tTimeout: %d\n",
-			   bond->params.lacp_fallback_period);
+			   bond->params.lacp_bypass_period);
 	}
 }
 
@@ -191,12 +191,12 @@ static void bond_info_show_slave(struct seq_file *seq,
 				   agg->aggregator_identifier);
 		else
 			seq_puts(seq, "Aggregator ID: N/A\n");
-		seq_printf(seq, "Lacp fall back priority: %d\n",
-			   slave->lacp_fallback_priority);
-		if (SLAVE_AD_INFO(slave).port.sm_rx_state == AD_RX_FALLBACK)
-			seq_printf(seq, "LACP fall back: on\n");
-		if (SLAVE_AD_INFO(slave).port.sm_rx_state == AD_RX_FALLBACK_EXPIRED)
-			seq_printf(seq, "LACP fall back: expired\n");
+		seq_printf(seq, "LACP bypass priority: %d\n",
+			   slave->lacp_bypass_priority);
+		if (SLAVE_AD_INFO(slave).port.sm_rx_state == AD_RX_BYPASS)
+			seq_printf(seq, "LACP bypass: on\n");
+		if (SLAVE_AD_INFO(slave).port.sm_rx_state == AD_RX_BYPASS_EXPIRED)
+			seq_printf(seq, "LACP bypass: expired\n");
 	}
 	seq_printf(seq, "Slave queue ID: %d\n", slave->queue_id);
 }
diff --git a/drivers/net/bonding/bond_sysfs.c b/drivers/net/bonding/bond_sysfs.c
index 4abf593..4e377e0 100644
--- a/drivers/net/bonding/bond_sysfs.c
+++ b/drivers/net/bonding/bond_sysfs.c
@@ -53,28 +53,28 @@ struct slave_attribute {
 	int (*store)(struct slave *, unsigned long);
 };
 
-static ssize_t show_lacp_fallback_priority(struct slave *slave, char *buf)
+static ssize_t show_lacp_bypass_priority(struct slave *slave, char *buf)
 {
-	return sprintf(buf, "%d\n", slave->lacp_fallback_priority);
+	return sprintf(buf, "%d\n", slave->lacp_bypass_priority);
 }
 
-static int store_lacp_fallback_priority(struct slave *slave, unsigned long val)
+static int store_lacp_bypass_priority(struct slave *slave, unsigned long val)
 {
-	slave->lacp_fallback_priority = val;
+	slave->lacp_bypass_priority = val;
 	return 0;
 }
 
-static const struct slave_attribute slave_lacp_fallback_priority = {
+static const struct slave_attribute slave_lacp_bypass_priority = {
         .attr = {
-                .name = "lacp_fallback_priority",
+                .name = "lacp_bypass_priority",
                 .mode = S_IWUSR | S_IRUGO,
         },
-        .show = show_lacp_fallback_priority,
-        .store = store_lacp_fallback_priority,
+        .show = show_lacp_bypass_priority,
+        .store = store_lacp_bypass_priority,
 };
 
 static const struct slave_attribute *slave_attrs[] = {
-	&slave_lacp_fallback_priority,
+	&slave_lacp_bypass_priority,
 	NULL
 };
 
@@ -984,16 +984,16 @@ static ssize_t bonding_store_min_links(struct device *d,
 static DEVICE_ATTR(min_links, S_IRUGO | S_IWUSR,
 		   bonding_show_min_links, bonding_store_min_links);
 
-static ssize_t bonding_show_lacp_fallback_allow(struct device *d,
+static ssize_t bonding_show_lacp_bypass_allow(struct device *d,
 						struct device_attribute *attr,
 						char *buf)
 {
 	struct bonding *bond = to_bond(d);
 
-	return sprintf(buf, "%d\n", bond->params.lacp_fallback_allow);
+	return sprintf(buf, "%d\n", bond->params.lacp_bypass_allow);
 }
 
-static ssize_t bonding_store_lacp_fallback_allow(struct device *d,
+static ssize_t bonding_store_lacp_bypass_allow(struct device *d,
 						 struct device_attribute *attr,
 						 const char *buf, size_t count)
 {
@@ -1002,7 +1002,7 @@ static ssize_t bonding_store_lacp_fallback_allow(struct device *d,
 	unsigned int new_value;
 
 	if (bond->params.mode != BOND_MODE_8023AD) {
-		pr_err("%s: Unable to update lacp_fallback_allow because bond is not "
+		pr_err("%s: Unable to update lacp_bypass_allow because bond is not "
 			   "in 802.3ad mode.\n", bond->dev->name);
 		ret = -EPERM;
 		return ret;
@@ -1010,33 +1010,33 @@ static ssize_t bonding_store_lacp_fallback_allow(struct device *d,
 
 	ret = kstrtouint(buf, 0, &new_value);
 	if (ret < 0) {
-                pr_err("%s: Ignoring invalid lacp_fallback_allow value %s.\n",
+                pr_err("%s: Ignoring invalid lacp_bypass_allow value %s.\n",
                        bond->dev->name, buf);
                 return ret;
 	}
 
 	if (!rtnl_trylock())
 		return restart_syscall();
-	pr_debug("%s: Setting lacp_fallback_allow to %u\n",
+	pr_debug("%s: Setting lacp_bypass_allow to %u\n",
                  bond->dev->name, new_value);
-	bond->params.lacp_fallback_allow = new_value;
+	bond->params.lacp_bypass_allow = new_value;
 	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
 	rtnl_unlock();
 	return count;
 }
-static DEVICE_ATTR(lacp_fallback_allow, S_IRUGO | S_IWUSR,
-		   bonding_show_lacp_fallback_allow, bonding_store_lacp_fallback_allow);
+static DEVICE_ATTR(lacp_bypass_allow, S_IRUGO | S_IWUSR,
+		   bonding_show_lacp_bypass_allow, bonding_store_lacp_bypass_allow);
 
-static ssize_t bonding_show_lacp_fallback_period(struct device *d,
+static ssize_t bonding_show_lacp_bypass_period(struct device *d,
 						 struct device_attribute *attr,
 						 char *buf)
 {
 	struct bonding *bond = to_bond(d);
 
-	return sprintf(buf, "%d\n", bond->params.lacp_fallback_period);
+	return sprintf(buf, "%d\n", bond->params.lacp_bypass_period);
 }
 
-static ssize_t bonding_store_lacp_fallback_period(struct device *d,
+static ssize_t bonding_store_lacp_bypass_period(struct device *d,
 						  struct device_attribute *attr,
 						  const char *buf, size_t count)
 {
@@ -1045,7 +1045,7 @@ static ssize_t bonding_store_lacp_fallback_period(struct device *d,
 	unsigned int new_value;
 
 	if (bond->params.mode != BOND_MODE_8023AD) {
-		pr_err("%s: Unable to update lacp_fallback_period because bond is not "
+		pr_err("%s: Unable to update lacp_bypass_period because bond is not "
 			   "in 802.3ad mode.\n", bond->dev->name);
 		ret = -EPERM;
 		return ret;
@@ -1053,34 +1053,34 @@ static ssize_t bonding_store_lacp_fallback_period(struct device *d,
 
 	ret = kstrtouint(buf, 0, &new_value);
 	if (ret < 0) {
-		pr_err("%s: Ignoring invalid lacp_fallback_period value %s.\n",
+		pr_err("%s: Ignoring invalid lacp_bypass_period value %s.\n",
 			bond->dev->name, buf);
 		return ret;
 	}
 
 	if (!rtnl_trylock())
 		return restart_syscall();
-	pr_debug("%s: Setting lacp_fallback period to %u\n",
+	pr_debug("%s: Setting lacp_bypass period to %u\n",
 		 bond->dev->name, new_value);
-	bond->params.lacp_fallback_period = new_value;
+	bond->params.lacp_bypass_period = new_value;
 	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
 	rtnl_unlock();
 	return count;
 }
-static DEVICE_ATTR(lacp_fallback_period, S_IRUGO | S_IWUSR,
-                   bonding_show_lacp_fallback_period,
-		   bonding_store_lacp_fallback_period);
+static DEVICE_ATTR(lacp_bypass_period, S_IRUGO | S_IWUSR,
+                   bonding_show_lacp_bypass_period,
+		   bonding_store_lacp_bypass_period);
 
-static ssize_t bonding_show_lacp_fallback_active(struct device *d,
+static ssize_t bonding_show_lacp_bypass_active(struct device *d,
 						 struct device_attribute *attr,
 						 char *buf)
 {
 	struct bonding *bond = to_bond(d);
 
-	return sprintf(buf, "%d\n", bond->params.lacp_fallback_active);
+	return sprintf(buf, "%d\n", bond->params.lacp_bypass_active);
 }
 
-static ssize_t bonding_store_lacp_fallback_active(struct device *d,
+static ssize_t bonding_store_lacp_bypass_active(struct device *d,
 						  struct device_attribute *attr,
 						  const char *buf, size_t count)
 {
@@ -1089,7 +1089,7 @@ static ssize_t bonding_store_lacp_fallback_active(struct device *d,
 	unsigned int new_value;
 
 	if (bond->params.mode != BOND_MODE_8023AD) {
-		pr_err("%s: Unable to update lacp_fallback_active because bond is not "
+		pr_err("%s: Unable to update lacp_bypass_active because bond is not "
 			   "in 802.3ad mode.\n", bond->dev->name);
 		ret = -EPERM;
 		return ret;
@@ -1097,23 +1097,23 @@ static ssize_t bonding_store_lacp_fallback_active(struct device *d,
 
 	ret = kstrtouint(buf, 0, &new_value);
 	if (ret < 0) {
-		pr_err("%s: Ignoring invalid lacp_fallback_active value %s.\n",
+		pr_err("%s: Ignoring invalid lacp_bypass_active value %s.\n",
 			bond->dev->name, buf);
 		return ret;
 	}
 
 	if (!rtnl_trylock())
 		return restart_syscall();
-	pr_debug("%s: Setting lacp_fallback active to %u\n",
+	pr_debug("%s: Setting lacp_bypass active to %u\n",
 		 bond->dev->name, new_value);
-	bond->params.lacp_fallback_active = new_value;
+	bond->params.lacp_bypass_active = new_value;
 	call_netdevice_notifiers(NETDEV_CHANGEINFODATA, bond->dev);
 	rtnl_unlock();
 	return count;
 }
-static DEVICE_ATTR(lacp_fallback_active, S_IRUGO | S_IWUSR,
-                   bonding_show_lacp_fallback_active,
-                   bonding_store_lacp_fallback_active);
+static DEVICE_ATTR(lacp_bypass_active, S_IRUGO | S_IWUSR,
+                   bonding_show_lacp_bypass_active,
+                   bonding_store_lacp_bypass_active);
 
 static ssize_t bonding_show_ad_select(struct device *d,
 				      struct device_attribute *attr,
@@ -2092,9 +2092,9 @@ static struct attribute *per_bond_attrs[] = {
 	&dev_attr_all_slaves_active.attr,
 	&dev_attr_resend_igmp.attr,
 	&dev_attr_min_links.attr,
-	&dev_attr_lacp_fallback_allow.attr,
-	&dev_attr_lacp_fallback_active.attr,
-	&dev_attr_lacp_fallback_period.attr,
+	&dev_attr_lacp_bypass_allow.attr,
+	&dev_attr_lacp_bypass_active.attr,
+	&dev_attr_lacp_bypass_period.attr,
 	NULL,
 };
 
diff --git a/drivers/net/bonding/bonding.h b/drivers/net/bonding/bonding.h
index af93ed4..b3594f7 100644
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@ -160,9 +160,9 @@ struct bond_params {
 	int tx_queues;
 	int all_slaves_active;
 	int resend_igmp;
-	int lacp_fallback_allow;
-	int lacp_fallback_active;
-	u32 lacp_fallback_period;
+	int lacp_bypass_allow;
+	int lacp_bypass_active;
+	u32 lacp_bypass_period;
 };
 
 struct bond_parm_tbl {
@@ -197,7 +197,7 @@ struct slave {
 	u32    speed;
 	u16    queue_id;
 	u8     perm_hwaddr[ETH_ALEN];
-	int    lacp_fallback_priority;
+	int    lacp_bypass_priority;
 	struct ad_slave_info ad_info; /* HUGE - better to dynamically alloc */
 	struct tlb_slave_info tlb_info;
 #ifdef CONFIG_NET_POLL_CONTROLLER
diff --git a/include/linux/if_link.h b/include/linux/if_link.h
index ee99f97..086e2ad 100644
--- a/include/linux/if_link.h
+++ b/include/linux/if_link.h
@@ -354,9 +354,9 @@ enum {
 	IFLA_BOND_AD_INFO,
 
 	IFLA_BOND_CL_START = 100,
-	IFLA_BOND_CL_LACP_FB_ALLOW = IFLA_BOND_CL_START,
-	IFLA_BOND_CL_LACP_FB_ACTIVE,
-	IFLA_BOND_CL_LACP_FB_PERIOD,
+	IFLA_BOND_CL_LACP_BYPASS_ALLOW = IFLA_BOND_CL_START,
+	IFLA_BOND_CL_LACP_BYPASS_ACTIVE,
+	IFLA_BOND_CL_LACP_BYPASS_PERIOD,
 	__IFLA_BOND_MAX,
 };
 
@@ -384,7 +384,7 @@ enum {
 	IFLA_BOND_SLAVE_AD_AGGREGATOR_ID,
 
 	IFLA_BOND_SLAVE_CL_START = 50,
-	IFLA_BOND_SLAVE_CL_LACP_FB_PRIO = IFLA_BOND_SLAVE_CL_START,
+	IFLA_BOND_SLAVE_CL_LACP_BYPASS_PRIO = IFLA_BOND_SLAVE_CL_START,
 	__IFLA_BOND_SLAVE_MAX,
 };
 
