When a slave is added to a bond and it is not in full duplex mode,
AD_PORT_LACP_ENABLED flag is cleared, due to this LACP PDU is not sent
on slave. When the duplex is changed to full, the flag needs to be set
to send LACP PDU.

diff --git a/drivers/net/bonding/bond_3ad.c b/drivers/net/bonding/bond_3ad.c
index 00c349a..0b3ce2d 100644
--- a/drivers/net/bonding/bond_3ad.c
+++ b/drivers/net/bonding/bond_3ad.c
@@ -1152,6 +1152,9 @@ static void ad_rx_machine(struct lacpdu *lacpdu, struct port *port)
  */
 static void ad_tx_machine(struct port *port)
 {
+	struct bonding *bond = __get_bond_by_port(port);
+	struct slave *slave = port->slave;
+
 	// check if tx timer expired, to verify that we do not send more than 3 packets per second
 	if (port->sm_tx_timer_counter && !(--port->sm_tx_timer_counter)) {
 		// check if there is something to send
@@ -1159,8 +1162,9 @@ static void ad_tx_machine(struct port *port)
 			__update_lacpdu_from_port(port);
 
 			if (ad_lacpdu_send(port) >= 0) {
-				pr_debug("Sent LACPDU on port %d\n",
-					 port->actor_port_number);
+				pr_debug("Sent LACPDU on port %d, bond %s slave %s\n",
+					 port->actor_port_number, bond ? bond->dev->name:"",
+					slave ? slave->dev->name:"");
 
 				/* mark ntt as false, so it will not be sent again until
 				   demanded */
@@ -2183,6 +2187,7 @@ re_arm:
 static void bond_3ad_rx_indication(struct lacpdu *lacpdu, struct slave *slave, u16 length)
 {
 	struct port *port;
+	struct bonding *bond;
 
 	if (length >= sizeof(struct lacpdu)) {
 
@@ -2193,11 +2198,13 @@ static void bond_3ad_rx_indication(struct lacpdu *lacpdu, struct slave *slave, u
 				   slave->dev->name, slave->dev->master->name);
 			return;
 		}
+		bond = __get_bond_by_port(port);
 
 		switch (lacpdu->subtype) {
 		case AD_TYPE_LACPDU:
-			pr_debug("Received LACPDU on port %d\n",
-				 port->actor_port_number);
+			pr_debug("Received LACPDU on port %d bond %s slave %s\n",
+				 port->actor_port_number, (bond && bond->dev) ? bond->dev->name:"",
+				 (port->slave && port->slave->dev) ? port->slave->dev->name:"");
 			/* Protect against concurrent state machines */
 			__get_state_machine_lock(port);
 			ad_rx_machine(lacpdu, port);
@@ -2265,8 +2272,10 @@ void bond_3ad_adapter_speed_changed(struct slave *slave)
 void bond_3ad_adapter_duplex_changed(struct slave *slave)
 {
 	struct port *port;
+	struct bonding *bond;
 
 	port = &(SLAVE_AD_INFO(slave).port);
+	bond = __get_bond_by_port(port);
 
 	// if slave is null, the whole port is not initialized
 	if (!port->slave) {
@@ -2278,7 +2287,11 @@ void bond_3ad_adapter_duplex_changed(struct slave *slave)
 	port->actor_admin_port_key &= ~AD_DUPLEX_KEY_BITS;
 	port->actor_oper_port_key = port->actor_admin_port_key |=
 		__get_duplex(port);
-	pr_debug("Port %d changed duplex\n", port->actor_port_number);
+	pr_debug("Port %d bond %s slave %s changed duplex\n", port->actor_port_number,
+			(bond && bond->dev) ? bond->dev->name:"",
+			(port->slave && port->slave->dev) ? port->slave->dev->name:"");
+	if (port->actor_oper_port_key & AD_DUPLEX_KEY_BITS)
+		port->sm_vars |= AD_PORT_LACP_ENABLED;
 	// there is no need to reselect a new aggregator, just signal the
 	// state machines to reinitialize
 	port->sm_vars |= AD_PORT_BEGIN;
