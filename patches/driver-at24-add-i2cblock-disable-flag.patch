Adds a flag that lets you disable FEATURE_I2C_BLOCK_READ on a device basis.

diff --git a/drivers/misc/eeprom/at24.c b/drivers/misc/eeprom/at24.c
index 841631c..67f4e6f 100644
--- a/drivers/misc/eeprom/at24.c
+++ b/drivers/misc/eeprom/at24.c
@@ -582,8 +582,9 @@ static int at24_probe(struct i2c_client *client, const struct i2c_device_id *id)
 	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
 		if (chip.flags & AT24_FLAG_ADDR16) {
 			use_smbus = I2C_SMBUS_BYTE_DATA;
-		} else if (i2c_check_functionality(client->adapter,
-				I2C_FUNC_SMBUS_READ_I2C_BLOCK)) {
+		} else if (!(chip.flags & AT24_FLAG_DISABLE_I2CBLOCK) &&
+			   (i2c_check_functionality(client->adapter,
+						    I2C_FUNC_SMBUS_READ_I2C_BLOCK))) {
 			use_smbus = I2C_SMBUS_I2C_BLOCK_DATA;
 		} else if (i2c_check_functionality(client->adapter,
 				I2C_FUNC_SMBUS_READ_WORD_DATA)) {
@@ -630,8 +631,9 @@ static int at24_probe(struct i2c_client *client, const struct i2c_device_id *id)
 	writable = !(chip.flags & AT24_FLAG_READONLY);
 	if (writable) {
 		if (!use_smbus ||
+		    (!(chip.flags & AT24_FLAG_DISABLE_I2CBLOCK) &&
 		    i2c_check_functionality(client->adapter,
-					    I2C_FUNC_SMBUS_WRITE_I2C_BLOCK) ||
+					    I2C_FUNC_SMBUS_WRITE_I2C_BLOCK)) ||
 		    i2c_check_functionality(client->adapter,
 					    I2C_FUNC_SMBUS_WRITE_WORD_DATA) ||
 		    i2c_check_functionality(client->adapter,
diff --git a/include/linux/i2c/at24.h b/include/linux/i2c/at24.h
index a881e5e..3bdb466 100644
--- a/include/linux/i2c/at24.h
+++ b/include/linux/i2c/at24.h
@@ -25,6 +25,7 @@ struct at24_platform_data {
 #define AT24_FLAG_READONLY	0x40	/* sysfs-entry will be read-only */
 #define AT24_FLAG_IRUGO		0x20	/* sysfs-entry will be world-readable */
 #define AT24_FLAG_TAKE8ADDR	0x10	/* take always 8 addresses (24c00) */
+#define AT24_FLAG_DISABLE_I2CBLOCK 0x08 /*disable smbus i2c block access */
 
 	void		(*setup)(struct memory_accessor *, void *context);
 	void		*context;
