Add support for configuring igmp querier on a per vlan basis including
enabling/disabling querier and setting querier ip address.

diff --git a/net/bridge/br_multicast.c b/net/bridge/br_multicast.c
index 0047db7..d72456e 100644
--- a/net/bridge/br_multicast.c
+++ b/net/bridge/br_multicast.c
@@ -370,15 +370,22 @@ out:
 }
 
 static struct sk_buff *br_ip4_multicast_alloc_query(struct net_bridge *br,
-						    __be32 group)
+						    __be32 group,
+						    __u16 vid,
+						    bool tagged)
 {
 	struct sk_buff *skb;
 	struct igmphdr *ih;
 	struct ethhdr *eth;
 	struct iphdr *iph;
+	int vh_size = 0;
+
+	/* if vid is non-zero, insert the 1Q header also */
+	if (vid && tagged)
+		vh_size = sizeof(struct vlan_hdr);
 
 	skb = netdev_alloc_skb_ip_align(br->dev, sizeof(*eth) + sizeof(*iph) +
-						 sizeof(*ih) + 4);
+						 vh_size + sizeof(*ih) + 4);
 	if (!skb)
 		goto out;
 
@@ -397,6 +404,14 @@ static struct sk_buff *br_ip4_multicast_alloc_query(struct net_bridge *br,
 	eth->h_proto = htons(ETH_P_IP);
 	skb_put(skb, sizeof(*eth));
 
+	if (vid && tagged) {
+		skb = vlan_put_tag(skb, vid);
+		if (!skb) {
+			pr_err("Error: failed to insert VLAN tag\n");
+			return NULL;
+		}
+	}
+
 	skb_set_network_header(skb, skb->len);
 	iph = ip_hdr(skb);
 
@@ -408,8 +423,18 @@ static struct sk_buff *br_ip4_multicast_alloc_query(struct net_bridge *br,
 	iph->frag_off = htons(IP_DF);
 	iph->ttl = 1;
 	iph->protocol = IPPROTO_IGMP;
-	iph->saddr = br->multicast_query_use_ifaddr ?
-		     inet_dev_select_addr(br->dev, 0, RT_SCOPE_LINK) : 0;
+	if (vid == 0) {
+		iph->saddr = br->multicast_query_use_ifaddr ?
+			     inet_dev_select_addr(br->dev, 0, RT_SCOPE_LINK) : 0;
+	} else {
+		struct bridge_mcast_querier_src *s;
+		list_for_each_entry(s, &br->ip4_querier.vlist, list) {
+			if (vid == s->src.vid) {
+				iph->saddr = htonl(s->src.u.ip4);
+				break;
+			}
+		}
+	}
 	iph->daddr = htonl(INADDR_ALLHOSTS_GROUP);
 	((u8 *)&iph[1])[0] = IPOPT_RA;
 	((u8 *)&iph[1])[1] = 4;
@@ -437,7 +462,9 @@ out:
 
 #if IS_ENABLED(CONFIG_IPV6)
 static struct sk_buff *br_ip6_multicast_alloc_query(struct net_bridge *br,
-						    const struct in6_addr *group)
+						    const struct in6_addr *group,
+						    __u16 vid,
+						    bool tagged)
 {
 	struct sk_buff *skb;
 	struct ipv6hdr *ip6h;
@@ -446,8 +473,9 @@ static struct sk_buff *br_ip6_multicast_alloc_query(struct net_bridge *br,
 	u8 *hopopt;
 	unsigned long interval;
 
-	skb = netdev_alloc_skb_ip_align(br->dev, sizeof(*eth) + sizeof(*ip6h) +
-						 8 + sizeof(*mldq));
+	/* TBD: if vid is non-zero, insert a 1Q header */
+	skb = netdev_alloc_skb_ip_align(br->dev, sizeof(*eth) +
+					sizeof(*ip6h) + 8 + sizeof(*mldq));
 	if (!skb)
 		goto out;
 
@@ -519,14 +547,17 @@ out:
 #endif
 
 static struct sk_buff *br_multicast_alloc_query(struct net_bridge *br,
-						struct br_ip *addr)
+						struct br_ip *addr,
+						bool tagged)
 {
 	switch (addr->proto) {
 	case htons(ETH_P_IP):
-		return br_ip4_multicast_alloc_query(br, addr->u.ip4);
+		return br_ip4_multicast_alloc_query(br, addr->u.ip4, addr->vid,
+						    tagged);
 #if IS_ENABLED(CONFIG_IPV6)
 	case htons(ETH_P_IPV6):
-		return br_ip6_multicast_alloc_query(br, &addr->u.ip6);
+		return br_ip6_multicast_alloc_query(br, &addr->u.ip6, addr->vid,
+						    tagged);
 #endif
 	}
 	return NULL;
@@ -821,8 +852,15 @@ static void __br_multicast_send_query(struct net_bridge *br,
 				      struct br_ip *ip)
 {
 	struct sk_buff *skb;
+	bool tagged = false;
 
-	skb = br_multicast_alloc_query(br, ip);
+	if (port && ip->vid) {
+		if (!br->vlan_enabled || !nbp_vlan_find(port, ip->vid))
+			return;
+		if (br_get_pvid(nbp_get_vlan_info(port)) != ip->vid)
+			tagged = true;
+	}
+	skb = br_multicast_alloc_query(br, ip, tagged);
 	if (!skb)
 		return;
 
@@ -842,6 +880,8 @@ static void br_multicast_send_query(struct net_bridge *br,
 	unsigned long time;
 	struct br_ip br_group;
 	struct bridge_mcast_querier *querier = NULL;
+	struct bridge_mcast_querier_src *s;
+	int num_vlans = 0;
 
 	if (!netif_running(br->dev) || br->multicast_disabled ||
 	    !br->multicast_querier)
@@ -863,7 +903,18 @@ static void br_multicast_send_query(struct net_bridge *br,
 	if (!querier || timer_pending(&querier->timer))
 		return;
 
-	__br_multicast_send_query(br, port, &br_group);
+	if (br->vlan_enabled) {
+		/* for each vlan in the list, populate the br_group.vid
+		 * and send a query
+		 */
+		list_for_each_entry(s, &querier->vlist, list) {
+			br_group.vid = s->src.vid;
+			__br_multicast_send_query(br, port, &br_group);
+			num_vlans++;
+		}
+	}
+	if (!br->vlan_enabled || num_vlans == 0)
+		__br_multicast_send_query(br, port, &br_group);
 
 	time = jiffies;
 	time += query->startup_sent < br->multicast_startup_query_count ?
@@ -1399,6 +1450,9 @@ static void br_multicast_leave_group(struct net_bridge *br,
 		time = jiffies + br->multicast_last_member_count *
 				 br->multicast_last_member_interval;
 
+		/* Need to either maintain per vlan timer, or merge
+		 * the time out
+		 */
 		mod_timer(&query->timer, time);
 
 		for (p = mlock_dereference(mp->ports, br);
@@ -1803,6 +1857,8 @@ void br_multicast_init(struct net_bridge *br)
 #if IS_ENABLED(CONFIG_IPV6)
 	br->ip6_querier.delay_time = 0;
 #endif
+	INIT_LIST_HEAD(&br->ip4_querier.vlist);
+	INIT_LIST_HEAD(&br->ip6_querier.vlist);
 
 	spin_lock_init(&br->multicast_lock);
 	setup_timer(&br->multicast_router_timer,
@@ -1854,10 +1910,21 @@ void br_multicast_dev_del(struct net_bridge *br)
 	struct net_bridge_mdb_htable *mdb;
 	struct net_bridge_mdb_entry *mp;
 	struct hlist_node *p, *n;
+	struct bridge_mcast_querier_src *ms, *mn;
 	u32 ver;
 	int i;
 
 	spin_lock_bh(&br->multicast_lock);
+	/* delete the querier lists */
+	list_for_each_entry_safe(ms, mn, &br->ip4_querier.vlist, list) {
+		list_del(&ms->list);
+		kfree(ms);
+	}
+	list_for_each_entry_safe(ms, mn, &br->ip6_querier.vlist, list) {
+		list_del(&ms->list);
+		kfree(ms);
+	}
+
 	mdb = mlock_dereference(br->mdb, br);
 	if (!mdb)
 		goto out;
@@ -2113,3 +2180,58 @@ unlock:
 
 	return err;
 }
+
+int br_multicast_add_querier_src(struct net_bridge *br,
+				 struct br_ip *src)
+{
+	struct bridge_mcast_querier_src *s;
+	int res = 1;
+
+	spin_lock_bh(&br->multicast_lock);
+	if (src->proto == ETH_P_IP) {
+		list_for_each_entry(s, &br->ip4_querier.vlist, list) {
+			if (s->src.vid == src->vid) {
+				s->src.u.ip4 = src->u.ip4;
+				goto out;
+			}
+		}
+		s = kzalloc(sizeof(struct bridge_mcast_querier_src), GFP_ATOMIC);
+		if (!s) {
+			res = -ENOMEM;
+			goto out;
+		}
+
+		s->src.u.ip4 = src->u.ip4;
+		s->src.proto = src->proto;
+		s->src.vid = src->vid;
+		list_add(&s->list, &br->ip4_querier.vlist);
+
+		// not doing start_querier since each time we send
+		// on all vlans in the querier list, it will be unscalable
+		//br_multicast_start_querier(br, &br->ip4_query);
+	}
+out:
+	spin_unlock_bh(&br->multicast_lock);
+	return res;
+}
+
+int br_multicast_del_querier_src(struct net_bridge *br,
+				 struct br_ip *src)
+{
+	struct bridge_mcast_querier_src *s;
+	int res = 1;
+
+	spin_lock_bh(&br->multicast_lock);
+	if (src->proto == ETH_P_IP) {
+		list_for_each_entry(s, &br->ip4_querier.vlist, list) {
+			if (s->src.vid == src->vid) {
+				list_del(&s->list);
+				kfree(s);
+				goto out;
+			}
+		}
+	}
+out:
+	spin_unlock_bh(&br->multicast_lock);
+	return res;
+}
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index 8f5273d..30ff5e1 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -73,10 +73,17 @@ struct bridge_mcast_query {
 	u32			startup_sent;
 };
 
+struct bridge_mcast_querier_src {
+	struct list_head	list;
+	struct br_ip		src;
+};
+
 /* other querier */
 struct bridge_mcast_querier {
 	struct timer_list		timer;
 	unsigned long			delay_time;
+	struct rcu_head			rcu;
+	struct list_head		vlist;
 };
 #endif
 
@@ -511,6 +518,12 @@ static inline bool br_multicast_querier_exists(struct net_bridge *br,
 		return false;
 	}
 }
+
+#ifdef CONFIG_BRIDGE_VLAN_FILTERING
+int br_multicast_add_querier_src(struct net_bridge *br, struct br_ip *src);
+int br_multicast_del_querier_src(struct net_bridge *br, struct br_ip *src);
+#endif
+
 #else
 static inline int br_multicast_rcv(struct net_bridge *br,
 				   struct net_bridge_port *port,
diff --git a/net/bridge/br_sysfs_br.c b/net/bridge/br_sysfs_br.c
index 951447a..e2e953a 100644
--- a/net/bridge/br_sysfs_br.c
+++ b/net/bridge/br_sysfs_br.c
@@ -19,6 +19,7 @@
 #include <linux/rtnetlink.h>
 #include <linux/spinlock.h>
 #include <linux/times.h>
+#include <linux/string.h>
 
 #include "br_private.h"
 
@@ -390,6 +391,95 @@ multicast_query_use_ifaddr_store(struct device *d,
 }
 static DEVICE_ATTR_RW(multicast_query_use_ifaddr);
 
+#ifdef CONFIG_BRIDGE_VLAN_FILTERING
+static ssize_t multicast_v4_queriers_show(struct device *d,
+					  struct device_attribute *attr,
+					  char *buf)
+{
+	struct bridge_mcast_querier_src *s;
+	struct net_bridge *br = to_bridge(d);
+	ssize_t len = 0;
+
+	list_for_each_entry(s, &br->ip4_querier.vlist, list) {
+		len += sprintf(buf + len, "%d=%d.%d.%d.%d\n", s->src.vid,
+			(s->src.u.ip4 >> 24) & 0xFF, (s->src.u.ip4 >> 16) & 0xFF,
+			(s->src.u.ip4 >> 8) & 0xFF, (s->src.u.ip4) & 0xFF);
+	}
+	return len;
+}
+
+static ssize_t
+multicast_v4_queriers_store(struct device *d,
+			    struct device_attribute *attr,
+			    const char *buf, size_t len)
+{
+	char vlan_info[128] = { 0, };
+	struct net_bridge *br = to_bridge(d);
+	char *vp = NULL, *ip = NULL;
+	struct br_ip src;
+	int src_ip[4];
+	int res = 0;
+
+	if (!rtnl_trylock())
+		return restart_syscall();
+
+	memset(&src, 0, sizeof(src));
+	src.proto = ETH_P_IP;
+	sscanf(buf, "%s", vlan_info);
+	vp = &vlan_info[1];
+	ip = strchr(vp, '=');
+	if (ip) {
+		*ip = '\0';
+		ip++;
+	}
+	if ((kstrtou16(vp, 10, &src.vid) != 0) || (src.vid >= VLAN_N_VID)) {
+		res = -EINVAL;
+		goto out;
+	}
+
+	switch (vlan_info[0]) {
+	case '+':
+		if (!ip)
+			src.u.ip4 = 0;
+		else if (sscanf(ip, "%d.%d.%d.%d",
+			&src_ip[0], &src_ip[1], &src_ip[2], &src_ip[3]) != 4) {
+			res = -EINVAL;
+			goto out;
+		} else {
+			src.u.ip4 = ((src_ip[0] & 0xFF) << 24) +
+				    ((src_ip[1] & 0xFF) << 16) +
+				    ((src_ip[2] & 0xFF) << 8) +
+				    (src_ip[3] & 0xFF);
+			if (ipv4_is_multicast(src.u.ip4) ||
+			    ipv4_is_lbcast(src.u.ip4)) {
+				res = -EINVAL;
+				goto out;
+			}
+		}
+		res = br_multicast_add_querier_src(br, &src);
+		break;
+	case '-':
+		res = br_multicast_del_querier_src(br, &src);
+		break;
+	default:
+		goto err_no_cmd;
+	}
+
+	if (res == 1)
+		goto out;
+err_no_cmd:
+	res = -EPERM;
+out:
+	rtnl_unlock();
+	if (res == 1)
+		return len;
+	else
+		return res;
+}
+
+static DEVICE_ATTR_RW(multicast_v4_queriers);
+#endif
+
 static ssize_t multicast_querier_show(struct device *d,
 				      struct device_attribute *attr,
 				      char *buf)
@@ -727,6 +817,9 @@ static struct attribute *bridge_attrs[] = {
 	&dev_attr_multicast_snooping.attr,
 	&dev_attr_multicast_querier.attr,
 	&dev_attr_multicast_query_use_ifaddr.attr,
+#ifdef CONFIG_BRIDGE_VLAN_FILTERING
+	&dev_attr_multicast_v4_queriers.attr,
+#endif
 	&dev_attr_hash_elasticity.attr,
 	&dev_attr_hash_max.attr,
 	&dev_attr_multicast_last_member_count.attr,
