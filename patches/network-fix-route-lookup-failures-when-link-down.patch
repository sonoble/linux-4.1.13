net: fix errors on route lookup when links were down

The current code in 2.5 has a problem where software route lookups will
not honor the fact that a route is dead when doing the lookup.  This is
a problem for CPU generated frames, but not for those whose forwarding
is offloaded.

The problem with ipv4 before the change:
$ ip route show
10.0.0.0/24 dev eth1  proto kernel  scope link  src 10.0.0.1
20.0.0.0/24 dev eth2  proto kernel  scope link  src 20.0.0.1 dead
20.0.0.0/24 via 10.0.0.2 dev eth1  metric 2
30.0.0.0/24 dev eth3  proto kernel  scope link  src 30.0.0.1
$ ip route get 20.0.0.20
20.0.0.20 dev eth2  src 20.0.0.1

after the patch:
$ ip route get 20.0.0.20
20.0.0.20 via 10.0.0.2 dev eth1  src 10.0.0.1

The problem with ipv6 before the change:
$ ip -6 route show
2100::/8 dev eth1  proto kernel  metric 256
2200::/8 dev eth2  proto kernel  metric 256 dead
2200::/8 via 2100::2 dev eth1  metric 256
fe80::/64 dev eth1  proto kernel  metric 256
fe80::/64 dev eth2  proto kernel  metric 256 dead
fe80::/64 dev eth0  proto kernel  metric 256
$ ip -6 route get 2200::1234
2200::1234 from :: via 2200::1234 dev eth2  src 2200::1  metric 0

after the patch:
$ ip -6 route get 2200:1234
2200::1234 from :: via 2100::2 dev eth1  src 2100::1  metric 0

diff --git a/include/net/fib_rules.h b/include/net/fib_rules.h
index 075f1e3..d99c19b 100644
--- a/include/net/fib_rules.h
+++ b/include/net/fib_rules.h
@@ -33,6 +33,7 @@ struct fib_lookup_arg {
 	struct fib_rule		*rule;
 	int			flags;
 #define FIB_LOOKUP_NOREF	1
+#define FIB_LOOKUP_ALLOWDEAD	2
 };
 
 struct fib_rules_ops {
diff --git a/include/net/ip_fib.h b/include/net/ip_fib.h
index 2124004..2a661b7 100644
--- a/include/net/ip_fib.h
+++ b/include/net/ip_fib.h
@@ -217,6 +217,7 @@ extern u32 fib_rules_tclass(const struct fib_result *res);
 #endif
 
 extern int fib_lookup(struct net *n, struct flowi4 *flp, struct fib_result *res);
+extern int fib_lookup_flags(struct net *n, struct flowi4 *flp, struct fib_result *res, int flags);
 
 extern struct fib_table *fib_new_table(struct net *net, u32 id);
 extern struct fib_table *fib_get_table(struct net *net, u32 id);
diff --git a/net/ipv4/fib_rules.c b/net/ipv4/fib_rules.c
index 46339ba..593dbae 100644
--- a/net/ipv4/fib_rules.c
+++ b/net/ipv4/fib_rules.c
@@ -56,9 +56,14 @@ u32 fib_rules_tclass(const struct fib_result *res)
 
 int fib_lookup(struct net *net, struct flowi4 *flp, struct fib_result *res)
 {
+	return fib_lookup_flags(net, flp, res, 0);
+}
+
+int fib_lookup_flags(struct net *net, struct flowi4 *flp, struct fib_result *res, int flags)
+{
 	struct fib_lookup_arg arg = {
 		.result = res,
-		.flags = FIB_LOOKUP_NOREF,
+		.flags = FIB_LOOKUP_NOREF | flags,
 	};
 	int err;
 
diff --git a/net/ipv4/fib_semantics.c b/net/ipv4/fib_semantics.c
index f305b9f..c5d9338 100644
--- a/net/ipv4/fib_semantics.c
+++ b/net/ipv4/fib_semantics.c
@@ -570,7 +570,7 @@ static int fib_check_nh(struct fib_config *cfg, struct fib_info *fi,
 			/* It is not necessary, but requires a bit of thinking */
 			if (fl4.flowi4_scope < RT_SCOPE_LINK)
 				fl4.flowi4_scope = RT_SCOPE_LINK;
-			err = fib_lookup(net, &fl4, &res);
+			err = fib_lookup_flags(net, &fl4, &res, FIB_LOOKUP_ALLOWDEAD);
 			if (err) {
 				rcu_read_unlock();
 				return err;
diff --git a/net/ipv4/fib_trie.c b/net/ipv4/fib_trie.c
index 17bd9ce..60c161f 100644
--- a/net/ipv4/fib_trie.c
+++ b/net/ipv4/fib_trie.c
@@ -1386,10 +1386,12 @@ static int check_leaf(struct fib_table *tb, struct trie *t, struct leaf *l,
 #endif
 				return err;
 			}
-			/* allow routes to be added if link is down */
-			if ((fi->fib_flags & RTNH_F_DEAD) && !(fi->fib_flags & RTNH_F_DEAD_LINKDOWN))
-				continue;
 
+			if (!(fib_flags & FIB_LOOKUP_ALLOWDEAD)) {
+				/* if route is dead and link is down, keep looking  */
+				if ((fi->fib_flags & RTNH_F_DEAD) && (fi->fib_flags & RTNH_F_DEAD_LINKDOWN))
+					continue;
+			}
 			for (nhsel = 0; nhsel < fi->fib_nhs; nhsel++) {
 				const struct fib_nh *nh = &fi->fib_nh[nhsel];
 
diff --git a/net/ipv6/route.c b/net/ipv6/route.c
index 4cdf821..97015d4 100644
--- a/net/ipv6/route.c
+++ b/net/ipv6/route.c
@@ -569,12 +569,12 @@ static struct rt6_info *find_rr_leaf(struct fib6_node *fn,
 	int mpri = -1;
 
 	match = NULL;
-	for (rt = rr_head; rt && rt->rt6i_metric == metric;
+	for (rt = rr_head; rt;
 	     rt = rt->dst.rt6_next) {
 		if (netif_carrier_ok(rt->rt6i_dev) || !kill_routes_on_linkdown)
 			match = find_match(rt, oif, strict, &mpri, match);
 	}
-	for (rt = fn->leaf; rt && rt != rr_head && rt->rt6i_metric == metric;
+	for (rt = fn->leaf; rt && rt != rr_head;
 	     rt = rt->dst.rt6_next) {
 		if (netif_carrier_ok(rt->rt6i_dev) || !kill_routes_on_linkdown)
 			match = find_match(rt, oif, strict, &mpri, match);
