driver at24 fix odd length two byte access

For I2C_SMBUS_WORD_DATA read accesses check if the access length is
one or two bytes.  For transactions that have an odd length eventualy
we read 1 byte at the end to complete the request.

The previous code always used a count of 2, which works fine if the
requested total length is even.  If the requested length was odd,
however, the code would cause a kernel OOPS.

The while (count) loop would go forever as count went from 1 to -1,
never becoming zero.  Also the return buffer would overrun.

This patch allows for reading an odd number of bytes in
I2C_SMBUS_WORD_DATA mode.

diff --git a/drivers/misc/eeprom/at24.c b/drivers/misc/eeprom/at24.c
index ab1ad41..47bcd10 100644
--- a/drivers/misc/eeprom/at24.c
+++ b/drivers/misc/eeprom/at24.c
@@ -192,7 +192,8 @@ static ssize_t at24_eeprom_read(struct at24_data *at24, char *buf,
 			count = I2C_SMBUS_BLOCK_MAX;
 		break;
 	case I2C_SMBUS_WORD_DATA:
-		count = 2;
+		/* Check for odd length transaction */
+		count = (count == 1) ? 1 : 2;
 		break;
 	case I2C_SMBUS_BYTE_DATA:
 		count = 1;
@@ -237,7 +238,8 @@ static ssize_t at24_eeprom_read(struct at24_data *at24, char *buf,
 			status = i2c_smbus_read_word_data(client, offset);
 			if (status >= 0) {
 				buf[0] = status & 0xff;
-				buf[1] = status >> 8;
+				if (count == 2)
+					buf[1] = status >> 8;
 				status = count;
 			}
 			break;
