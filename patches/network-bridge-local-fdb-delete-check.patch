ge: Fix the way to check if a local fdb entry can be deleted

hould take into account the followings when deleting a local fdb
y.

p_vlan_find() can be used only when vid != 0 to check if an entry is
letable, because a fdb entry with vid 0 can exist at any time while
p_vlan_find() always return false with vid 0.

ample of problematic case:
ip link set eth0 address 12:34:56:78:90:ab
ip link set eth1 address 12:34:56:78:90:ab
brctl addif br0 eth0
brctl addif br0 eth1
ip link set eth0 address aa:bb:cc:dd:ee:ff
en, the fdb entry 12:34:56:78:90:ab will be deleted even though the
idge port eth1 still has that address.

e port to which the bridge device is attached might needs a local entry
 its mac address is set manually.

ample of problematic case:
ip link set eth0 address 12:34:56:78:90:ab
brctl addif br0 eth0
ip link set br0 address 12:34:56:78:90:ab
ip link set eth0 address aa:bb:cc:dd:ee:ff
en, the fdb still must have the entry 12:34:56:78:90:ab, but it will be
leted.

an use br->dev->addr_assign_type to check if the address is manually
or not, but I propose another approach.

e we delete and insert local entries whenever changing mac address
he bridge device, we can change dst of the entry to NULL regardless of
_assign_type when deleting an entry associated with a certain port,
if it is found to be unnecessary later, then delete it.
 is, if changing mac address of a port, the entry might be changed
ts dst being NULL first, but is eventually deleted when recalculating
changing bridge id.

 approach is especially useful when we want to share the code with
ting vlan in which the bridge device might want such an entry regardless
ddr_assign_type, and makes things easy because we don't have to consider
ac address of the bridge device will be changed or not at the time we
te a local entry of a port, which means fdb code will not be bothered
 if the bridge id calculating logic is changed in the future.

, this change reduces inconsistent state, where frames whose dst is the
address of the bridge, can't reach the bridge because of premature fdb
y deletion. This change reduces the possibility that the bridge device
ies unreachable mac address to arp requests, which could occur during
short window between calling del_nbp() and br_stp_recalculate_bridge_id()
r_del_if(). This will effective after br_fdb_delete_by_port() starts to
the same code by following patch.

ed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
d-by: Vlad Yasevich <vyasevic@redhat.com>
ed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/bridge/br_fdb.c b/net/bridge/br_fdb.c
index 8b300e6..87c45dc 100644
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@ -112,12 +112,20 @@ void br_fdb_changeaddr(struct net_bridge_port *p, const unsigned char *newaddr)
 					if (op != p &&
 					    ether_addr_equal(op->dev->dev_addr,
 							     f->addr.addr) &&
-					    nbp_vlan_find(op, vid)) {
+					    (!vid || nbp_vlan_find(op, vid))) {
 						f->dst = op;
 						goto insert;
 					}
 				}
 
+				/* maybe bridge device has same hw addr? */
+				if (ether_addr_equal(br->dev->dev_addr,
+						     f->addr.addr) &&
+				    (!vid || br_vlan_find(br, vid))) {
+					f->dst = NULL;
+					goto insert;
+				}
+
 				/* delete old one */
 				fdb_delete(br, f);
 insert:
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index ff58204..b0c527e 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -619,6 +619,7 @@ struct sk_buff *br_handle_vlan(struct net_bridge *br,
 int br_vlan_add(struct net_bridge *br, u16 vid, u16 flags);
 int br_vlan_delete(struct net_bridge *br, u16 vid);
 void br_vlan_flush(struct net_bridge *br);
+bool br_vlan_find(struct net_bridge *br, u16 vid);
 int br_vlan_filter_toggle(struct net_bridge *br, unsigned long val);
 int nbp_vlan_add(struct net_bridge_port *port, u16 vid, u16 flags);
 int nbp_vlan_delete(struct net_bridge_port *port, u16 vid);
@@ -700,6 +701,11 @@ static inline void br_vlan_flush(struct net_bridge *br)
 {
 }
 
+static inline bool br_vlan_find(struct net_bridge *br, u16 vid)
+{
+	return false;
+}
+
 static inline int nbp_vlan_add(struct net_bridge_port *port, u16 vid, u16 flags)
 {
 	return -EOPNOTSUPP;
diff --git a/net/bridge/br_vlan.c b/net/bridge/br_vlan.c
index 90732f5..655c2e9 100644
--- a/net/bridge/br_vlan.c
+++ b/net/bridge/br_vlan.c
@@ -298,6 +298,25 @@ void br_vlan_flush(struct net_bridge *br)
 	__vlan_flush(pv);
 }
 
+bool br_vlan_find(struct net_bridge *br, u16 vid)
+{
+	struct net_port_vlans *pv;
+	bool found = false;
+
+	rcu_read_lock();
+	pv = rcu_dereference(br->vlan_info);
+
+	if (!pv)
+		goto out;
+
+	if (test_bit(vid, pv->vlan_bitmap))
+		found = true;
+
+out:
+	rcu_read_unlock();
+	return found;
+}
+
 int br_vlan_filter_toggle(struct net_bridge *br, unsigned long val)
 {
 	if (!rtnl_trylock())
