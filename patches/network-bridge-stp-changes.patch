Changes for supporting userspace STP

diff --git a/net/bridge/br_stp.c b/net/bridge/br_stp.c
index 8ac946f..03ff405 100644
--- a/net/bridge/br_stp.c
+++ b/net/bridge/br_stp.c
@@ -173,8 +173,11 @@ void br_transmit_config(struct net_bridge_port *p)
 		br_send_config_bpdu(p, &bpdu);
 		p->topology_change_ack = 0;
 		p->config_pending = 0;
-		mod_timer(&p->hold_timer,
-			  round_jiffies(jiffies + BR_HOLD_TIME));
+
+		if (p->br->stp_enabled == BR_KERNEL_STP) {
+			mod_timer(&p->hold_timer,
+					round_jiffies(jiffies + BR_HOLD_TIME));
+		}
 	}
 }
 
diff --git a/net/bridge/br_stp_if.c b/net/bridge/br_stp_if.c
index b88a256..ae80d6d 100644
--- a/net/bridge/br_stp_if.c
+++ b/net/bridge/br_stp_if.c
@@ -48,7 +48,10 @@ void br_stp_enable_bridge(struct net_bridge *br)
 	struct net_bridge_port *p;
 
 	spin_lock_bh(&br->lock);
-	mod_timer(&br->hello_timer, jiffies + br->hello_time);
+
+	if (br->stp_enabled == BR_KERNEL_STP) {
+        mod_timer(&br->hello_timer, jiffies + br->hello_time);
+	}
 	mod_timer(&br->gc_timer, jiffies + HZ/10);
 
 	br_config_bpdu_generation(br);
@@ -128,14 +131,22 @@ static void br_stp_start(struct net_bridge *br)
 	int r;
 	char *argv[] = { BR_STP_PROG, br->dev->name, "start", NULL };
 	char *envp[] = { NULL };
+	struct net_bridge_port *p;
 
 	r = call_usermodehelper(BR_STP_PROG, argv, envp, UMH_WAIT_PROC);
 	if (r == 0) {
 		br->stp_enabled = BR_USER_STP;
 		br_debug(br, "userspace STP started\n");
+		/* Stop hello and hold timer */
+		spin_lock_bh(&br->lock);
+		del_timer(&br->hello_timer);
+		list_for_each_entry(p, &br->port_list, list) {
+			del_timer(&p->hold_timer);
+		}
+		spin_unlock_bh(&br->lock);
 	} else {
 		br->stp_enabled = BR_KERNEL_STP;
-		br_debug(br, "using kernel STP\n");
+		br_info(br, "using kernel STP\n");
 
 		/* To start timers on any ports left in blocking */
 		spin_lock_bh(&br->lock);
@@ -149,6 +160,7 @@ static void br_stp_stop(struct net_bridge *br)
 	int r;
 	char *argv[] = { BR_STP_PROG, br->dev->name, "stop", NULL };
 	char *envp[] = { NULL };
+	struct net_bridge_port *p;
 
 	if (br->stp_enabled == BR_USER_STP) {
 		r = call_usermodehelper(BR_STP_PROG, argv, envp, UMH_WAIT_PROC);
@@ -156,6 +168,11 @@ static void br_stp_stop(struct net_bridge *br)
 
 		/* To start timers on any ports left in blocking */
 		spin_lock_bh(&br->lock);
+		mod_timer(&br->hello_timer, jiffies + br->hello_time);
+		list_for_each_entry(p, &br->port_list, list) {
+		mod_timer(&p->hold_timer,
+				round_jiffies(jiffies + BR_HOLD_TIME));
+		}
 		br_port_state_selection(br);
 		spin_unlock_bh(&br->lock);
 	}
